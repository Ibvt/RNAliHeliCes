
// A dynamic programming evaluator generated by GAP-C.
// 
//   GAP-C version:
//     bellmansgapc-2020.01.08
// 
//   GAP-C call:
//     gapc -I ../../../ -i shape5mfepp ../../../ali_microstate.gap -o shape5mfepp.cc 
// 
// 


#define GAPC_MOD_TRANSLATION_UNIT
#include "shape5mfepp.hh"

#include <rtlib/subopt.hh>
#include "rna.hh"
#include "Extensions/alifold.hh"
#include "Extensions/mfesubopt.hh"
#include "Extensions/probabilities.hh"
#include "Extensions/typesRNAfolding.hh"
#include "Extensions/shapes.hh"

#include <rtlib/generic_opts.hh>
#include "rtlib/pareto_dom_sort.hh"
#include "rtlib/pareto_yukish_ref.hh"

List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > &  shape5mfepp::nt_dangle(unsigned int t_0_i, unsigned int t_0_j)
{
  if (dangle_table.is_tabulated(t_0_i, t_0_j))
    {
      return dangle_table.get(t_0_i, t_0_j);
    }

  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 6))
  {
    TUSubsequence ret_3 = LOC(t_0_seq, t_0_j, t_0_j);
    TUSubsequence a_2 = ret_3;
    if (is_not_empty(a_2))
    {
      TUSubsequence ret_1;
      if (unpaired(t_0_seq, t_0_i, (t_0_i + 1)))
        {
          ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
        }

      else
        {
          empty( ret_1);
        }

      TUSubsequence a_0 = ret_1;
      if (is_not_empty(a_0))
      {
        List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > ret_2 = nt_strong((t_0_i + 1), t_0_j);
        List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > a_1 = ret_2;
        if (is_not_empty(a_1))
          {
            for (List_Ref<std::pair<std::pair<Shape, mfecovar> , String> >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
              std::pair<std::pair<shape_t, mfecovar> , String>  x_1 = *x_1_itr;
              std::pair<std::pair<shape_t, mfecovar> , String>  ans = edl(a_0, x_1, a_2);
              push_back( answers, ans);
            }
          }

        erase( a_1);
      }

      erase( a_0);
    }

    erase( a_2);
  }


  if (((t_0_j - t_0_i) >= 6))
  {
    TUSubsequence ret_7;
    if (unpaired(t_0_seq, (t_0_j - 1), t_0_j))
      {
        ret_7 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
      }

    else
      {
        empty( ret_7);
      }

    TUSubsequence a_5 = ret_7;
    if (is_not_empty(a_5))
    {
      TUSubsequence ret_5 = LOC(t_0_seq, t_0_i, t_0_i);
      TUSubsequence a_3 = ret_5;
      if (is_not_empty(a_3))
      {
        List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > ret_6 = nt_strong(t_0_i, (t_0_j - 1));
        List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > a_4 = ret_6;
        if (is_not_empty(a_4))
          {
            for (List_Ref<std::pair<std::pair<Shape, mfecovar> , String> >::iterator x_4_itr = a_4.ref().begin(); x_4_itr!=a_4.ref().end(); ++x_4_itr){
              std::pair<std::pair<shape_t, mfecovar> , String>  x_4 = *x_4_itr;
              std::pair<std::pair<shape_t, mfecovar> , String>  ans = edr(a_3, x_4, a_5);
              push_back( answers, ans);
            }
          }

        erase( a_4);
      }

      erase( a_3);
    }

    erase( a_5);
  }


  if (((t_0_j - t_0_i) >= 7))
  {
    TUSubsequence ret_11;
    if (unpaired(t_0_seq, (t_0_j - 1), t_0_j))
      {
        ret_11 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
      }

    else
      {
        empty( ret_11);
      }

    TUSubsequence a_8 = ret_11;
    if (is_not_empty(a_8))
    {
      TUSubsequence ret_9;
      if (unpaired(t_0_seq, t_0_i, (t_0_i + 1)))
        {
          ret_9 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
        }

      else
        {
          empty( ret_9);
        }

      TUSubsequence a_6 = ret_9;
      if (is_not_empty(a_6))
      {
        List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > ret_10 = nt_strong((t_0_i + 1), (t_0_j - 1));
        List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > a_7 = ret_10;
        if (is_not_empty(a_7))
          {
            for (List_Ref<std::pair<std::pair<Shape, mfecovar> , String> >::iterator x_7_itr = a_7.ref().begin(); x_7_itr!=a_7.ref().end(); ++x_7_itr){
              std::pair<std::pair<shape_t, mfecovar> , String>  x_7 = *x_7_itr;
              std::pair<std::pair<shape_t, mfecovar> , String>  ans = edlr(a_6, x_7, a_8);
              push_back( answers, ans);
            }
          }

        erase( a_7);
      }

      erase( a_6);
    }

    erase( a_8);
  }


  if (((t_0_j - t_0_i) >= 5))
  {
    TUSubsequence ret_15 = LOC(t_0_seq, t_0_j, t_0_j);
    TUSubsequence a_11 = ret_15;
    if (is_not_empty(a_11))
    {
      TUSubsequence ret_13 = LOC(t_0_seq, t_0_i, t_0_i);
      TUSubsequence a_9 = ret_13;
      if (is_not_empty(a_9))
      {
        List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > ret_14 = nt_strong(t_0_i, t_0_j);
        List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > a_10 = ret_14;
        if (is_not_empty(a_10))
          {
            for (List_Ref<std::pair<std::pair<Shape, mfecovar> , String> >::iterator x_10_itr = a_10.ref().begin(); x_10_itr!=a_10.ref().end(); ++x_10_itr){
              std::pair<std::pair<shape_t, mfecovar> , String>  x_10 = *x_10_itr;
              std::pair<std::pair<shape_t, mfecovar> , String>  ans = drem(a_9, x_10, a_11);
              push_back( answers, ans);
            }
          }

        erase( a_10);
      }

      erase( a_9);
    }

    erase( a_11);
  }

  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > eval = h(answers);
  erase( answers);
  dangle_table.set( t_0_i, t_0_j, eval);
  return dangle_table.get(t_0_i, t_0_j);
}

std::pair<std::pair<Shape, mfecovar> , String>  shape5mfepp::nt_hairpin(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 5))
    {
      return BBshape_firstG_mfecovar_secondG_E_firstG_string_secondG_E_zero;
    }

  std::pair<std::pair<Shape, mfecovar> , String>  answers;
  empty( answers);
  std::pair<std::pair<shape_t, mfecovar> , String>  ret_0;
  if (((t_0_j - t_0_i) >= 5))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_3 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_2 = ret_3;
        if (is_not_empty(a_2))
        {
          TUSubsequence ret_2;
          if ((minsize(t_0_seq, (t_0_i + 1), (t_0_j - 1), 3) && unpaired(t_0_seq, (t_0_i + 1), (t_0_j - 1))))
            {
              ret_2 = REGION(t_0_seq, (t_0_i + 1), (t_0_j - 1));
            }

          else
            {
              empty( ret_2);
            }

          TUSubsequence a_1 = ret_2;
          if (is_not_empty(a_1))
          {
            TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
            TUSubsequence a_0 = ret_1;
            if (is_not_empty(a_0))
              {
                ret_0 = hl(a_0, a_1, a_2);
              }

            else
              {
                empty( ret_0);
              }

            erase( a_0);
          }

          else
            {
              empty( ret_0);
            }

          erase( a_1);
        }

        else
          {
            empty( ret_0);
          }

        erase( a_2);
      }

      else
      {
        empty( ret_0);
        empty( ret_0);
      }

    }

  else
    {
      empty( ret_0);
    }

  answers = ret_0;
  return answers;
}

List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > &  shape5mfepp::nt_iloop(unsigned int t_0_i, unsigned int t_0_j)
{
  if (iloop_table.is_tabulated(t_0_i, t_0_j))
    {
      return iloop_table.get(t_0_i, t_0_j);
    }

  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 9))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
        {
          for(          unsigned int t_0_k_0 = (t_0_i + 2); ((t_0_k_0 <= (t_0_j - 7)) && (t_0_k_0 <= (t_0_i + 31))); ++t_0_k_0)
          {
            for(            unsigned int t_0_k_1 = (((t_0_j - (t_0_k_0 + 5)) >= 31)) ? ((t_0_j - 31)) : ((t_0_k_0 + 5)); (t_0_k_1 <= (t_0_j - 2)); ++t_0_k_1)
            {
              TUSubsequence ret_5 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
              TUSubsequence a_4 = ret_5;
              if (is_not_empty(a_4))
              {
                TUSubsequence ret_4;
                if ((maxsize(t_0_seq, t_0_k_1, (t_0_j - 1), 30) && unpaired(t_0_seq, t_0_k_1, (t_0_j - 1))))
                  {
                    ret_4 = REGION(t_0_seq, t_0_k_1, (t_0_j - 1));
                  }

                else
                  {
                    empty( ret_4);
                  }

                TUSubsequence a_3 = ret_4;
                if (is_not_empty(a_3))
                {
                  TUSubsequence ret_2;
                  if ((maxsize(t_0_seq, (t_0_i + 1), t_0_k_0, 30) && unpaired(t_0_seq, (t_0_i + 1), t_0_k_0)))
                    {
                      ret_2 = REGION(t_0_seq, (t_0_i + 1), t_0_k_0);
                    }

                  else
                    {
                      empty( ret_2);
                    }

                  TUSubsequence a_1 = ret_2;
                  if (is_not_empty(a_1))
                  {
                    TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                    TUSubsequence a_0 = ret_1;
                    if (is_not_empty(a_0))
                    {
                      List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > ret_3 = nt_strong(t_0_k_0, t_0_k_1);
                      List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > a_2 = ret_3;
                      if (is_not_empty(a_2))
                        {
                          for (List_Ref<std::pair<std::pair<Shape, mfecovar> , String> >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                            std::pair<std::pair<shape_t, mfecovar> , String>  x_2 = *x_2_itr;
                            std::pair<std::pair<shape_t, mfecovar> , String>  ans = il(a_0, a_1, x_2, a_3, a_4);
                            push_back( answers, ans);
                          }
                        }

                      erase( a_2);
                    }

                    erase( a_0);
                  }

                  erase( a_1);
                }

                erase( a_3);
              }

              erase( a_4);
            }

          }

        }

      else
        {
          empty( answers);
        }

    }

  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > eval = h(answers);
  erase( answers);
  iloop_table.set( t_0_i, t_0_j, eval);
  return iloop_table.get(t_0_i, t_0_j);
}

List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > shape5mfepp::nt_leftB(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 8))
    {
      return LBBshape_firstG_mfecovar_secondG_E_firstG_string_secondG_EM_zero;
    }

  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 8))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
        {
          for(          unsigned int t_0_k_0 = (t_0_i + 2); ((t_0_k_0 <= (t_0_j - 6)) && (t_0_k_0 <= (t_0_i + 31))); ++t_0_k_0)
          {
            TUSubsequence ret_4 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
            TUSubsequence a_3 = ret_4;
            if (is_not_empty(a_3))
            {
              TUSubsequence ret_2;
              if ((maxsize(t_0_seq, (t_0_i + 1), t_0_k_0, 30) && unpaired(t_0_seq, (t_0_i + 1), t_0_k_0)))
                {
                  ret_2 = REGION(t_0_seq, (t_0_i + 1), t_0_k_0);
                }

              else
                {
                  empty( ret_2);
                }

              TUSubsequence a_1 = ret_2;
              if (is_not_empty(a_1))
              {
                TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                TUSubsequence a_0 = ret_1;
                if (is_not_empty(a_0))
                {
                  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > ret_3 = nt_strong(t_0_k_0, (t_0_j - 1));
                  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > a_2 = ret_3;
                  if (is_not_empty(a_2))
                    {
                      for (List_Ref<std::pair<std::pair<Shape, mfecovar> , String> >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                        std::pair<std::pair<shape_t, mfecovar> , String>  x_2 = *x_2_itr;
                        std::pair<std::pair<shape_t, mfecovar> , String>  ans = bl(a_0, a_1, x_2, a_3);
                        push_back( answers, ans);
                      }
                    }

                  erase( a_2);
                }

                erase( a_0);
              }

              erase( a_1);
            }

            erase( a_3);
          }

        }

      else
        {
          empty( answers);
        }

    }

  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > eval = h(answers);
  erase( answers);
  return eval;
}

List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > &  shape5mfepp::nt_ml_comps(unsigned int t_0_i, unsigned int t_0_j)
{
  if (ml_comps_table.is_tabulated(t_0_i, t_0_j))
    {
      return ml_comps_table.get(t_0_i, t_0_j);
    }

  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 11))
  {
    TUSubsequence ret_1;
    if (unpaired(t_0_seq, t_0_i, (t_0_i + 1)))
      {
        ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
      }

    else
      {
        empty( ret_1);
      }

    TUSubsequence a_0 = ret_1;
    if (is_not_empty(a_0))
    {
      List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > ret_2 = nt_ml_comps((t_0_i + 1), t_0_j);
      List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > a_1 = ret_2;
      if (is_not_empty(a_1))
        {
          for (List_Ref<std::pair<std::pair<Shape, mfecovar> , String> >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
            std::pair<std::pair<shape_t, mfecovar> , String>  x_1 = *x_1_itr;
            std::pair<std::pair<shape_t, mfecovar> , String>  ans = sadd(a_0, x_1);
            push_back( answers, ans);
          }
        }

      erase( a_1);
    }

    erase( a_0);
  }


  if (((t_0_j - t_0_i) >= 10))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 5); (t_0_k_0 <= (t_0_j - 5)); ++t_0_k_0)
      {
        List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > ret_6 = nt_ml_comps1(t_0_k_0, t_0_j);
        List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > a_4 = ret_6;
        if (is_not_empty(a_4))
        {
          List_Ref<std::pair<std::pair<shape_t, mfecovar> , String> > ret_4;
          empty(ret_4);
          if (((t_0_k_0 - t_0_i) >= 5))
          {
            List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > ret_5 = nt_dangle(t_0_i, t_0_k_0);
            List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > a_3 = ret_5;
            if (is_not_empty(a_3))
              {
                for (List_Ref<std::pair<std::pair<Shape, mfecovar> , String> >::iterator x_3_itr = a_3.ref().begin(); x_3_itr!=a_3.ref().end(); ++x_3_itr){
                  std::pair<std::pair<shape_t, mfecovar> , String>  x_3 = *x_3_itr;
                  std::pair<std::pair<shape_t, mfecovar> , String>  ans = incl(x_3);
                  push_back( ret_4, ans);
                }
              }

            erase( a_3);
          }

          finalize( ret_4);
          List_Ref<std::pair<std::pair<shape_t, mfecovar> , String> > a_2 = ret_4;
          if (is_not_empty(a_2))
            {
              for (List_Ref<std::pair<std::pair<shape_t, mfecovar> , String> >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                std::pair<std::pair<shape_t, mfecovar> , String>  x_2 = *x_2_itr;
                for (List_Ref<std::pair<std::pair<Shape, mfecovar> , String> >::iterator x_4_itr = a_4.ref().begin(); x_4_itr!=a_4.ref().end(); ++x_4_itr){
                  std::pair<std::pair<shape_t, mfecovar> , String>  x_4 = *x_4_itr;
                  std::pair<std::pair<shape_t, mfecovar> , String>  ans = cadd(x_2, x_4);
                  push_back( answers, ans);
                }
              }
            }

          erase( a_2);
        }

        erase( a_4);
      }

    }

  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > eval = h(answers);
  erase( answers);
  ml_comps_table.set( t_0_i, t_0_j, eval);
  return ml_comps_table.get(t_0_i, t_0_j);
}

List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > &  shape5mfepp::nt_ml_comps1(unsigned int t_0_i, unsigned int t_0_j)
{
  if (ml_comps1_table.is_tabulated(t_0_i, t_0_j))
    {
      return ml_comps1_table.get(t_0_i, t_0_j);
    }

  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 6))
  {
    TUSubsequence ret_1;
    if (unpaired(t_0_seq, t_0_i, (t_0_i + 1)))
      {
        ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
      }

    else
      {
        empty( ret_1);
      }

    TUSubsequence a_0 = ret_1;
    if (is_not_empty(a_0))
    {
      List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > ret_2 = nt_ml_comps1((t_0_i + 1), t_0_j);
      List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > a_1 = ret_2;
      if (is_not_empty(a_1))
        {
          for (List_Ref<std::pair<std::pair<Shape, mfecovar> , String> >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
            std::pair<std::pair<shape_t, mfecovar> , String>  x_1 = *x_1_itr;
            std::pair<std::pair<shape_t, mfecovar> , String>  ans = sadd(a_0, x_1);
            push_back( answers, ans);
          }
        }

      erase( a_1);
    }

    erase( a_0);
  }


  if (((t_0_j - t_0_i) >= 10))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 5); (t_0_k_0 <= (t_0_j - 5)); ++t_0_k_0)
      {
        List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > ret_6 = nt_ml_comps1(t_0_k_0, t_0_j);
        List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > a_4 = ret_6;
        if (is_not_empty(a_4))
        {
          List_Ref<std::pair<std::pair<shape_t, mfecovar> , String> > ret_4;
          empty(ret_4);
          if (((t_0_k_0 - t_0_i) >= 5))
          {
            List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > ret_5 = nt_dangle(t_0_i, t_0_k_0);
            List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > a_3 = ret_5;
            if (is_not_empty(a_3))
              {
                for (List_Ref<std::pair<std::pair<Shape, mfecovar> , String> >::iterator x_3_itr = a_3.ref().begin(); x_3_itr!=a_3.ref().end(); ++x_3_itr){
                  std::pair<std::pair<shape_t, mfecovar> , String>  x_3 = *x_3_itr;
                  std::pair<std::pair<shape_t, mfecovar> , String>  ans = incl(x_3);
                  push_back( ret_4, ans);
                }
              }

            erase( a_3);
          }

          finalize( ret_4);
          List_Ref<std::pair<std::pair<shape_t, mfecovar> , String> > a_2 = ret_4;
          if (is_not_empty(a_2))
            {
              for (List_Ref<std::pair<std::pair<shape_t, mfecovar> , String> >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                std::pair<std::pair<shape_t, mfecovar> , String>  x_2 = *x_2_itr;
                for (List_Ref<std::pair<std::pair<Shape, mfecovar> , String> >::iterator x_4_itr = a_4.ref().begin(); x_4_itr!=a_4.ref().end(); ++x_4_itr){
                  std::pair<std::pair<shape_t, mfecovar> , String>  x_4 = *x_4_itr;
                  std::pair<std::pair<shape_t, mfecovar> , String>  ans = cadd(x_2, x_4);
                  push_back( answers, ans);
                }
              }
            }

          erase( a_2);
        }

        erase( a_4);
      }

    }


  if (((t_0_j - t_0_i) >= 5))
  {
    List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > ret_8 = nt_dangle(t_0_i, t_0_j);
    List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > a_5 = ret_8;
    if (is_not_empty(a_5))
      {
        for (List_Ref<std::pair<std::pair<Shape, mfecovar> , String> >::iterator x_5_itr = a_5.ref().begin(); x_5_itr!=a_5.ref().end(); ++x_5_itr){
          std::pair<std::pair<shape_t, mfecovar> , String>  x_5 = *x_5_itr;
          std::pair<std::pair<shape_t, mfecovar> , String>  ans = incl(x_5);
          push_back( answers, ans);
        }
      }

    erase( a_5);
  }


  if (((t_0_j - t_0_i) >= 6))
    {
      for(      unsigned int t_0_k_1 = (t_0_i + 5); (t_0_k_1 <= (t_0_j - 1)); ++t_0_k_1)
      {
        TUSubsequence ret_12;
        if (unpaired(t_0_seq, t_0_k_1, t_0_j))
          {
            ret_12 = REGION(t_0_seq, t_0_k_1, t_0_j);
          }

        else
          {
            empty( ret_12);
          }

        TUSubsequence a_8 = ret_12;
        if (is_not_empty(a_8))
        {
          List_Ref<std::pair<std::pair<shape_t, mfecovar> , String> > ret_10;
          empty(ret_10);
          if (((t_0_k_1 - t_0_i) >= 5))
          {
            List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > ret_11 = nt_dangle(t_0_i, t_0_k_1);
            List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > a_7 = ret_11;
            if (is_not_empty(a_7))
              {
                for (List_Ref<std::pair<std::pair<Shape, mfecovar> , String> >::iterator x_7_itr = a_7.ref().begin(); x_7_itr!=a_7.ref().end(); ++x_7_itr){
                  std::pair<std::pair<shape_t, mfecovar> , String>  x_7 = *x_7_itr;
                  std::pair<std::pair<shape_t, mfecovar> , String>  ans = incl(x_7);
                  push_back( ret_10, ans);
                }
              }

            erase( a_7);
          }

          finalize( ret_10);
          List_Ref<std::pair<std::pair<shape_t, mfecovar> , String> > a_6 = ret_10;
          if (is_not_empty(a_6))
            {
              for (List_Ref<std::pair<std::pair<shape_t, mfecovar> , String> >::iterator x_6_itr = a_6.ref().begin(); x_6_itr!=a_6.ref().end(); ++x_6_itr){
                std::pair<std::pair<shape_t, mfecovar> , String>  x_6 = *x_6_itr;
                std::pair<std::pair<shape_t, mfecovar> , String>  ans = addss(x_6, a_8);
                push_back( answers, ans);
              }
            }

          erase( a_6);
        }

        erase( a_8);
      }

    }

  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > eval = h(answers);
  erase( answers);
  ml_comps1_table.set( t_0_i, t_0_j, eval);
  return ml_comps1_table.get(t_0_i, t_0_j);
}

List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > shape5mfepp::nt_multiloop(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 12))
    {
      return LBBshape_firstG_mfecovar_secondG_E_firstG_string_secondG_EM_zero;
    }

  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 12))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_3 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_2 = ret_3;
        if (is_not_empty(a_2))
        {
          TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
          TUSubsequence a_0 = ret_1;
          if (is_not_empty(a_0))
          {
            List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > ret_2 = nt_ml_comps((t_0_i + 1), (t_0_j - 1));
            List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > a_1 = ret_2;
            if (is_not_empty(a_1))
              {
                for (List_Ref<std::pair<std::pair<Shape, mfecovar> , String> >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                  std::pair<std::pair<shape_t, mfecovar> , String>  x_1 = *x_1_itr;
                  std::pair<std::pair<shape_t, mfecovar> , String>  ans = ml(a_0, x_1, a_2);
                  push_back( answers, ans);
                }
              }

            erase( a_1);
          }

          erase( a_0);
        }

        erase( a_2);
      }

      else
        {
          empty( answers);
        }

    }


  if (((t_0_j - t_0_i) >= 13))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_8 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_6 = ret_8;
        if (is_not_empty(a_6))
        {
          TUSubsequence ret_6;
          if (unpaired(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1)))
            {
              ret_6 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
            }

          else
            {
              empty( ret_6);
            }

          TUSubsequence a_4 = ret_6;
          if (is_not_empty(a_4))
          {
            TUSubsequence ret_5 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
            TUSubsequence a_3 = ret_5;
            if (is_not_empty(a_3))
            {
              List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > ret_7 = nt_ml_comps((t_0_i + 2), (t_0_j - 1));
              List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > a_5 = ret_7;
              if (is_not_empty(a_5))
                {
                  for (List_Ref<std::pair<std::pair<Shape, mfecovar> , String> >::iterator x_5_itr = a_5.ref().begin(); x_5_itr!=a_5.ref().end(); ++x_5_itr){
                    std::pair<std::pair<shape_t, mfecovar> , String>  x_5 = *x_5_itr;
                    std::pair<std::pair<shape_t, mfecovar> , String>  ans = mldl(a_3, a_4, x_5, a_6);
                    push_back( answers, ans);
                  }
                }

              erase( a_5);
            }

            erase( a_3);
          }

          erase( a_4);
        }

        erase( a_6);
      }

      else
        {
          empty( answers);
        }

    }


  if (((t_0_j - t_0_i) >= 13))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_13 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_10 = ret_13;
        if (is_not_empty(a_10))
        {
          TUSubsequence ret_12;
          if (unpaired(t_0_seq, (t_0_j - 2), (t_0_j - 1)))
            {
              ret_12 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
            }

          else
            {
              empty( ret_12);
            }

          TUSubsequence a_9 = ret_12;
          if (is_not_empty(a_9))
          {
            TUSubsequence ret_10 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
            TUSubsequence a_7 = ret_10;
            if (is_not_empty(a_7))
            {
              List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > ret_11 = nt_ml_comps((t_0_i + 1), (t_0_j - 2));
              List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > a_8 = ret_11;
              if (is_not_empty(a_8))
                {
                  for (List_Ref<std::pair<std::pair<Shape, mfecovar> , String> >::iterator x_8_itr = a_8.ref().begin(); x_8_itr!=a_8.ref().end(); ++x_8_itr){
                    std::pair<std::pair<shape_t, mfecovar> , String>  x_8 = *x_8_itr;
                    std::pair<std::pair<shape_t, mfecovar> , String>  ans = mldr(a_7, x_8, a_9, a_10);
                    push_back( answers, ans);
                  }
                }

              erase( a_8);
            }

            erase( a_7);
          }

          erase( a_9);
        }

        erase( a_10);
      }

      else
        {
          empty( answers);
        }

    }


  if (((t_0_j - t_0_i) >= 14))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_19 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_15 = ret_19;
        if (is_not_empty(a_15))
        {
          TUSubsequence ret_18;
          if (unpaired(t_0_seq, (t_0_j - 2), (t_0_j - 1)))
            {
              ret_18 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
            }

          else
            {
              empty( ret_18);
            }

          TUSubsequence a_14 = ret_18;
          if (is_not_empty(a_14))
          {
            TUSubsequence ret_16;
            if (unpaired(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1)))
              {
                ret_16 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
              }

            else
              {
                empty( ret_16);
              }

            TUSubsequence a_12 = ret_16;
            if (is_not_empty(a_12))
            {
              TUSubsequence ret_15 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
              TUSubsequence a_11 = ret_15;
              if (is_not_empty(a_11))
              {
                List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > ret_17 = nt_ml_comps((t_0_i + 2), (t_0_j - 2));
                List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > a_13 = ret_17;
                if (is_not_empty(a_13))
                  {
                    for (List_Ref<std::pair<std::pair<Shape, mfecovar> , String> >::iterator x_13_itr = a_13.ref().begin(); x_13_itr!=a_13.ref().end(); ++x_13_itr){
                      std::pair<std::pair<shape_t, mfecovar> , String>  x_13 = *x_13_itr;
                      std::pair<std::pair<shape_t, mfecovar> , String>  ans = mldlr(a_11, a_12, x_13, a_14, a_15);
                      push_back( answers, ans);
                    }
                  }

                erase( a_13);
              }

              erase( a_11);
            }

            erase( a_12);
          }

          erase( a_14);
        }

        erase( a_15);
      }

      else
        {
          empty( answers);
        }

    }

  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > eval = h(answers);
  erase( answers);
  return eval;
}

List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > shape5mfepp::nt_rightB(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 8))
    {
      return LBBshape_firstG_mfecovar_secondG_E_firstG_string_secondG_EM_zero;
    }

  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 8))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
        {
          for(          unsigned int t_0_k_0 = (((t_0_j - (t_0_i + 6)) >= 31)) ? ((t_0_j - 31)) : ((t_0_i + 6)); (t_0_k_0 <= (t_0_j - 2)); ++t_0_k_0)
          {
            TUSubsequence ret_4 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
            TUSubsequence a_3 = ret_4;
            if (is_not_empty(a_3))
            {
              TUSubsequence ret_3;
              if ((maxsize(t_0_seq, t_0_k_0, (t_0_j - 1), 30) && unpaired(t_0_seq, t_0_k_0, (t_0_j - 1))))
                {
                  ret_3 = REGION(t_0_seq, t_0_k_0, (t_0_j - 1));
                }

              else
                {
                  empty( ret_3);
                }

              TUSubsequence a_2 = ret_3;
              if (is_not_empty(a_2))
              {
                TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                TUSubsequence a_0 = ret_1;
                if (is_not_empty(a_0))
                {
                  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > ret_2 = nt_strong((t_0_i + 1), t_0_k_0);
                  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > a_1 = ret_2;
                  if (is_not_empty(a_1))
                    {
                      for (List_Ref<std::pair<std::pair<Shape, mfecovar> , String> >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                        std::pair<std::pair<shape_t, mfecovar> , String>  x_1 = *x_1_itr;
                        std::pair<std::pair<shape_t, mfecovar> , String>  ans = br(a_0, x_1, a_2, a_3);
                        push_back( answers, ans);
                      }
                    }

                  erase( a_1);
                }

                erase( a_0);
              }

              erase( a_2);
            }

            erase( a_3);
          }

        }

      else
        {
          empty( answers);
        }

    }

  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > eval = h(answers);
  erase( answers);
  return eval;
}

List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > shape5mfepp::nt_stack(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 7))
    {
      return LBBshape_firstG_mfecovar_secondG_E_firstG_string_secondG_EM_zero;
    }

  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 7))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_3 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_2 = ret_3;
        if (is_not_empty(a_2))
        {
          TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
          TUSubsequence a_0 = ret_1;
          if (is_not_empty(a_0))
          {
            List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > ret_2 = nt_weak((t_0_i + 1), (t_0_j - 1));
            List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > a_1 = ret_2;
            if (is_not_empty(a_1))
              {
                for (List_Ref<std::pair<std::pair<Shape, mfecovar> , String> >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                  std::pair<std::pair<shape_t, mfecovar> , String>  x_1 = *x_1_itr;
                  std::pair<std::pair<shape_t, mfecovar> , String>  ans = sr(a_0, x_1, a_2);
                  push_back( answers, ans);
                }
              }

            erase( a_1);
          }

          erase( a_0);
        }

        erase( a_2);
      }

      else
        {
          empty( answers);
        }

    }

  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > eval = h(answers);
  erase( answers);
  return eval;
}

List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > &  shape5mfepp::nt_strong(unsigned int t_0_i, unsigned int t_0_j)
{
  if (strong_table.is_tabulated(t_0_i, t_0_j))
    {
      return strong_table.get(t_0_i, t_0_j);
    }

  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > answers;
  empty(answers);
  empty( answers);


  if (allowLonelyBasepairs(t_0_seq, t_0_i, t_0_j, false))
  {
    List_Ref<std::pair<std::pair<shape_t, mfecovar> , String> > ret_1;
    empty(ret_1);
    if (((t_0_j - t_0_i) >= 7))
      {
        if (basepair(t_0_seq, t_0_i, t_0_j))
        {
          TUSubsequence ret_4 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
          TUSubsequence a_2 = ret_4;
          if (is_not_empty(a_2))
          {
            TUSubsequence ret_2 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
            TUSubsequence a_0 = ret_2;
            if (is_not_empty(a_0))
            {
              List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > ret_3 = nt_weak((t_0_i + 1), (t_0_j - 1));
              List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > a_1 = ret_3;
              if (is_not_empty(a_1))
                {
                  for (List_Ref<std::pair<std::pair<Shape, mfecovar> , String> >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                    std::pair<std::pair<shape_t, mfecovar> , String>  x_1 = *x_1_itr;
                    std::pair<std::pair<shape_t, mfecovar> , String>  ans = sr(a_0, x_1, a_2);
                    push_back( ret_1, ans);
                  }
                }

              erase( a_1);
            }

            erase( a_0);
          }

          erase( a_2);
        }

        else
          {
            empty( ret_1);
          }

      }

    finalize( ret_1);
    append( answers, ret_1);
  }



  if (allowLonelyBasepairs(t_0_seq, t_0_i, t_0_j, true))
  {
    List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > ret_6 = nt_weak(t_0_i, t_0_j);
    append( answers, ret_6);
  }

  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > eval = h(answers);
  erase( answers);
  strong_table.set( t_0_i, t_0_j, eval);
  return strong_table.get(t_0_i, t_0_j);
}

List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > &  shape5mfepp::nt_struct(unsigned int t_0_i)
{
  if (struct_table.is_tabulated(t_0_i))
    {
      return struct_table.get(t_0_i);
    }

  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > answers;
  empty(answers);
  empty( answers);

  if (((t_0_right_most - t_0_i) >= 1))
  {
    TUSubsequence ret_1;
    if (unpaired(t_0_seq, t_0_i, (t_0_i + 1)))
      {
        ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
      }

    else
      {
        empty( ret_1);
      }

    TUSubsequence a_0 = ret_1;
    if (is_not_empty(a_0))
    {
      List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > ret_2 = nt_struct((t_0_i + 1));
      List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > a_1 = ret_2;
      if (is_not_empty(a_1))
        {
          for (List_Ref<std::pair<std::pair<Shape, mfecovar> , String> >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
            std::pair<std::pair<shape_t, mfecovar> , String>  x_1 = *x_1_itr;
            std::pair<std::pair<shape_t, mfecovar> , String>  ans = sadd(a_0, x_1);
            push_back( answers, ans);
          }
        }

      erase( a_1);
    }

    erase( a_0);
  }


  if (((t_0_right_most - t_0_i) >= 5))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 5); (t_0_k_0 <= t_0_right_most); ++t_0_k_0)
      {
        List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > ret_5 = nt_struct(t_0_k_0);
        List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > a_3 = ret_5;
        if (is_not_empty(a_3))
        {
          List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > ret_4 = nt_dangle(t_0_i, t_0_k_0);
          List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > a_2 = ret_4;
          if (is_not_empty(a_2))
            {
              for (List_Ref<std::pair<std::pair<Shape, mfecovar> , String> >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                std::pair<std::pair<shape_t, mfecovar> , String>  x_2 = *x_2_itr;
                for (List_Ref<std::pair<std::pair<Shape, mfecovar> , String> >::iterator x_3_itr = a_3.ref().begin(); x_3_itr!=a_3.ref().end(); ++x_3_itr){
                  std::pair<std::pair<shape_t, mfecovar> , String>  x_3 = *x_3_itr;
                  std::pair<std::pair<shape_t, mfecovar> , String>  ans = cadd(x_2, x_3);
                  push_back( answers, ans);
                }
              }
            }

          erase( a_2);
        }

        erase( a_3);
      }

    }

  std::pair<std::pair<shape_t, mfecovar> , String>  ret_6;
  if ((((t_0_right_most - t_0_i) >= 0) && ((t_0_right_most - t_0_i) <= 0)))
  {
    TUSubsequence ret_7 = LOC(t_0_seq, t_0_i, t_0_i);
    TUSubsequence a_4 = ret_7;
    if (is_not_empty(a_4))
      {
        ret_6 = nil(a_4);
      }

    else
      {
        empty( ret_6);
      }

    erase( a_4);
  }

  else
    {
      empty( ret_6);
    }

  if (is_not_empty(ret_6))
    {
      push_back( answers, ret_6);
    }

  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > eval = h(answers);
  erase( answers);
  struct_table.set( t_0_i, eval);
  return struct_table.get(t_0_i);
}

List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > &  shape5mfepp::nt_weak(unsigned int t_0_i, unsigned int t_0_j)
{
  if (weak_table.is_tabulated(t_0_i, t_0_j))
    {
      return weak_table.get(t_0_i, t_0_j);
    }

  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > answers;
  empty(answers);
  empty( answers);


  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > ret_1 = nt_stack(t_0_i, t_0_j);
  append( answers, ret_1);
  std::pair<std::pair<Shape, mfecovar> , String>  ret_2 = nt_hairpin(t_0_i, t_0_j);
  if (is_not_empty(ret_2))
    {
      push_back( answers, ret_2);
    }

  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > ret_3 = nt_leftB(t_0_i, t_0_j);
  append( answers, ret_3);
  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > ret_4 = nt_rightB(t_0_i, t_0_j);
  append( answers, ret_4);
  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > ret_5 = nt_iloop(t_0_i, t_0_j);
  append( answers, ret_5);
  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > ret_6 = nt_multiloop(t_0_i, t_0_j);
  append( answers, ret_6);
  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > eval = h(answers);
  erase( answers);
  weak_table.set( t_0_i, t_0_j, eval);
  return weak_table.get(t_0_i, t_0_j);
}


std::pair<std::pair<shape_t, mfecovar> , String>  shape5mfepp::addss(const std::pair<std::pair<shape_t, mfecovar> , String> & p_p_e, const TUSubsequence & p_p_rb)
{
  std::pair<shape_t, mfecovar>  l_0 = p_p_e.first;
  TUSubsequence l_1 = p_p_rb;
  String r_0 = p_p_e.second;
  TUSubsequence r_1 = p_p_rb;
  std::pair<shape_t, mfecovar>  ret_left = addss_l(l_0, l_1);
  String ret_right = addss_r(r_0, r_1);
  std::pair<std::pair<shape_t, mfecovar> , String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<shape_t, mfecovar> , String>  shape5mfepp::bl(const TUSubsequence & p_p_lb, const TUSubsequence & p_p_lregion, const std::pair<std::pair<shape_t, mfecovar> , String> & p_p_e, const TUSubsequence & p_p_rb)
{
  TUSubsequence l_0 = p_p_lb;
  TUSubsequence l_1 = p_p_lregion;
  std::pair<shape_t, mfecovar>  l_2 = p_p_e.first;
  TUSubsequence l_3 = p_p_rb;
  TUSubsequence r_0 = p_p_lb;
  TUSubsequence r_1 = p_p_lregion;
  String r_2 = p_p_e.second;
  TUSubsequence r_3 = p_p_rb;
  std::pair<shape_t, mfecovar>  ret_left = bl_l(l_0, l_1, l_2, l_3);
  String ret_right = bl_r(r_0, r_1, r_2, r_3);
  std::pair<std::pair<shape_t, mfecovar> , String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<shape_t, mfecovar> , String>  shape5mfepp::br(const TUSubsequence & p_p_lb, const std::pair<std::pair<shape_t, mfecovar> , String> & p_p_e, const TUSubsequence & p_p_rregion, const TUSubsequence & p_p_rb)
{
  TUSubsequence l_0 = p_p_lb;
  std::pair<shape_t, mfecovar>  l_1 = p_p_e.first;
  TUSubsequence l_2 = p_p_rregion;
  TUSubsequence l_3 = p_p_rb;
  TUSubsequence r_0 = p_p_lb;
  String r_1 = p_p_e.second;
  TUSubsequence r_2 = p_p_rregion;
  TUSubsequence r_3 = p_p_rb;
  std::pair<shape_t, mfecovar>  ret_left = br_l(l_0, l_1, l_2, l_3);
  String ret_right = br_r(r_0, r_1, r_2, r_3);
  std::pair<std::pair<shape_t, mfecovar> , String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<shape_t, mfecovar> , String>  shape5mfepp::cadd(const std::pair<std::pair<shape_t, mfecovar> , String> & p_p_le, const std::pair<std::pair<shape_t, mfecovar> , String> & p_p_re)
{
  std::pair<shape_t, mfecovar>  l_0 = p_p_le.first;
  std::pair<shape_t, mfecovar>  l_1 = p_p_re.first;
  String r_0 = p_p_le.second;
  String r_1 = p_p_re.second;
  std::pair<shape_t, mfecovar>  ret_left = cadd_l(l_0, l_1);
  String ret_right = cadd_r(r_0, r_1);
  std::pair<std::pair<shape_t, mfecovar> , String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<shape_t, mfecovar> , String>  shape5mfepp::drem(const TUSubsequence & p_p_lloc, const std::pair<std::pair<shape_t, mfecovar> , String> & p_p_e, const TUSubsequence & p_p_rloc)
{
  TUSubsequence l_0 = p_p_lloc;
  std::pair<shape_t, mfecovar>  l_1 = p_p_e.first;
  TUSubsequence l_2 = p_p_rloc;
  TUSubsequence r_0 = p_p_lloc;
  String r_1 = p_p_e.second;
  TUSubsequence r_2 = p_p_rloc;
  std::pair<shape_t, mfecovar>  ret_left = drem_l(l_0, l_1, l_2);
  String ret_right = drem_r(r_0, r_1, r_2);
  std::pair<std::pair<shape_t, mfecovar> , String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<shape_t, mfecovar> , String>  shape5mfepp::edl(const TUSubsequence & p_p_lb, const std::pair<std::pair<shape_t, mfecovar> , String> & p_p_e, const TUSubsequence & p_p_rloc)
{
  TUSubsequence l_0 = p_p_lb;
  std::pair<shape_t, mfecovar>  l_1 = p_p_e.first;
  TUSubsequence l_2 = p_p_rloc;
  TUSubsequence r_0 = p_p_lb;
  String r_1 = p_p_e.second;
  TUSubsequence r_2 = p_p_rloc;
  std::pair<shape_t, mfecovar>  ret_left = edl_l(l_0, l_1, l_2);
  String ret_right = edl_r(r_0, r_1, r_2);
  std::pair<std::pair<shape_t, mfecovar> , String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<shape_t, mfecovar> , String>  shape5mfepp::edlr(const TUSubsequence & p_p_lb, const std::pair<std::pair<shape_t, mfecovar> , String> & p_p_e, const TUSubsequence & p_p_rb)
{
  TUSubsequence l_0 = p_p_lb;
  std::pair<shape_t, mfecovar>  l_1 = p_p_e.first;
  TUSubsequence l_2 = p_p_rb;
  TUSubsequence r_0 = p_p_lb;
  String r_1 = p_p_e.second;
  TUSubsequence r_2 = p_p_rb;
  std::pair<shape_t, mfecovar>  ret_left = edlr_l(l_0, l_1, l_2);
  String ret_right = edlr_r(r_0, r_1, r_2);
  std::pair<std::pair<shape_t, mfecovar> , String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<shape_t, mfecovar> , String>  shape5mfepp::edr(const TUSubsequence & p_p_lloc, const std::pair<std::pair<shape_t, mfecovar> , String> & p_p_e, const TUSubsequence & p_p_rb)
{
  TUSubsequence l_0 = p_p_lloc;
  std::pair<shape_t, mfecovar>  l_1 = p_p_e.first;
  TUSubsequence l_2 = p_p_rb;
  TUSubsequence r_0 = p_p_lloc;
  String r_1 = p_p_e.second;
  TUSubsequence r_2 = p_p_rb;
  std::pair<shape_t, mfecovar>  ret_left = edr_l(l_0, l_1, l_2);
  String ret_right = edr_r(r_0, r_1, r_2);
  std::pair<std::pair<shape_t, mfecovar> , String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > shape5mfepp::h(List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > i)
{
  std::pair<List<std::pair<std::pair<Shape, mfecovar> , String> >::iterator, List<std::pair<std::pair<Shape, mfecovar> , String> >::iterator> range = get_range(i);
  return h(range);
}

template <typename Iterator>
List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > shape5mfepp::h(std::pair<Iterator, Iterator> i)

{
  List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > answers;
  empty(answers);
  empty( answers);
  std::pair<Proxy::Iterator<Iterator, select1st<typename Iterator::value_type> >  ,Proxy::Iterator<Iterator, select1st<typename Iterator::value_type> > >  left = splice_left(i);
  List_Ref<std::pair<Shape, mfecovar> > left_answers = h_l(left);
  if (isEmpty(left_answers))
  {
    List_Ref<std::pair<std::pair<Shape, mfecovar> , String> > temp;
    empty(temp);
    empty( temp);
    erase( left_answers);
    return temp;
  }

  for (List_Ref<std::pair<Shape, mfecovar> >::iterator elem = left_answers.ref().begin(); elem!=left_answers.ref().end(); ++elem){
    for (Iterator tupel = i.first; tupel != i.second; ++tupel) {
      if (((*tupel).first == (*elem)))
        {
          push_back( answers, (*tupel));
        }

    }
  }
  return answers;
}

std::pair<std::pair<shape_t, mfecovar> , String>  shape5mfepp::hl(const TUSubsequence & p_p_lb, const TUSubsequence & p_p_region, const TUSubsequence & p_p_rb)
{
  TUSubsequence l_0 = p_p_lb;
  TUSubsequence l_1 = p_p_region;
  TUSubsequence l_2 = p_p_rb;
  TUSubsequence r_0 = p_p_lb;
  TUSubsequence r_1 = p_p_region;
  TUSubsequence r_2 = p_p_rb;
  std::pair<shape_t, mfecovar>  ret_left = hl_l(l_0, l_1, l_2);
  String ret_right = hl_r(r_0, r_1, r_2);
  std::pair<std::pair<shape_t, mfecovar> , String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<shape_t, mfecovar> , String>  shape5mfepp::il(const TUSubsequence & p_p_lb, const TUSubsequence & p_p_lregion, const std::pair<std::pair<shape_t, mfecovar> , String> & p_p_e, const TUSubsequence & p_p_rregion, const TUSubsequence & p_p_rb)
{
  TUSubsequence l_0 = p_p_lb;
  TUSubsequence l_1 = p_p_lregion;
  std::pair<shape_t, mfecovar>  l_2 = p_p_e.first;
  TUSubsequence l_3 = p_p_rregion;
  TUSubsequence l_4 = p_p_rb;
  TUSubsequence r_0 = p_p_lb;
  TUSubsequence r_1 = p_p_lregion;
  String r_2 = p_p_e.second;
  TUSubsequence r_3 = p_p_rregion;
  TUSubsequence r_4 = p_p_rb;
  std::pair<shape_t, mfecovar>  ret_left = il_l(l_0, l_1, l_2, l_3, l_4);
  String ret_right = il_r(r_0, r_1, r_2, r_3, r_4);
  std::pair<std::pair<shape_t, mfecovar> , String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<shape_t, mfecovar> , String>  shape5mfepp::incl(const std::pair<std::pair<shape_t, mfecovar> , String> & p_p_e)
{
  std::pair<shape_t, mfecovar>  l_0 = p_p_e.first;
  String r_0 = p_p_e.second;
  std::pair<shape_t, mfecovar>  ret_left = incl_l(l_0);
  String ret_right = incl_r(r_0);
  std::pair<std::pair<shape_t, mfecovar> , String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<shape_t, mfecovar> , String>  shape5mfepp::ml(const TUSubsequence & p_p_lb, const std::pair<std::pair<shape_t, mfecovar> , String> & p_p_e, const TUSubsequence & p_p_rb)
{
  TUSubsequence l_0 = p_p_lb;
  std::pair<shape_t, mfecovar>  l_1 = p_p_e.first;
  TUSubsequence l_2 = p_p_rb;
  TUSubsequence r_0 = p_p_lb;
  String r_1 = p_p_e.second;
  TUSubsequence r_2 = p_p_rb;
  std::pair<shape_t, mfecovar>  ret_left = ml_l(l_0, l_1, l_2);
  String ret_right = ml_r(r_0, r_1, r_2);
  std::pair<std::pair<shape_t, mfecovar> , String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<shape_t, mfecovar> , String>  shape5mfepp::mldl(const TUSubsequence & p_p_lb, const TUSubsequence & p_p_dl, const std::pair<std::pair<shape_t, mfecovar> , String> & p_p_e, const TUSubsequence & p_p_rb)
{
  TUSubsequence l_0 = p_p_lb;
  TUSubsequence l_1 = p_p_dl;
  std::pair<shape_t, mfecovar>  l_2 = p_p_e.first;
  TUSubsequence l_3 = p_p_rb;
  TUSubsequence r_0 = p_p_lb;
  TUSubsequence r_1 = p_p_dl;
  String r_2 = p_p_e.second;
  TUSubsequence r_3 = p_p_rb;
  std::pair<shape_t, mfecovar>  ret_left = mldl_l(l_0, l_1, l_2, l_3);
  String ret_right = mldl_r(r_0, r_1, r_2, r_3);
  std::pair<std::pair<shape_t, mfecovar> , String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<shape_t, mfecovar> , String>  shape5mfepp::mldlr(const TUSubsequence & p_p_lb, const TUSubsequence & p_p_dl, const std::pair<std::pair<shape_t, mfecovar> , String> & p_p_e, const TUSubsequence & p_p_dr, const TUSubsequence & p_p_rb)
{
  TUSubsequence l_0 = p_p_lb;
  TUSubsequence l_1 = p_p_dl;
  std::pair<shape_t, mfecovar>  l_2 = p_p_e.first;
  TUSubsequence l_3 = p_p_dr;
  TUSubsequence l_4 = p_p_rb;
  TUSubsequence r_0 = p_p_lb;
  TUSubsequence r_1 = p_p_dl;
  String r_2 = p_p_e.second;
  TUSubsequence r_3 = p_p_dr;
  TUSubsequence r_4 = p_p_rb;
  std::pair<shape_t, mfecovar>  ret_left = mldlr_l(l_0, l_1, l_2, l_3, l_4);
  String ret_right = mldlr_r(r_0, r_1, r_2, r_3, r_4);
  std::pair<std::pair<shape_t, mfecovar> , String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<shape_t, mfecovar> , String>  shape5mfepp::mldr(const TUSubsequence & p_p_lb, const std::pair<std::pair<shape_t, mfecovar> , String> & p_p_e, const TUSubsequence & p_p_dr, const TUSubsequence & p_p_rb)
{
  TUSubsequence l_0 = p_p_lb;
  std::pair<shape_t, mfecovar>  l_1 = p_p_e.first;
  TUSubsequence l_2 = p_p_dr;
  TUSubsequence l_3 = p_p_rb;
  TUSubsequence r_0 = p_p_lb;
  String r_1 = p_p_e.second;
  TUSubsequence r_2 = p_p_dr;
  TUSubsequence r_3 = p_p_rb;
  std::pair<shape_t, mfecovar>  ret_left = mldr_l(l_0, l_1, l_2, l_3);
  String ret_right = mldr_r(r_0, r_1, r_2, r_3);
  std::pair<std::pair<shape_t, mfecovar> , String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<shape_t, mfecovar> , String>  shape5mfepp::nil(const TUSubsequence & p_p_loc)
{
  TUSubsequence l_0 = p_p_loc;
  TUSubsequence r_0 = p_p_loc;
  std::pair<shape_t, mfecovar>  ret_left = nil_l(l_0);
  String ret_right = nil_r(r_0);
  std::pair<std::pair<shape_t, mfecovar> , String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<shape_t, mfecovar> , String>  shape5mfepp::sadd(const TUSubsequence & p_p_b, const std::pair<std::pair<shape_t, mfecovar> , String> & p_p_e)
{
  TUSubsequence l_0 = p_p_b;
  std::pair<shape_t, mfecovar>  l_1 = p_p_e.first;
  TUSubsequence r_0 = p_p_b;
  String r_1 = p_p_e.second;
  std::pair<shape_t, mfecovar>  ret_left = sadd_l(l_0, l_1);
  String ret_right = sadd_r(r_0, r_1);
  std::pair<std::pair<shape_t, mfecovar> , String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<std::pair<shape_t, mfecovar> , String>  shape5mfepp::sr(const TUSubsequence & p_p_lb, const std::pair<std::pair<shape_t, mfecovar> , String> & p_p_e, const TUSubsequence & p_p_rb)
{
  TUSubsequence l_0 = p_p_lb;
  std::pair<shape_t, mfecovar>  l_1 = p_p_e.first;
  TUSubsequence l_2 = p_p_rb;
  TUSubsequence r_0 = p_p_lb;
  String r_1 = p_p_e.second;
  TUSubsequence r_2 = p_p_rb;
  std::pair<shape_t, mfecovar>  ret_left = sr_l(l_0, l_1, l_2);
  String ret_right = sr_r(r_0, r_1, r_2);
  std::pair<std::pair<shape_t, mfecovar> , String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}



std::pair<shape_t, mfecovar>  shape5mfepp::addss_l(const std::pair<shape_t, mfecovar> & p_e, const TUSubsequence & p_rb)
{
  shape_t l_0 = p_e.first;
  TUSubsequence l_1 = p_rb;
  mfecovar r_0 = p_e.second;
  TUSubsequence r_1 = p_rb;
  shape_t ret_left = addss_l_l(l_0, l_1);
  mfecovar ret_right = addss_l_r(r_0, r_1);
  std::pair<shape_t, mfecovar>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<shape_t, mfecovar>  shape5mfepp::bl_l(const TUSubsequence & p_lb, const TUSubsequence & p_lregion, const std::pair<shape_t, mfecovar> & p_e, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  TUSubsequence l_1 = p_lregion;
  shape_t l_2 = p_e.first;
  TUSubsequence l_3 = p_rb;
  TUSubsequence r_0 = p_lb;
  TUSubsequence r_1 = p_lregion;
  mfecovar r_2 = p_e.second;
  TUSubsequence r_3 = p_rb;
  shape_t ret_left = bl_l_l(l_0, l_1, l_2, l_3);
  mfecovar ret_right = bl_l_r(r_0, r_1, r_2, r_3);
  std::pair<shape_t, mfecovar>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<shape_t, mfecovar>  shape5mfepp::br_l(const TUSubsequence & p_lb, const std::pair<shape_t, mfecovar> & p_e, const TUSubsequence & p_rregion, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  shape_t l_1 = p_e.first;
  TUSubsequence l_2 = p_rregion;
  TUSubsequence l_3 = p_rb;
  TUSubsequence r_0 = p_lb;
  mfecovar r_1 = p_e.second;
  TUSubsequence r_2 = p_rregion;
  TUSubsequence r_3 = p_rb;
  shape_t ret_left = br_l_l(l_0, l_1, l_2, l_3);
  mfecovar ret_right = br_l_r(r_0, r_1, r_2, r_3);
  std::pair<shape_t, mfecovar>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<shape_t, mfecovar>  shape5mfepp::cadd_l(const std::pair<shape_t, mfecovar> & p_le, const std::pair<shape_t, mfecovar> & p_re)
{
  shape_t l_0 = p_le.first;
  shape_t l_1 = p_re.first;
  mfecovar r_0 = p_le.second;
  mfecovar r_1 = p_re.second;
  shape_t ret_left = cadd_l_l(l_0, l_1);
  mfecovar ret_right = cadd_l_r(r_0, r_1);
  std::pair<shape_t, mfecovar>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<shape_t, mfecovar>  shape5mfepp::drem_l(const TUSubsequence & p_lloc, const std::pair<shape_t, mfecovar> & p_e, const TUSubsequence & p_rloc)
{
  TUSubsequence l_0 = p_lloc;
  shape_t l_1 = p_e.first;
  TUSubsequence l_2 = p_rloc;
  TUSubsequence r_0 = p_lloc;
  mfecovar r_1 = p_e.second;
  TUSubsequence r_2 = p_rloc;
  shape_t ret_left = drem_l_l(l_0, l_1, l_2);
  mfecovar ret_right = drem_l_r(r_0, r_1, r_2);
  std::pair<shape_t, mfecovar>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<shape_t, mfecovar>  shape5mfepp::edl_l(const TUSubsequence & p_lb, const std::pair<shape_t, mfecovar> & p_e, const TUSubsequence & p_rloc)
{
  TUSubsequence l_0 = p_lb;
  shape_t l_1 = p_e.first;
  TUSubsequence l_2 = p_rloc;
  TUSubsequence r_0 = p_lb;
  mfecovar r_1 = p_e.second;
  TUSubsequence r_2 = p_rloc;
  shape_t ret_left = edl_l_l(l_0, l_1, l_2);
  mfecovar ret_right = edl_l_r(r_0, r_1, r_2);
  std::pair<shape_t, mfecovar>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<shape_t, mfecovar>  shape5mfepp::edlr_l(const TUSubsequence & p_lb, const std::pair<shape_t, mfecovar> & p_e, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  shape_t l_1 = p_e.first;
  TUSubsequence l_2 = p_rb;
  TUSubsequence r_0 = p_lb;
  mfecovar r_1 = p_e.second;
  TUSubsequence r_2 = p_rb;
  shape_t ret_left = edlr_l_l(l_0, l_1, l_2);
  mfecovar ret_right = edlr_l_r(r_0, r_1, r_2);
  std::pair<shape_t, mfecovar>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<shape_t, mfecovar>  shape5mfepp::edr_l(const TUSubsequence & p_lloc, const std::pair<shape_t, mfecovar> & p_e, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lloc;
  shape_t l_1 = p_e.first;
  TUSubsequence l_2 = p_rb;
  TUSubsequence r_0 = p_lloc;
  mfecovar r_1 = p_e.second;
  TUSubsequence r_2 = p_rb;
  shape_t ret_left = edr_l_l(l_0, l_1, l_2);
  mfecovar ret_right = edr_l_r(r_0, r_1, r_2);
  std::pair<shape_t, mfecovar>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

List_Ref<std::pair<Shape, mfecovar> > shape5mfepp::h_l(List_Ref<std::pair<Shape, mfecovar> > i)
{
  std::pair<List<std::pair<Shape, mfecovar> >::iterator, List<std::pair<Shape, mfecovar> >::iterator> range = get_range(i);
  return h_l(range);
}

template <typename Iterator>
List_Ref<std::pair<Shape, mfecovar> > shape5mfepp::h_l(std::pair<Iterator, Iterator> i)

{
  List_Ref<std::pair<Shape, mfecovar> > answers;
  empty(answers);
  empty( answers);
  std::pair<Proxy::Iterator<Iterator, select1st<typename Iterator::value_type> >  ,Proxy::Iterator<Iterator, select1st<typename Iterator::value_type> > >  left = splice_left(i);
  List_Ref<shape_t> left_answers = h_l_l(left);
  if (isEmpty(left_answers))
  {
    List_Ref<std::pair<Shape, mfecovar> > temp;
    empty(temp);
    empty( temp);
    erase( left_answers);
    return temp;
  }

  for (List_Ref<shape_t>::iterator elem = left_answers.ref().begin(); elem!=left_answers.ref().end(); ++elem){
    List_Ref<mfecovar> right_candidates;
    empty(right_candidates);
    empty( right_candidates);
    for (Iterator tupel = i.first; tupel != i.second; ++tupel) {
      if (((*tupel).first == (*elem)))
        {
          push_back( right_candidates, (*tupel).second);
        }

    }
    mfecovar right_answers = h_l_r(right_candidates);
    mfecovar right_elem;
    right_elem = right_answers;
    std::pair<Shape, mfecovar>  temp_elem;
    temp_elem.first = (*elem);
    temp_elem.second = right_elem;
    push_back( answers, temp_elem);
  }
  return answers;
}

std::pair<shape_t, mfecovar>  shape5mfepp::hl_l(const TUSubsequence & p_lb, const TUSubsequence & p_region, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  TUSubsequence l_1 = p_region;
  TUSubsequence l_2 = p_rb;
  TUSubsequence r_0 = p_lb;
  TUSubsequence r_1 = p_region;
  TUSubsequence r_2 = p_rb;
  shape_t ret_left = hl_l_l(l_0, l_1, l_2);
  mfecovar ret_right = hl_l_r(r_0, r_1, r_2);
  std::pair<shape_t, mfecovar>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<shape_t, mfecovar>  shape5mfepp::il_l(const TUSubsequence & p_lb, const TUSubsequence & p_lregion, const std::pair<shape_t, mfecovar> & p_e, const TUSubsequence & p_rregion, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  TUSubsequence l_1 = p_lregion;
  shape_t l_2 = p_e.first;
  TUSubsequence l_3 = p_rregion;
  TUSubsequence l_4 = p_rb;
  TUSubsequence r_0 = p_lb;
  TUSubsequence r_1 = p_lregion;
  mfecovar r_2 = p_e.second;
  TUSubsequence r_3 = p_rregion;
  TUSubsequence r_4 = p_rb;
  shape_t ret_left = il_l_l(l_0, l_1, l_2, l_3, l_4);
  mfecovar ret_right = il_l_r(r_0, r_1, r_2, r_3, r_4);
  std::pair<shape_t, mfecovar>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<shape_t, mfecovar>  shape5mfepp::incl_l(const std::pair<shape_t, mfecovar> & p_e)
{
  shape_t l_0 = p_e.first;
  mfecovar r_0 = p_e.second;
  shape_t ret_left = incl_l_l(l_0);
  mfecovar ret_right = incl_l_r(r_0);
  std::pair<shape_t, mfecovar>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<shape_t, mfecovar>  shape5mfepp::ml_l(const TUSubsequence & p_lb, const std::pair<shape_t, mfecovar> & p_e, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  shape_t l_1 = p_e.first;
  TUSubsequence l_2 = p_rb;
  TUSubsequence r_0 = p_lb;
  mfecovar r_1 = p_e.second;
  TUSubsequence r_2 = p_rb;
  shape_t ret_left = ml_l_l(l_0, l_1, l_2);
  mfecovar ret_right = ml_l_r(r_0, r_1, r_2);
  std::pair<shape_t, mfecovar>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<shape_t, mfecovar>  shape5mfepp::mldl_l(const TUSubsequence & p_lb, const TUSubsequence & p_dl, const std::pair<shape_t, mfecovar> & p_e, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  TUSubsequence l_1 = p_dl;
  shape_t l_2 = p_e.first;
  TUSubsequence l_3 = p_rb;
  TUSubsequence r_0 = p_lb;
  TUSubsequence r_1 = p_dl;
  mfecovar r_2 = p_e.second;
  TUSubsequence r_3 = p_rb;
  shape_t ret_left = mldl_l_l(l_0, l_1, l_2, l_3);
  mfecovar ret_right = mldl_l_r(r_0, r_1, r_2, r_3);
  std::pair<shape_t, mfecovar>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<shape_t, mfecovar>  shape5mfepp::mldlr_l(const TUSubsequence & p_lb, const TUSubsequence & p_dl, const std::pair<shape_t, mfecovar> & p_e, const TUSubsequence & p_dr, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  TUSubsequence l_1 = p_dl;
  shape_t l_2 = p_e.first;
  TUSubsequence l_3 = p_dr;
  TUSubsequence l_4 = p_rb;
  TUSubsequence r_0 = p_lb;
  TUSubsequence r_1 = p_dl;
  mfecovar r_2 = p_e.second;
  TUSubsequence r_3 = p_dr;
  TUSubsequence r_4 = p_rb;
  shape_t ret_left = mldlr_l_l(l_0, l_1, l_2, l_3, l_4);
  mfecovar ret_right = mldlr_l_r(r_0, r_1, r_2, r_3, r_4);
  std::pair<shape_t, mfecovar>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<shape_t, mfecovar>  shape5mfepp::mldr_l(const TUSubsequence & p_lb, const std::pair<shape_t, mfecovar> & p_e, const TUSubsequence & p_dr, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  shape_t l_1 = p_e.first;
  TUSubsequence l_2 = p_dr;
  TUSubsequence l_3 = p_rb;
  TUSubsequence r_0 = p_lb;
  mfecovar r_1 = p_e.second;
  TUSubsequence r_2 = p_dr;
  TUSubsequence r_3 = p_rb;
  shape_t ret_left = mldr_l_l(l_0, l_1, l_2, l_3);
  mfecovar ret_right = mldr_l_r(r_0, r_1, r_2, r_3);
  std::pair<shape_t, mfecovar>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<shape_t, mfecovar>  shape5mfepp::nil_l(const TUSubsequence & p_loc)
{
  TUSubsequence l_0 = p_loc;
  TUSubsequence r_0 = p_loc;
  shape_t ret_left = nil_l_l(l_0);
  mfecovar ret_right = nil_l_r(r_0);
  std::pair<shape_t, mfecovar>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<shape_t, mfecovar>  shape5mfepp::sadd_l(const TUSubsequence & p_b, const std::pair<shape_t, mfecovar> & p_e)
{
  TUSubsequence l_0 = p_b;
  shape_t l_1 = p_e.first;
  TUSubsequence r_0 = p_b;
  mfecovar r_1 = p_e.second;
  shape_t ret_left = sadd_l_l(l_0, l_1);
  mfecovar ret_right = sadd_l_r(r_0, r_1);
  std::pair<shape_t, mfecovar>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<shape_t, mfecovar>  shape5mfepp::sr_l(const TUSubsequence & p_lb, const std::pair<shape_t, mfecovar> & p_e, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  shape_t l_1 = p_e.first;
  TUSubsequence l_2 = p_rb;
  TUSubsequence r_0 = p_lb;
  mfecovar r_1 = p_e.second;
  TUSubsequence r_2 = p_rb;
  shape_t ret_left = sr_l_l(l_0, l_1, l_2);
  mfecovar ret_right = sr_l_r(r_0, r_1, r_2);
  std::pair<shape_t, mfecovar>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}



shape_t shape5mfepp::addss_l_l(shape_t e, const TUSubsequence & rb)
{
#line 666 "../../../ali_microstate.gap"
  return e;
#line 1995 "shape5mfepp.cc"
}

shape_t shape5mfepp::bl_l_l(const TUSubsequence & lb, const TUSubsequence & lregion, shape_t e, const TUSubsequence & rb)
{
#line 638 "../../../ali_microstate.gap"
  return e;
#line 2002 "shape5mfepp.cc"
}

shape_t shape5mfepp::br_l_l(const TUSubsequence & lb, shape_t e, const TUSubsequence & rregion, const TUSubsequence & rb)
{
#line 642 "../../../ali_microstate.gap"
  return e;
#line 2009 "shape5mfepp.cc"
}

shape_t shape5mfepp::cadd_l_l(shape_t le, shape_t re)
{
#line 600 "../../../ali_microstate.gap"
  if ((re == '_'))
    {
      return le;
    }

  else
    {
      return (le + re);
    }

#line 2025 "shape5mfepp.cc"
}

shape_t shape5mfepp::drem_l_l(const TUSubsequence & lloc, shape_t e, const TUSubsequence & rloc)
{
#line 625 "../../../ali_microstate.gap"
  return e;
#line 2032 "shape5mfepp.cc"
}

shape_t shape5mfepp::edl_l_l(const TUSubsequence & lb, shape_t e, const TUSubsequence & rloc)
{
#line 613 "../../../ali_microstate.gap"
  return e;
#line 2039 "shape5mfepp.cc"
}

shape_t shape5mfepp::edlr_l_l(const TUSubsequence & lb, shape_t e, const TUSubsequence & rb)
{
#line 621 "../../../ali_microstate.gap"
  return e;
#line 2046 "shape5mfepp.cc"
}

shape_t shape5mfepp::edr_l_l(const TUSubsequence & lloc, shape_t e, const TUSubsequence & rb)
{
#line 617 "../../../ali_microstate.gap"
  return e;
#line 2053 "shape5mfepp.cc"
}

List_Ref<shape_t> shape5mfepp::h_l_l(List_Ref<shape_t> i)
{
  std::pair<List<Shape>::iterator, List<Shape>::iterator> range = get_range(i);
  return h_l_l(range);
}

template <typename Iterator>
List_Ref<shape_t> shape5mfepp::h_l_l(std::pair<Iterator, Iterator> i)

{
#line 674 "../../../ali_microstate.gap"
  return unique(i);
#line 2068 "shape5mfepp.cc"
}

shape_t shape5mfepp::hl_l_l(const TUSubsequence & lb, const TUSubsequence & region, const TUSubsequence & rb)
{
#line 633 "../../../ali_microstate.gap"
  return (openParen + closeParen);
#line 2075 "shape5mfepp.cc"
}

shape_t shape5mfepp::il_l_l(const TUSubsequence & lb, const TUSubsequence & lregion, shape_t e, const TUSubsequence & rregion, const TUSubsequence & rb)
{
#line 646 "../../../ali_microstate.gap"
  return e;
#line 2082 "shape5mfepp.cc"
}

shape_t shape5mfepp::incl_l_l(shape_t e)
{
#line 670 "../../../ali_microstate.gap"
  return e;
#line 2089 "shape5mfepp.cc"
}

shape_t shape5mfepp::ml_l_l(const TUSubsequence & lb, shape_t e, const TUSubsequence & rb)
{
#line 650 "../../../ali_microstate.gap"
  return ((openParen + e) + closeParen);
#line 2096 "shape5mfepp.cc"
}

shape_t shape5mfepp::mldl_l_l(const TUSubsequence & lb, const TUSubsequence & dl, shape_t e, const TUSubsequence & rb)
{
#line 662 "../../../ali_microstate.gap"
  return ((openParen + e) + closeParen);
#line 2103 "shape5mfepp.cc"
}

shape_t shape5mfepp::mldlr_l_l(const TUSubsequence & lb, const TUSubsequence & dl, shape_t e, const TUSubsequence & dr, const TUSubsequence & rb)
{
#line 658 "../../../ali_microstate.gap"
  return ((openParen + e) + closeParen);
#line 2110 "shape5mfepp.cc"
}

shape_t shape5mfepp::mldr_l_l(const TUSubsequence & lb, shape_t e, const TUSubsequence & dr, const TUSubsequence & rb)
{
#line 654 "../../../ali_microstate.gap"
  return ((openParen + e) + closeParen);
#line 2117 "shape5mfepp.cc"
}

shape_t shape5mfepp::nil_l_l(const TUSubsequence & loc)
{
#line 608 "../../../ali_microstate.gap"
  shape_t r;
  return r;
#line 2125 "shape5mfepp.cc"
}

shape_t shape5mfepp::sadd_l_l(const TUSubsequence & b, shape_t e)
{
#line 590 "../../../ali_microstate.gap"
  shape_t emptyShape;
  if ((e == emptyShape))
    {
      return ('_' + e);
    }

  else
    {
      return e;
    }

#line 2142 "shape5mfepp.cc"
}

shape_t shape5mfepp::sr_l_l(const TUSubsequence & lb, shape_t e, const TUSubsequence & rb)
{
#line 629 "../../../ali_microstate.gap"
  return e;
#line 2149 "shape5mfepp.cc"
}



mfecovar shape5mfepp::addss_l_r(const mfecovar & x, const TUSubsequence & r)
{
#line 2229 "../../../ali_microstate.gap"
  mfecovar res = x;
  res.mfe = (res.mfe +  ( (ss_energy(r) / float(rows(r))) ) );
  return res;
#line 2160 "shape5mfepp.cc"
}

mfecovar shape5mfepp::bl_l_r(const TUSubsequence & lb, const TUSubsequence & lr, const mfecovar & x, const TUSubsequence & rb)
{
#line 2165 "../../../ali_microstate.gap"
  mfecovar res = x;
  res.mfe = (res.mfe +  ( (bl_energy(lr, rb) / float(rows(lb))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 2170 "shape5mfepp.cc"
}

mfecovar shape5mfepp::br_l_r(const TUSubsequence & lb, const mfecovar & x, const TUSubsequence & rr, const TUSubsequence & rb)
{
#line 2173 "../../../ali_microstate.gap"
  mfecovar res = x;
  res.mfe = (res.mfe +  ( (br_energy(lb, rr) / float(rows(lb))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 2180 "shape5mfepp.cc"
}

mfecovar shape5mfepp::cadd_l_r(const mfecovar & x, const mfecovar & y)
{
#line 2110 "../../../ali_microstate.gap"
  return  ( (x + y) ) ;
#line 2187 "shape5mfepp.cc"
}

mfecovar shape5mfepp::drem_l_r(const TUSubsequence & lb, const mfecovar & x, const TUSubsequence & rb)
{
#line 2142 "../../../ali_microstate.gap"
  mfecovar res = x;
  res.mfe = (res.mfe +  ( (termau_energy(lb, rb) / float(rows(lb))) ) );
  return res;
#line 2196 "shape5mfepp.cc"
}

mfecovar shape5mfepp::edl_l_r(const TUSubsequence & ldangle, const mfecovar & x, const TUSubsequence & rb)
{
#line 2113 "../../../ali_microstate.gap"
  mfecovar res = x;
  TUSubsequence lb = ldangle;
  lb.i = (ldangle.i + 1);
  res.mfe = (res.mfe +  ( ( ( (termau_energy(lb, rb) + dl_energy(lb, rb)) )  / float(rows(ldangle))) ) );
  return res;
#line 2207 "shape5mfepp.cc"
}

mfecovar shape5mfepp::edlr_l_r(const TUSubsequence & ldangle, const mfecovar & x, const TUSubsequence & rdangle)
{
#line 2131 "../../../ali_microstate.gap"
  mfecovar res = x;
  TUSubsequence lb = ldangle;
  lb.i = (ldangle.i + 1);
  TUSubsequence rb = rdangle;
  rb.j = (rdangle.j - 1);
  res.mfe = (res.mfe +  ( ( ( (termau_energy(lb, rb) + ext_mismatch_energy(lb, rb)) )  / float(rows(ldangle))) ) );
  return res;
#line 2220 "shape5mfepp.cc"
}

mfecovar shape5mfepp::edr_l_r(const TUSubsequence & lb, const mfecovar & x, const TUSubsequence & rdangle)
{
#line 2122 "../../../ali_microstate.gap"
  mfecovar res = x;
  TUSubsequence rb = rdangle;
  rb.j = (rdangle.j - 1);
  res.mfe = (res.mfe +  ( ( ( (termau_energy(lb, rb) + dr_energy(lb, rb)) )  / float(rows(lb))) ) );
  return res;
#line 2231 "shape5mfepp.cc"
}

mfecovar shape5mfepp::h_l_r(List_Ref<mfecovar> i)
{
  std::pair<List<mfecovar>::iterator, List<mfecovar>::iterator> range = get_range(i);
  return h_l_r(range);
}

template <typename Iterator>
mfecovar shape5mfepp::h_l_r(std::pair<Iterator, Iterator> i)

{
#line 2242 "../../../ali_microstate.gap"
  return minimum(i);
#line 2246 "shape5mfepp.cc"
}

mfecovar shape5mfepp::hl_l_r(const TUSubsequence & lb, const TUSubsequence & r, const TUSubsequence & rb)
{
#line 2157 "../../../ali_microstate.gap"
  mfecovar res;
  res.mfe =  ( (hl_energy(r) / float(rows(r))) ) ;
  res.covar = covscore(lb, lb.i, rb.i);
  return res;
#line 2256 "shape5mfepp.cc"
}

mfecovar shape5mfepp::il_l_r(const TUSubsequence & lb, const TUSubsequence & lr, const mfecovar & x, const TUSubsequence & rr, const TUSubsequence & rb)
{
#line 2181 "../../../ali_microstate.gap"
  mfecovar res = x;
  res.mfe = (res.mfe +  ( (il_energy(lr, rr) / float(rows(lr))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 2266 "shape5mfepp.cc"
}

mfecovar shape5mfepp::incl_l_r(const mfecovar & x)
{
#line 2222 "../../../ali_microstate.gap"
  mfecovar res = x;
  res.mfe = (res.mfe + ul_energy());
  return res;
#line 2275 "shape5mfepp.cc"
}

mfecovar shape5mfepp::ml_l_r(const TUSubsequence & lb, const mfecovar & x, const TUSubsequence & rb)
{
#line 2214 "../../../ali_microstate.gap"
  mfecovar res = x;
  res.mfe = (((res.mfe + ml_energy()) + ul_energy()) +  ( (termau_energy(lb, rb) / float(rows(lb))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 2285 "shape5mfepp.cc"
}

mfecovar shape5mfepp::mldl_l_r(const TUSubsequence & lb, const TUSubsequence & dl, const mfecovar & x, const TUSubsequence & rb)
{
#line 2190 "../../../ali_microstate.gap"
  mfecovar res = x;
  res.mfe = (((res.mfe + ml_energy()) + ul_energy()) +  ( ( ( (termau_energy(lb, rb) + dli_energy(lb, rb)) )  / float(rows(lb))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 2295 "shape5mfepp.cc"
}

mfecovar shape5mfepp::mldlr_l_r(const TUSubsequence & lb, const TUSubsequence & dl, const mfecovar & x, const TUSubsequence & dr, const TUSubsequence & rb)
{
#line 2206 "../../../ali_microstate.gap"
  mfecovar res = x;
  res.mfe = (((res.mfe + ml_energy()) + ul_energy()) +  ( ( ( (termau_energy(lb, rb) + ml_mismatch_energy(lb, rb)) )  / float(rows(lb))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 2305 "shape5mfepp.cc"
}

mfecovar shape5mfepp::mldr_l_r(const TUSubsequence & lb, const mfecovar & x, const TUSubsequence & dr, const TUSubsequence & rb)
{
#line 2198 "../../../ali_microstate.gap"
  mfecovar res = x;
  res.mfe = (((res.mfe + ml_energy()) + ul_energy()) +  ( ( ( (termau_energy(lb, rb) + dri_energy(lb, rb)) )  / float(rows(lb))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 2315 "shape5mfepp.cc"
}

mfecovar shape5mfepp::nil_l_r(const TUSubsequence & n)
{
#line 2236 "../../../ali_microstate.gap"
  mfecovar res;
  res.mfe = 0;
  res.covar = 0;
  return res;
#line 2325 "shape5mfepp.cc"
}

mfecovar shape5mfepp::sadd_l_r(const TUSubsequence & lb, const mfecovar & x)
{
#line 2097 "../../../ali_microstate.gap"
  mfecovar res = x;
  int sbase_sum = 0;
  for(  int k = 0; (k < int(rows(lb)));   k = (k + 1))
  {
    if ((column(seq_char(lb, lb.i), k) != GAP_BASE))
      {
        sbase_sum = (sbase_sum + sbase_energy());
      }

  }

  res.mfe = (res.mfe +  ( (sbase_sum / float(rows(lb))) ) );
  return res;
#line 2344 "shape5mfepp.cc"
}

mfecovar shape5mfepp::sr_l_r(const TUSubsequence & lb, const mfecovar & x, const TUSubsequence & rb)
{
#line 2149 "../../../ali_microstate.gap"
  mfecovar res = x;
  res.mfe = (res.mfe +  ( (sr_energy(lb, rb) / float(rows(lb))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 2354 "shape5mfepp.cc"
}



String shape5mfepp::addss_r(const String & e, const TUSubsequence & rb)
{
#line 184 "../../../ali_microstate.gap"
  String res;
  append( res, e);
  append( res, '.', size(rb));
  return res;
#line 2366 "shape5mfepp.cc"
}

String shape5mfepp::bl_r(const TUSubsequence & lb, const TUSubsequence & lregion, const String & e, const TUSubsequence & rb)
{
#line 120 "../../../ali_microstate.gap"
  String res;
  append( res, '(');
  append( res, '.', size(lregion));
  append( res, e);
  append( res, ')');
  return res;
#line 2378 "shape5mfepp.cc"
}

String shape5mfepp::br_r(const TUSubsequence & lb, const String & e, const TUSubsequence & rregion, const TUSubsequence & rb)
{
#line 129 "../../../ali_microstate.gap"
  String res;
  append( res, '(');
  append( res, e);
  append( res, '.', size(rregion));
  append( res, ')');
  return res;
#line 2390 "shape5mfepp.cc"
}

String shape5mfepp::cadd_r(const String & le, const String & re)
{
#line 65 "../../../ali_microstate.gap"
  String res;
  append( res, le);
  append( res, re);
  return res;
#line 2400 "shape5mfepp.cc"
}

String shape5mfepp::drem_r(const TUSubsequence & lloc, const String & e, const TUSubsequence & rloc)
{
#line 99 "../../../ali_microstate.gap"
  return e;
#line 2407 "shape5mfepp.cc"
}

String shape5mfepp::edl_r(const TUSubsequence & lb, const String & e, const TUSubsequence & loc)
{
#line 77 "../../../ali_microstate.gap"
  String res;
  append( res, '.');
  append( res, e);
  return res;
#line 2417 "shape5mfepp.cc"
}

String shape5mfepp::edlr_r(const TUSubsequence & lb, const String & e, const TUSubsequence & rb)
{
#line 91 "../../../ali_microstate.gap"
  String res;
  append( res, '.');
  append( res, e);
  append( res, '.');
  return res;
#line 2428 "shape5mfepp.cc"
}

String shape5mfepp::edr_r(const TUSubsequence & loc, const String & e, const TUSubsequence & rb)
{
#line 84 "../../../ali_microstate.gap"
  String res;
  append( res, e);
  append( res, '.');
  return res;
#line 2438 "shape5mfepp.cc"
}

List_Ref<String> shape5mfepp::h_r(List_Ref<String> i)
{
#line 196 "../../../ali_microstate.gap"
  return i;
#line 2445 "shape5mfepp.cc"
}

String shape5mfepp::hl_r(const TUSubsequence & lb, const TUSubsequence & region, const TUSubsequence & rb)
{
#line 111 "../../../ali_microstate.gap"
  String res;
  append( res, '(');
  append( res, '.', size(region));
  append( res, ')');
  return res;
#line 2456 "shape5mfepp.cc"
}

String shape5mfepp::il_r(const TUSubsequence & lb, const TUSubsequence & lregion, const String & e, const TUSubsequence & rregion, const TUSubsequence & rb)
{
#line 138 "../../../ali_microstate.gap"
  String res;
  append( res, '(');
  append( res, '.', size(lregion));
  append( res, e);
  append( res, '.', size(rregion));
  append( res, ')');
  return res;
#line 2469 "shape5mfepp.cc"
}

String shape5mfepp::incl_r(const String & e)
{
#line 191 "../../../ali_microstate.gap"
  return e;
#line 2476 "shape5mfepp.cc"
}

String shape5mfepp::ml_r(const TUSubsequence & lb, const String & e, const TUSubsequence & rb)
{
#line 148 "../../../ali_microstate.gap"
  String res;
  append( res, '(');
  append( res, e);
  append( res, ')');
  return res;
#line 2487 "shape5mfepp.cc"
}

String shape5mfepp::mldl_r(const TUSubsequence & lb, const TUSubsequence & dl, const String & e, const TUSubsequence & rb)
{
#line 175 "../../../ali_microstate.gap"
  String res;
  append( res, '(');
  append( res, '.');
  append( res, e);
  append( res, ')');
  return res;
#line 2499 "shape5mfepp.cc"
}

String shape5mfepp::mldlr_r(const TUSubsequence & lb, const TUSubsequence & dl, const String & e, const TUSubsequence & dr, const TUSubsequence & rb)
{
#line 165 "../../../ali_microstate.gap"
  String res;
  append( res, '(');
  append( res, '.');
  append( res, e);
  append( res, '.');
  append( res, ')');
  return res;
#line 2512 "shape5mfepp.cc"
}

String shape5mfepp::mldr_r(const TUSubsequence & lb, const String & e, const TUSubsequence & dr, const TUSubsequence & rb)
{
#line 156 "../../../ali_microstate.gap"
  String res;
  append( res, '(');
  append( res, e);
  append( res, '.');
  append( res, ')');
  return res;
#line 2524 "shape5mfepp.cc"
}

String shape5mfepp::nil_r(const TUSubsequence & loc)
{
#line 72 "../../../ali_microstate.gap"
  String r;
  return r;
#line 2532 "shape5mfepp.cc"
}

String shape5mfepp::sadd_r(const TUSubsequence & lb, const String & e)
{
#line 58 "../../../ali_microstate.gap"
  String res;
  append( res, '.');
  append( res, e);
  return res;
#line 2542 "shape5mfepp.cc"
}

String shape5mfepp::sr_r(const TUSubsequence & lb, const String & e, const TUSubsequence & rb)
{
#line 103 "../../../ali_microstate.gap"
  String res;
  append( res, '(');
  append( res, e);
  append( res, ')');
  return res;
#line 2553 "shape5mfepp.cc"
}


    void shape5mfepp::cyk()
{

}



#ident "$Id: Compiled with gapc bellmansgapc-2020.01.08 $"

