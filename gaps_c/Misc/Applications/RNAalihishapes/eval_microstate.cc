
// A dynamic programming evaluator generated by GAP-C.
// 
//   GAP-C version:
//     bellmansgapc-2013.05.02
// 
//   GAP-C call:
//     /home/jhuang/local/gapc/bin/gapc -I ../../../ -p alg_ali_mfe * alg_ali_dotBracket_id ../../../eval_ali_microstate.gap -o eval_microstate.cc 
// 
// 


#define GAPC_MOD_TRANSLATION_UNIT
#include "eval_microstate.hh"

#include <rtlib/subopt.hh>
#include "rna.hh"
#include "Extensions/evalfold.hh"
#include "Extensions/alignment.hh"
#include "Extensions/typesRNAfolding.hh"
#include "Extensions/shapes.hh"

#include "Extensions/rnaoptions.hh"

List_Ref<std::pair<mfecovar, String> > &  eval_microstate::nt_dangle(unsigned int t_0_i, unsigned int t_0_j)
{
  if (dangle_table.is_tabulated(t_0_i, t_0_j))
    {
      return dangle_table.get(t_0_i, t_0_j);
    }

  List_Ref<std::pair<mfecovar, String> > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 6))
  {
    TUSubsequence ret_3 = LOC(t_0_seq, t_0_j, t_0_j);
    TUSubsequence a_2 = ret_3;
    if (is_not_empty(a_2))
    {
      TUSubsequence ret_1;
      if (unpaired(t_0_seq, t_0_i, (t_0_i + 1)))
        {
          ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
        }

      else
        {
          empty( ret_1);
        }

      TUSubsequence a_0 = ret_1;
      if (is_not_empty(a_0))
      {
        List_Ref<std::pair<mfecovar, String> > ret_2 = nt_strong((t_0_i + 1), t_0_j);
        List_Ref<std::pair<mfecovar, String> > a_1 = ret_2;
        if (is_not_empty(a_1))
          {
            for (List_Ref<std::pair<mfecovar, String> >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
              std::pair<mfecovar, String>  x_1 = *x_1_itr;
              std::pair<mfecovar, String>  ans = edl(a_0, x_1, a_2);
              push_back_min_other( answers, ans);
            }
          }

        erase( a_1);
      }

      erase( a_0);
    }

    erase( a_2);
  }


  if (((t_0_j - t_0_i) >= 6))
  {
    TUSubsequence ret_7;
    if (unpaired(t_0_seq, (t_0_j - 1), t_0_j))
      {
        ret_7 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
      }

    else
      {
        empty( ret_7);
      }

    TUSubsequence a_5 = ret_7;
    if (is_not_empty(a_5))
    {
      TUSubsequence ret_5 = LOC(t_0_seq, t_0_i, t_0_i);
      TUSubsequence a_3 = ret_5;
      if (is_not_empty(a_3))
      {
        List_Ref<std::pair<mfecovar, String> > ret_6 = nt_strong(t_0_i, (t_0_j - 1));
        List_Ref<std::pair<mfecovar, String> > a_4 = ret_6;
        if (is_not_empty(a_4))
          {
            for (List_Ref<std::pair<mfecovar, String> >::iterator x_4_itr = a_4.ref().begin(); x_4_itr!=a_4.ref().end(); ++x_4_itr){
              std::pair<mfecovar, String>  x_4 = *x_4_itr;
              std::pair<mfecovar, String>  ans = edr(a_3, x_4, a_5);
              push_back_min_other( answers, ans);
            }
          }

        erase( a_4);
      }

      erase( a_3);
    }

    erase( a_5);
  }


  if (((t_0_j - t_0_i) >= 7))
  {
    TUSubsequence ret_11;
    if (unpaired(t_0_seq, (t_0_j - 1), t_0_j))
      {
        ret_11 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
      }

    else
      {
        empty( ret_11);
      }

    TUSubsequence a_8 = ret_11;
    if (is_not_empty(a_8))
    {
      TUSubsequence ret_9;
      if (unpaired(t_0_seq, t_0_i, (t_0_i + 1)))
        {
          ret_9 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
        }

      else
        {
          empty( ret_9);
        }

      TUSubsequence a_6 = ret_9;
      if (is_not_empty(a_6))
      {
        List_Ref<std::pair<mfecovar, String> > ret_10 = nt_strong((t_0_i + 1), (t_0_j - 1));
        List_Ref<std::pair<mfecovar, String> > a_7 = ret_10;
        if (is_not_empty(a_7))
          {
            for (List_Ref<std::pair<mfecovar, String> >::iterator x_7_itr = a_7.ref().begin(); x_7_itr!=a_7.ref().end(); ++x_7_itr){
              std::pair<mfecovar, String>  x_7 = *x_7_itr;
              std::pair<mfecovar, String>  ans = edlr(a_6, x_7, a_8);
              push_back_min_other( answers, ans);
            }
          }

        erase( a_7);
      }

      erase( a_6);
    }

    erase( a_8);
  }


  if (((t_0_j - t_0_i) >= 5))
  {
    TUSubsequence ret_15 = LOC(t_0_seq, t_0_j, t_0_j);
    TUSubsequence a_11 = ret_15;
    if (is_not_empty(a_11))
    {
      TUSubsequence ret_13 = LOC(t_0_seq, t_0_i, t_0_i);
      TUSubsequence a_9 = ret_13;
      if (is_not_empty(a_9))
      {
        List_Ref<std::pair<mfecovar, String> > ret_14 = nt_strong(t_0_i, t_0_j);
        List_Ref<std::pair<mfecovar, String> > a_10 = ret_14;
        if (is_not_empty(a_10))
          {
            for (List_Ref<std::pair<mfecovar, String> >::iterator x_10_itr = a_10.ref().begin(); x_10_itr!=a_10.ref().end(); ++x_10_itr){
              std::pair<mfecovar, String>  x_10 = *x_10_itr;
              std::pair<mfecovar, String>  ans = drem(a_9, x_10, a_11);
              push_back_min_other( answers, ans);
            }
          }

        erase( a_10);
      }

      erase( a_9);
    }

    erase( a_11);
  }

  List_Ref<std::pair<mfecovar, String> > eval = h(answers);
  erase( answers);
  dangle_table.set( t_0_i, t_0_j, eval);
  return dangle_table.get(t_0_i, t_0_j);
}

std::pair<mfecovar, String>  eval_microstate::nt_hairpin(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 5))
    {
      return Bmfecovar_firstG_string_secondG_E_zero;
    }

  std::pair<mfecovar, String>  answers;
  empty( answers);
  std::pair<mfecovar, String>  ret_0;
  if (((t_0_j - t_0_i) >= 5))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_3 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_2 = ret_3;
        if (is_not_empty(a_2))
        {
          TUSubsequence ret_2;
          if ((minsize(t_0_seq, (t_0_i + 1), (t_0_j - 1), 3) && unpaired(t_0_seq, (t_0_i + 1), (t_0_j - 1))))
            {
              ret_2 = REGION(t_0_seq, (t_0_i + 1), (t_0_j - 1));
            }

          else
            {
              empty( ret_2);
            }

          TUSubsequence a_1 = ret_2;
          if (is_not_empty(a_1))
          {
            TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
            TUSubsequence a_0 = ret_1;
            if (is_not_empty(a_0))
              {
                ret_0 = hl(a_0, a_1, a_2);
              }

            else
              {
                empty( ret_0);
              }

            erase( a_0);
          }

          else
            {
              empty( ret_0);
            }

          erase( a_1);
        }

        else
          {
            empty( ret_0);
          }

        erase( a_2);
      }

      else
      {
        empty( ret_0);
        empty( ret_0);
      }

    }

  else
    {
      empty( ret_0);
    }

  answers = ret_0;
  return answers;
}

List_Ref<std::pair<mfecovar, String> > &  eval_microstate::nt_iloop(unsigned int t_0_i, unsigned int t_0_j)
{
  if (iloop_table.is_tabulated(t_0_i, t_0_j))
    {
      return iloop_table.get(t_0_i, t_0_j);
    }

  List_Ref<std::pair<mfecovar, String> > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 9))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
        {
          for(          unsigned int t_0_k_0 = (t_0_i + 2); ((t_0_k_0 <= (t_0_j - 7)) && (t_0_k_0 <= (t_0_i + 31))); ++t_0_k_0)
          {
            for(            unsigned int t_0_k_1 = (((t_0_j - (t_0_k_0 + 5)) >= 31)) ? ((t_0_j - 31)) : ((t_0_k_0 + 5)); (t_0_k_1 <= (t_0_j - 2)); ++t_0_k_1)
            {
              TUSubsequence ret_5 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
              TUSubsequence a_4 = ret_5;
              if (is_not_empty(a_4))
              {
                TUSubsequence ret_4;
                if ((maxsize(t_0_seq, t_0_k_1, (t_0_j - 1), 30) && unpaired(t_0_seq, t_0_k_1, (t_0_j - 1))))
                  {
                    ret_4 = REGION(t_0_seq, t_0_k_1, (t_0_j - 1));
                  }

                else
                  {
                    empty( ret_4);
                  }

                TUSubsequence a_3 = ret_4;
                if (is_not_empty(a_3))
                {
                  TUSubsequence ret_2;
                  if ((maxsize(t_0_seq, (t_0_i + 1), t_0_k_0, 30) && unpaired(t_0_seq, (t_0_i + 1), t_0_k_0)))
                    {
                      ret_2 = REGION(t_0_seq, (t_0_i + 1), t_0_k_0);
                    }

                  else
                    {
                      empty( ret_2);
                    }

                  TUSubsequence a_1 = ret_2;
                  if (is_not_empty(a_1))
                  {
                    TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                    TUSubsequence a_0 = ret_1;
                    if (is_not_empty(a_0))
                    {
                      List_Ref<std::pair<mfecovar, String> > ret_3 = nt_strong(t_0_k_0, t_0_k_1);
                      List_Ref<std::pair<mfecovar, String> > a_2 = ret_3;
                      if (is_not_empty(a_2))
                        {
                          for (List_Ref<std::pair<mfecovar, String> >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                            std::pair<mfecovar, String>  x_2 = *x_2_itr;
                            std::pair<mfecovar, String>  ans = il(a_0, a_1, x_2, a_3, a_4);
                            push_back_min_other( answers, ans);
                          }
                        }

                      erase( a_2);
                    }

                    erase( a_0);
                  }

                  erase( a_1);
                }

                erase( a_3);
              }

              erase( a_4);
            }

          }

        }

      else
        {
          empty( answers);
        }

    }

  List_Ref<std::pair<mfecovar, String> > eval = h(answers);
  erase( answers);
  iloop_table.set( t_0_i, t_0_j, eval);
  return iloop_table.get(t_0_i, t_0_j);
}

List_Ref<std::pair<mfecovar, String> > eval_microstate::nt_leftB(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 8))
    {
      return LBmfecovar_firstG_string_secondG_EM_zero;
    }

  List_Ref<std::pair<mfecovar, String> > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 8))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
        {
          for(          unsigned int t_0_k_0 = (t_0_i + 2); ((t_0_k_0 <= (t_0_j - 6)) && (t_0_k_0 <= (t_0_i + 31))); ++t_0_k_0)
          {
            TUSubsequence ret_4 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
            TUSubsequence a_3 = ret_4;
            if (is_not_empty(a_3))
            {
              TUSubsequence ret_2;
              if ((maxsize(t_0_seq, (t_0_i + 1), t_0_k_0, 30) && unpaired(t_0_seq, (t_0_i + 1), t_0_k_0)))
                {
                  ret_2 = REGION(t_0_seq, (t_0_i + 1), t_0_k_0);
                }

              else
                {
                  empty( ret_2);
                }

              TUSubsequence a_1 = ret_2;
              if (is_not_empty(a_1))
              {
                TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                TUSubsequence a_0 = ret_1;
                if (is_not_empty(a_0))
                {
                  List_Ref<std::pair<mfecovar, String> > ret_3 = nt_strong(t_0_k_0, (t_0_j - 1));
                  List_Ref<std::pair<mfecovar, String> > a_2 = ret_3;
                  if (is_not_empty(a_2))
                    {
                      for (List_Ref<std::pair<mfecovar, String> >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                        std::pair<mfecovar, String>  x_2 = *x_2_itr;
                        std::pair<mfecovar, String>  ans = bl(a_0, a_1, x_2, a_3);
                        push_back_min_other( answers, ans);
                      }
                    }

                  erase( a_2);
                }

                erase( a_0);
              }

              erase( a_1);
            }

            erase( a_3);
          }

        }

      else
        {
          empty( answers);
        }

    }

  List_Ref<std::pair<mfecovar, String> > eval = h(answers);
  erase( answers);
  return eval;
}

List_Ref<std::pair<mfecovar, String> > &  eval_microstate::nt_ml_comps(unsigned int t_0_i, unsigned int t_0_j)
{
  if (ml_comps_table.is_tabulated(t_0_i, t_0_j))
    {
      return ml_comps_table.get(t_0_i, t_0_j);
    }

  List_Ref<std::pair<mfecovar, String> > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 11))
  {
    TUSubsequence ret_1;
    if (unpaired(t_0_seq, t_0_i, (t_0_i + 1)))
      {
        ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
      }

    else
      {
        empty( ret_1);
      }

    TUSubsequence a_0 = ret_1;
    if (is_not_empty(a_0))
    {
      List_Ref<std::pair<mfecovar, String> > ret_2 = nt_ml_comps((t_0_i + 1), t_0_j);
      List_Ref<std::pair<mfecovar, String> > a_1 = ret_2;
      if (is_not_empty(a_1))
        {
          for (List_Ref<std::pair<mfecovar, String> >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
            std::pair<mfecovar, String>  x_1 = *x_1_itr;
            std::pair<mfecovar, String>  ans = sadd(a_0, x_1);
            push_back_min_other( answers, ans);
          }
        }

      erase( a_1);
    }

    erase( a_0);
  }


  if (((t_0_j - t_0_i) >= 10))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 5); (t_0_k_0 <= (t_0_j - 5)); ++t_0_k_0)
      {
        List_Ref<std::pair<mfecovar, String> > ret_6 = nt_ml_comps1(t_0_k_0, t_0_j);
        List_Ref<std::pair<mfecovar, String> > a_4 = ret_6;
        if (is_not_empty(a_4))
        {
          List_Ref<std::pair<mfecovar, String> > ret_4;
          empty(ret_4);
          if (((t_0_k_0 - t_0_i) >= 5))
          {
            List_Ref<std::pair<mfecovar, String> > ret_5 = nt_dangle(t_0_i, t_0_k_0);
            List_Ref<std::pair<mfecovar, String> > a_3 = ret_5;
            if (is_not_empty(a_3))
              {
                for (List_Ref<std::pair<mfecovar, String> >::iterator x_3_itr = a_3.ref().begin(); x_3_itr!=a_3.ref().end(); ++x_3_itr){
                  std::pair<mfecovar, String>  x_3 = *x_3_itr;
                  std::pair<mfecovar, String>  ans = incl(x_3);
                  push_back_min_other( ret_4, ans);
                }
              }

            erase( a_3);
          }

          finalize( ret_4);
          List_Ref<std::pair<mfecovar, String> > a_2 = ret_4;
          if (is_not_empty(a_2))
            {
              for (List_Ref<std::pair<mfecovar, String> >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                std::pair<mfecovar, String>  x_2 = *x_2_itr;
                for (List_Ref<std::pair<mfecovar, String> >::iterator x_4_itr = a_4.ref().begin(); x_4_itr!=a_4.ref().end(); ++x_4_itr){
                  std::pair<mfecovar, String>  x_4 = *x_4_itr;
                  std::pair<mfecovar, String>  ans = cadd(x_2, x_4);
                  push_back_min_other( answers, ans);
                }
              }
            }

          erase( a_2);
        }

        erase( a_4);
      }

    }

  List_Ref<std::pair<mfecovar, String> > eval = h(answers);
  erase( answers);
  ml_comps_table.set( t_0_i, t_0_j, eval);
  return ml_comps_table.get(t_0_i, t_0_j);
}

List_Ref<std::pair<mfecovar, String> > &  eval_microstate::nt_ml_comps1(unsigned int t_0_i, unsigned int t_0_j)
{
  if (ml_comps1_table.is_tabulated(t_0_i, t_0_j))
    {
      return ml_comps1_table.get(t_0_i, t_0_j);
    }

  List_Ref<std::pair<mfecovar, String> > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 6))
  {
    TUSubsequence ret_1;
    if (unpaired(t_0_seq, t_0_i, (t_0_i + 1)))
      {
        ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
      }

    else
      {
        empty( ret_1);
      }

    TUSubsequence a_0 = ret_1;
    if (is_not_empty(a_0))
    {
      List_Ref<std::pair<mfecovar, String> > ret_2 = nt_ml_comps1((t_0_i + 1), t_0_j);
      List_Ref<std::pair<mfecovar, String> > a_1 = ret_2;
      if (is_not_empty(a_1))
        {
          for (List_Ref<std::pair<mfecovar, String> >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
            std::pair<mfecovar, String>  x_1 = *x_1_itr;
            std::pair<mfecovar, String>  ans = sadd(a_0, x_1);
            push_back_min_other( answers, ans);
          }
        }

      erase( a_1);
    }

    erase( a_0);
  }


  if (((t_0_j - t_0_i) >= 10))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 5); (t_0_k_0 <= (t_0_j - 5)); ++t_0_k_0)
      {
        List_Ref<std::pair<mfecovar, String> > ret_6 = nt_ml_comps1(t_0_k_0, t_0_j);
        List_Ref<std::pair<mfecovar, String> > a_4 = ret_6;
        if (is_not_empty(a_4))
        {
          List_Ref<std::pair<mfecovar, String> > ret_4;
          empty(ret_4);
          if (((t_0_k_0 - t_0_i) >= 5))
          {
            List_Ref<std::pair<mfecovar, String> > ret_5 = nt_dangle(t_0_i, t_0_k_0);
            List_Ref<std::pair<mfecovar, String> > a_3 = ret_5;
            if (is_not_empty(a_3))
              {
                for (List_Ref<std::pair<mfecovar, String> >::iterator x_3_itr = a_3.ref().begin(); x_3_itr!=a_3.ref().end(); ++x_3_itr){
                  std::pair<mfecovar, String>  x_3 = *x_3_itr;
                  std::pair<mfecovar, String>  ans = incl(x_3);
                  push_back_min_other( ret_4, ans);
                }
              }

            erase( a_3);
          }

          finalize( ret_4);
          List_Ref<std::pair<mfecovar, String> > a_2 = ret_4;
          if (is_not_empty(a_2))
            {
              for (List_Ref<std::pair<mfecovar, String> >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                std::pair<mfecovar, String>  x_2 = *x_2_itr;
                for (List_Ref<std::pair<mfecovar, String> >::iterator x_4_itr = a_4.ref().begin(); x_4_itr!=a_4.ref().end(); ++x_4_itr){
                  std::pair<mfecovar, String>  x_4 = *x_4_itr;
                  std::pair<mfecovar, String>  ans = cadd(x_2, x_4);
                  push_back_min_other( answers, ans);
                }
              }
            }

          erase( a_2);
        }

        erase( a_4);
      }

    }


  if (((t_0_j - t_0_i) >= 5))
  {
    List_Ref<std::pair<mfecovar, String> > ret_8 = nt_dangle(t_0_i, t_0_j);
    List_Ref<std::pair<mfecovar, String> > a_5 = ret_8;
    if (is_not_empty(a_5))
      {
        for (List_Ref<std::pair<mfecovar, String> >::iterator x_5_itr = a_5.ref().begin(); x_5_itr!=a_5.ref().end(); ++x_5_itr){
          std::pair<mfecovar, String>  x_5 = *x_5_itr;
          std::pair<mfecovar, String>  ans = incl(x_5);
          push_back_min_other( answers, ans);
        }
      }

    erase( a_5);
  }


  if (((t_0_j - t_0_i) >= 6))
    {
      for(      unsigned int t_0_k_1 = (t_0_i + 5); (t_0_k_1 <= (t_0_j - 1)); ++t_0_k_1)
      {
        TUSubsequence ret_12;
        if (unpaired(t_0_seq, t_0_k_1, t_0_j))
          {
            ret_12 = REGION(t_0_seq, t_0_k_1, t_0_j);
          }

        else
          {
            empty( ret_12);
          }

        TUSubsequence a_8 = ret_12;
        if (is_not_empty(a_8))
        {
          List_Ref<std::pair<mfecovar, String> > ret_10;
          empty(ret_10);
          if (((t_0_k_1 - t_0_i) >= 5))
          {
            List_Ref<std::pair<mfecovar, String> > ret_11 = nt_dangle(t_0_i, t_0_k_1);
            List_Ref<std::pair<mfecovar, String> > a_7 = ret_11;
            if (is_not_empty(a_7))
              {
                for (List_Ref<std::pair<mfecovar, String> >::iterator x_7_itr = a_7.ref().begin(); x_7_itr!=a_7.ref().end(); ++x_7_itr){
                  std::pair<mfecovar, String>  x_7 = *x_7_itr;
                  std::pair<mfecovar, String>  ans = incl(x_7);
                  push_back_min_other( ret_10, ans);
                }
              }

            erase( a_7);
          }

          finalize( ret_10);
          List_Ref<std::pair<mfecovar, String> > a_6 = ret_10;
          if (is_not_empty(a_6))
            {
              for (List_Ref<std::pair<mfecovar, String> >::iterator x_6_itr = a_6.ref().begin(); x_6_itr!=a_6.ref().end(); ++x_6_itr){
                std::pair<mfecovar, String>  x_6 = *x_6_itr;
                std::pair<mfecovar, String>  ans = addss(x_6, a_8);
                push_back_min_other( answers, ans);
              }
            }

          erase( a_6);
        }

        erase( a_8);
      }

    }

  List_Ref<std::pair<mfecovar, String> > eval = h(answers);
  erase( answers);
  ml_comps1_table.set( t_0_i, t_0_j, eval);
  return ml_comps1_table.get(t_0_i, t_0_j);
}

List_Ref<std::pair<mfecovar, String> > eval_microstate::nt_multiloop(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 12))
    {
      return LBmfecovar_firstG_string_secondG_EM_zero;
    }

  List_Ref<std::pair<mfecovar, String> > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 12))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_3 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_2 = ret_3;
        if (is_not_empty(a_2))
        {
          TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
          TUSubsequence a_0 = ret_1;
          if (is_not_empty(a_0))
          {
            List_Ref<std::pair<mfecovar, String> > ret_2 = nt_ml_comps((t_0_i + 1), (t_0_j - 1));
            List_Ref<std::pair<mfecovar, String> > a_1 = ret_2;
            if (is_not_empty(a_1))
              {
                for (List_Ref<std::pair<mfecovar, String> >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                  std::pair<mfecovar, String>  x_1 = *x_1_itr;
                  std::pair<mfecovar, String>  ans = ml(a_0, x_1, a_2);
                  push_back_min_other( answers, ans);
                }
              }

            erase( a_1);
          }

          erase( a_0);
        }

        erase( a_2);
      }

      else
        {
          empty( answers);
        }

    }


  if (((t_0_j - t_0_i) >= 13))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_8 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_6 = ret_8;
        if (is_not_empty(a_6))
        {
          TUSubsequence ret_6;
          if (unpaired(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1)))
            {
              ret_6 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
            }

          else
            {
              empty( ret_6);
            }

          TUSubsequence a_4 = ret_6;
          if (is_not_empty(a_4))
          {
            TUSubsequence ret_5 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
            TUSubsequence a_3 = ret_5;
            if (is_not_empty(a_3))
            {
              List_Ref<std::pair<mfecovar, String> > ret_7 = nt_ml_comps((t_0_i + 2), (t_0_j - 1));
              List_Ref<std::pair<mfecovar, String> > a_5 = ret_7;
              if (is_not_empty(a_5))
                {
                  for (List_Ref<std::pair<mfecovar, String> >::iterator x_5_itr = a_5.ref().begin(); x_5_itr!=a_5.ref().end(); ++x_5_itr){
                    std::pair<mfecovar, String>  x_5 = *x_5_itr;
                    std::pair<mfecovar, String>  ans = mldl(a_3, a_4, x_5, a_6);
                    push_back_min_other( answers, ans);
                  }
                }

              erase( a_5);
            }

            erase( a_3);
          }

          erase( a_4);
        }

        erase( a_6);
      }

      else
        {
          empty( answers);
        }

    }


  if (((t_0_j - t_0_i) >= 13))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_13 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_10 = ret_13;
        if (is_not_empty(a_10))
        {
          TUSubsequence ret_12;
          if (unpaired(t_0_seq, (t_0_j - 2), (t_0_j - 1)))
            {
              ret_12 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
            }

          else
            {
              empty( ret_12);
            }

          TUSubsequence a_9 = ret_12;
          if (is_not_empty(a_9))
          {
            TUSubsequence ret_10 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
            TUSubsequence a_7 = ret_10;
            if (is_not_empty(a_7))
            {
              List_Ref<std::pair<mfecovar, String> > ret_11 = nt_ml_comps((t_0_i + 1), (t_0_j - 2));
              List_Ref<std::pair<mfecovar, String> > a_8 = ret_11;
              if (is_not_empty(a_8))
                {
                  for (List_Ref<std::pair<mfecovar, String> >::iterator x_8_itr = a_8.ref().begin(); x_8_itr!=a_8.ref().end(); ++x_8_itr){
                    std::pair<mfecovar, String>  x_8 = *x_8_itr;
                    std::pair<mfecovar, String>  ans = mldr(a_7, x_8, a_9, a_10);
                    push_back_min_other( answers, ans);
                  }
                }

              erase( a_8);
            }

            erase( a_7);
          }

          erase( a_9);
        }

        erase( a_10);
      }

      else
        {
          empty( answers);
        }

    }


  if (((t_0_j - t_0_i) >= 14))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_19 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_15 = ret_19;
        if (is_not_empty(a_15))
        {
          TUSubsequence ret_18;
          if (unpaired(t_0_seq, (t_0_j - 2), (t_0_j - 1)))
            {
              ret_18 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
            }

          else
            {
              empty( ret_18);
            }

          TUSubsequence a_14 = ret_18;
          if (is_not_empty(a_14))
          {
            TUSubsequence ret_16;
            if (unpaired(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1)))
              {
                ret_16 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
              }

            else
              {
                empty( ret_16);
              }

            TUSubsequence a_12 = ret_16;
            if (is_not_empty(a_12))
            {
              TUSubsequence ret_15 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
              TUSubsequence a_11 = ret_15;
              if (is_not_empty(a_11))
              {
                List_Ref<std::pair<mfecovar, String> > ret_17 = nt_ml_comps((t_0_i + 2), (t_0_j - 2));
                List_Ref<std::pair<mfecovar, String> > a_13 = ret_17;
                if (is_not_empty(a_13))
                  {
                    for (List_Ref<std::pair<mfecovar, String> >::iterator x_13_itr = a_13.ref().begin(); x_13_itr!=a_13.ref().end(); ++x_13_itr){
                      std::pair<mfecovar, String>  x_13 = *x_13_itr;
                      std::pair<mfecovar, String>  ans = mldlr(a_11, a_12, x_13, a_14, a_15);
                      push_back_min_other( answers, ans);
                    }
                  }

                erase( a_13);
              }

              erase( a_11);
            }

            erase( a_12);
          }

          erase( a_14);
        }

        erase( a_15);
      }

      else
        {
          empty( answers);
        }

    }

  List_Ref<std::pair<mfecovar, String> > eval = h(answers);
  erase( answers);
  return eval;
}

List_Ref<std::pair<mfecovar, String> > eval_microstate::nt_rightB(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 8))
    {
      return LBmfecovar_firstG_string_secondG_EM_zero;
    }

  List_Ref<std::pair<mfecovar, String> > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 8))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
        {
          for(          unsigned int t_0_k_0 = (((t_0_j - (t_0_i + 6)) >= 31)) ? ((t_0_j - 31)) : ((t_0_i + 6)); (t_0_k_0 <= (t_0_j - 2)); ++t_0_k_0)
          {
            TUSubsequence ret_4 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
            TUSubsequence a_3 = ret_4;
            if (is_not_empty(a_3))
            {
              TUSubsequence ret_3;
              if ((maxsize(t_0_seq, t_0_k_0, (t_0_j - 1), 30) && unpaired(t_0_seq, t_0_k_0, (t_0_j - 1))))
                {
                  ret_3 = REGION(t_0_seq, t_0_k_0, (t_0_j - 1));
                }

              else
                {
                  empty( ret_3);
                }

              TUSubsequence a_2 = ret_3;
              if (is_not_empty(a_2))
              {
                TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                TUSubsequence a_0 = ret_1;
                if (is_not_empty(a_0))
                {
                  List_Ref<std::pair<mfecovar, String> > ret_2 = nt_strong((t_0_i + 1), t_0_k_0);
                  List_Ref<std::pair<mfecovar, String> > a_1 = ret_2;
                  if (is_not_empty(a_1))
                    {
                      for (List_Ref<std::pair<mfecovar, String> >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                        std::pair<mfecovar, String>  x_1 = *x_1_itr;
                        std::pair<mfecovar, String>  ans = br(a_0, x_1, a_2, a_3);
                        push_back_min_other( answers, ans);
                      }
                    }

                  erase( a_1);
                }

                erase( a_0);
              }

              erase( a_2);
            }

            erase( a_3);
          }

        }

      else
        {
          empty( answers);
        }

    }

  List_Ref<std::pair<mfecovar, String> > eval = h(answers);
  erase( answers);
  return eval;
}

List_Ref<std::pair<mfecovar, String> > eval_microstate::nt_stack(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 7))
    {
      return LBmfecovar_firstG_string_secondG_EM_zero;
    }

  List_Ref<std::pair<mfecovar, String> > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 7))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_3 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_2 = ret_3;
        if (is_not_empty(a_2))
        {
          TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
          TUSubsequence a_0 = ret_1;
          if (is_not_empty(a_0))
          {
            List_Ref<std::pair<mfecovar, String> > ret_2 = nt_weak((t_0_i + 1), (t_0_j - 1));
            List_Ref<std::pair<mfecovar, String> > a_1 = ret_2;
            if (is_not_empty(a_1))
              {
                for (List_Ref<std::pair<mfecovar, String> >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                  std::pair<mfecovar, String>  x_1 = *x_1_itr;
                  std::pair<mfecovar, String>  ans = sr(a_0, x_1, a_2);
                  push_back_min_other( answers, ans);
                }
              }

            erase( a_1);
          }

          erase( a_0);
        }

        erase( a_2);
      }

      else
        {
          empty( answers);
        }

    }

  List_Ref<std::pair<mfecovar, String> > eval = h(answers);
  erase( answers);
  return eval;
}

List_Ref<std::pair<mfecovar, String> > &  eval_microstate::nt_strong(unsigned int t_0_i, unsigned int t_0_j)
{
  if (strong_table.is_tabulated(t_0_i, t_0_j))
    {
      return strong_table.get(t_0_i, t_0_j);
    }

  List_Ref<std::pair<mfecovar, String> > answers;
  empty(answers);
  empty( answers);


  if (allowLonelyBasepairs(t_0_seq, t_0_i, t_0_j, false))
  {
    List_Ref<std::pair<mfecovar, String> > ret_1;
    empty(ret_1);
    if (((t_0_j - t_0_i) >= 7))
      {
        if (basepair(t_0_seq, t_0_i, t_0_j))
        {
          TUSubsequence ret_4 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
          TUSubsequence a_2 = ret_4;
          if (is_not_empty(a_2))
          {
            TUSubsequence ret_2 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
            TUSubsequence a_0 = ret_2;
            if (is_not_empty(a_0))
            {
              List_Ref<std::pair<mfecovar, String> > ret_3 = nt_weak((t_0_i + 1), (t_0_j - 1));
              List_Ref<std::pair<mfecovar, String> > a_1 = ret_3;
              if (is_not_empty(a_1))
                {
                  for (List_Ref<std::pair<mfecovar, String> >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                    std::pair<mfecovar, String>  x_1 = *x_1_itr;
                    std::pair<mfecovar, String>  ans = sr(a_0, x_1, a_2);
                    push_back_min_other( ret_1, ans);
                  }
                }

              erase( a_1);
            }

            erase( a_0);
          }

          erase( a_2);
        }

        else
          {
            empty( ret_1);
          }

      }

    finalize( ret_1);
    append_min_other( answers, ret_1);
  }



  if (allowLonelyBasepairs(t_0_seq, t_0_i, t_0_j, true))
  {
    List_Ref<std::pair<mfecovar, String> > ret_6 = nt_weak(t_0_i, t_0_j);
    append_min_other( answers, ret_6);
  }

  List_Ref<std::pair<mfecovar, String> > eval = h(answers);
  erase( answers);
  strong_table.set( t_0_i, t_0_j, eval);
  return strong_table.get(t_0_i, t_0_j);
}

List_Ref<std::pair<mfecovar, String> > &  eval_microstate::nt_struct(unsigned int t_0_i)
{
  if (struct_table.is_tabulated(t_0_i))
    {
      return struct_table.get(t_0_i);
    }

  List_Ref<std::pair<mfecovar, String> > answers;
  empty(answers);
  empty( answers);

  if (((t_0_right_most - t_0_i) >= 1))
  {
    TUSubsequence ret_1;
    if (unpaired(t_0_seq, t_0_i, (t_0_i + 1)))
      {
        ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
      }

    else
      {
        empty( ret_1);
      }

    TUSubsequence a_0 = ret_1;
    if (is_not_empty(a_0))
    {
      List_Ref<std::pair<mfecovar, String> > ret_2 = nt_struct((t_0_i + 1));
      List_Ref<std::pair<mfecovar, String> > a_1 = ret_2;
      if (is_not_empty(a_1))
        {
          for (List_Ref<std::pair<mfecovar, String> >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
            std::pair<mfecovar, String>  x_1 = *x_1_itr;
            std::pair<mfecovar, String>  ans = sadd(a_0, x_1);
            push_back_min_other( answers, ans);
          }
        }

      erase( a_1);
    }

    erase( a_0);
  }


  if (((t_0_right_most - t_0_i) >= 5))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 5); (t_0_k_0 <= t_0_right_most); ++t_0_k_0)
      {
        List_Ref<std::pair<mfecovar, String> > ret_5 = nt_struct(t_0_k_0);
        List_Ref<std::pair<mfecovar, String> > a_3 = ret_5;
        if (is_not_empty(a_3))
        {
          List_Ref<std::pair<mfecovar, String> > ret_4 = nt_dangle(t_0_i, t_0_k_0);
          List_Ref<std::pair<mfecovar, String> > a_2 = ret_4;
          if (is_not_empty(a_2))
            {
              for (List_Ref<std::pair<mfecovar, String> >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                std::pair<mfecovar, String>  x_2 = *x_2_itr;
                for (List_Ref<std::pair<mfecovar, String> >::iterator x_3_itr = a_3.ref().begin(); x_3_itr!=a_3.ref().end(); ++x_3_itr){
                  std::pair<mfecovar, String>  x_3 = *x_3_itr;
                  std::pair<mfecovar, String>  ans = cadd(x_2, x_3);
                  push_back_min_other( answers, ans);
                }
              }
            }

          erase( a_2);
        }

        erase( a_3);
      }

    }

  std::pair<mfecovar, String>  ret_6;
  if ((((t_0_right_most - t_0_i) >= 0) && ((t_0_right_most - t_0_i) <= 0)))
  {
    TUSubsequence ret_7 = LOC(t_0_seq, t_0_i, t_0_i);
    TUSubsequence a_4 = ret_7;
    if (is_not_empty(a_4))
      {
        ret_6 = nil(a_4);
      }

    else
      {
        empty( ret_6);
      }

    erase( a_4);
  }

  else
    {
      empty( ret_6);
    }

  if (is_not_empty(ret_6))
    {
      push_back_min_other( answers, ret_6);
    }

  List_Ref<std::pair<mfecovar, String> > eval = h(answers);
  erase( answers);
  struct_table.set( t_0_i, eval);
  return struct_table.get(t_0_i);
}

List_Ref<std::pair<mfecovar, String> > &  eval_microstate::nt_weak(unsigned int t_0_i, unsigned int t_0_j)
{
  if (weak_table.is_tabulated(t_0_i, t_0_j))
    {
      return weak_table.get(t_0_i, t_0_j);
    }

  List_Ref<std::pair<mfecovar, String> > answers;
  empty(answers);
  empty( answers);


  List_Ref<std::pair<mfecovar, String> > ret_1 = nt_stack(t_0_i, t_0_j);
  append_min_other( answers, ret_1);
  std::pair<mfecovar, String>  ret_2 = nt_hairpin(t_0_i, t_0_j);
  if (is_not_empty(ret_2))
    {
      push_back_min_other( answers, ret_2);
    }

  List_Ref<std::pair<mfecovar, String> > ret_3 = nt_leftB(t_0_i, t_0_j);
  append_min_other( answers, ret_3);
  List_Ref<std::pair<mfecovar, String> > ret_4 = nt_rightB(t_0_i, t_0_j);
  append_min_other( answers, ret_4);
  List_Ref<std::pair<mfecovar, String> > ret_5 = nt_iloop(t_0_i, t_0_j);
  append_min_other( answers, ret_5);
  List_Ref<std::pair<mfecovar, String> > ret_6 = nt_multiloop(t_0_i, t_0_j);
  append_min_other( answers, ret_6);
  List_Ref<std::pair<mfecovar, String> > eval = h(answers);
  erase( answers);
  weak_table.set( t_0_i, t_0_j, eval);
  return weak_table.get(t_0_i, t_0_j);
}


std::pair<mfecovar, String>  eval_microstate::addss(const std::pair<mfecovar, String> & p_x, const TUSubsequence & p_r)
{
  mfecovar l_0 = p_x.first;
  TUSubsequence l_1 = p_r;
  String r_0 = p_x.second;
  TUSubsequence r_1 = p_r;
  mfecovar ret_left = addss_l(l_0, l_1);
  String ret_right = addss_r(r_0, r_1);
  std::pair<mfecovar, String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar, String>  eval_microstate::bl(const TUSubsequence & p_lb, const TUSubsequence & p_lr, const std::pair<mfecovar, String> & p_x, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  TUSubsequence l_1 = p_lr;
  mfecovar l_2 = p_x.first;
  TUSubsequence l_3 = p_rb;
  TUSubsequence r_0 = p_lb;
  TUSubsequence r_1 = p_lr;
  String r_2 = p_x.second;
  TUSubsequence r_3 = p_rb;
  mfecovar ret_left = bl_l(l_0, l_1, l_2, l_3);
  String ret_right = bl_r(r_0, r_1, r_2, r_3);
  std::pair<mfecovar, String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar, String>  eval_microstate::br(const TUSubsequence & p_lb, const std::pair<mfecovar, String> & p_x, const TUSubsequence & p_rr, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  mfecovar l_1 = p_x.first;
  TUSubsequence l_2 = p_rr;
  TUSubsequence l_3 = p_rb;
  TUSubsequence r_0 = p_lb;
  String r_1 = p_x.second;
  TUSubsequence r_2 = p_rr;
  TUSubsequence r_3 = p_rb;
  mfecovar ret_left = br_l(l_0, l_1, l_2, l_3);
  String ret_right = br_r(r_0, r_1, r_2, r_3);
  std::pair<mfecovar, String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar, String>  eval_microstate::cadd(const std::pair<mfecovar, String> & p_x, const std::pair<mfecovar, String> & p_y)
{
  mfecovar l_0 = p_x.first;
  mfecovar l_1 = p_y.first;
  String r_0 = p_x.second;
  String r_1 = p_y.second;
  mfecovar ret_left = cadd_l(l_0, l_1);
  String ret_right = cadd_r(r_0, r_1);
  std::pair<mfecovar, String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar, String>  eval_microstate::drem(const TUSubsequence & p_lb, const std::pair<mfecovar, String> & p_x, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  mfecovar l_1 = p_x.first;
  TUSubsequence l_2 = p_rb;
  TUSubsequence r_0 = p_lb;
  String r_1 = p_x.second;
  TUSubsequence r_2 = p_rb;
  mfecovar ret_left = drem_l(l_0, l_1, l_2);
  String ret_right = drem_r(r_0, r_1, r_2);
  std::pair<mfecovar, String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar, String>  eval_microstate::edl(const TUSubsequence & p_ldangle, const std::pair<mfecovar, String> & p_x, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_ldangle;
  mfecovar l_1 = p_x.first;
  TUSubsequence l_2 = p_rb;
  TUSubsequence r_0 = p_ldangle;
  String r_1 = p_x.second;
  TUSubsequence r_2 = p_rb;
  mfecovar ret_left = edl_l(l_0, l_1, l_2);
  String ret_right = edl_r(r_0, r_1, r_2);
  std::pair<mfecovar, String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar, String>  eval_microstate::edlr(const TUSubsequence & p_ldangle, const std::pair<mfecovar, String> & p_x, const TUSubsequence & p_rdangle)
{
  TUSubsequence l_0 = p_ldangle;
  mfecovar l_1 = p_x.first;
  TUSubsequence l_2 = p_rdangle;
  TUSubsequence r_0 = p_ldangle;
  String r_1 = p_x.second;
  TUSubsequence r_2 = p_rdangle;
  mfecovar ret_left = edlr_l(l_0, l_1, l_2);
  String ret_right = edlr_r(r_0, r_1, r_2);
  std::pair<mfecovar, String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar, String>  eval_microstate::edr(const TUSubsequence & p_lb, const std::pair<mfecovar, String> & p_x, const TUSubsequence & p_rdangle)
{
  TUSubsequence l_0 = p_lb;
  mfecovar l_1 = p_x.first;
  TUSubsequence l_2 = p_rdangle;
  TUSubsequence r_0 = p_lb;
  String r_1 = p_x.second;
  TUSubsequence r_2 = p_rdangle;
  mfecovar ret_left = edr_l(l_0, l_1, l_2);
  String ret_right = edr_r(r_0, r_1, r_2);
  std::pair<mfecovar, String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

List_Ref<std::pair<mfecovar, String> > eval_microstate::h(List_Ref<std::pair<mfecovar, String> > i)
{
  return i;
}

std::pair<mfecovar, String>  eval_microstate::hl(const TUSubsequence & p_lb, const TUSubsequence & p_r, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  TUSubsequence l_1 = p_r;
  TUSubsequence l_2 = p_rb;
  TUSubsequence r_0 = p_lb;
  TUSubsequence r_1 = p_r;
  TUSubsequence r_2 = p_rb;
  mfecovar ret_left = hl_l(l_0, l_1, l_2);
  String ret_right = hl_r(r_0, r_1, r_2);
  std::pair<mfecovar, String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar, String>  eval_microstate::il(const TUSubsequence & p_lb, const TUSubsequence & p_lr, const std::pair<mfecovar, String> & p_x, const TUSubsequence & p_rr, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  TUSubsequence l_1 = p_lr;
  mfecovar l_2 = p_x.first;
  TUSubsequence l_3 = p_rr;
  TUSubsequence l_4 = p_rb;
  TUSubsequence r_0 = p_lb;
  TUSubsequence r_1 = p_lr;
  String r_2 = p_x.second;
  TUSubsequence r_3 = p_rr;
  TUSubsequence r_4 = p_rb;
  mfecovar ret_left = il_l(l_0, l_1, l_2, l_3, l_4);
  String ret_right = il_r(r_0, r_1, r_2, r_3, r_4);
  std::pair<mfecovar, String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar, String>  eval_microstate::incl(const std::pair<mfecovar, String> & p_x)
{
  mfecovar l_0 = p_x.first;
  String r_0 = p_x.second;
  mfecovar ret_left = incl_l(l_0);
  String ret_right = incl_r(r_0);
  std::pair<mfecovar, String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar, String>  eval_microstate::ml(const TUSubsequence & p_lb, const std::pair<mfecovar, String> & p_x, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  mfecovar l_1 = p_x.first;
  TUSubsequence l_2 = p_rb;
  TUSubsequence r_0 = p_lb;
  String r_1 = p_x.second;
  TUSubsequence r_2 = p_rb;
  mfecovar ret_left = ml_l(l_0, l_1, l_2);
  String ret_right = ml_r(r_0, r_1, r_2);
  std::pair<mfecovar, String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar, String>  eval_microstate::mldl(const TUSubsequence & p_lb, const TUSubsequence & p_dl, const std::pair<mfecovar, String> & p_x, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  TUSubsequence l_1 = p_dl;
  mfecovar l_2 = p_x.first;
  TUSubsequence l_3 = p_rb;
  TUSubsequence r_0 = p_lb;
  TUSubsequence r_1 = p_dl;
  String r_2 = p_x.second;
  TUSubsequence r_3 = p_rb;
  mfecovar ret_left = mldl_l(l_0, l_1, l_2, l_3);
  String ret_right = mldl_r(r_0, r_1, r_2, r_3);
  std::pair<mfecovar, String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar, String>  eval_microstate::mldlr(const TUSubsequence & p_lb, const TUSubsequence & p_dl, const std::pair<mfecovar, String> & p_x, const TUSubsequence & p_dr, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  TUSubsequence l_1 = p_dl;
  mfecovar l_2 = p_x.first;
  TUSubsequence l_3 = p_dr;
  TUSubsequence l_4 = p_rb;
  TUSubsequence r_0 = p_lb;
  TUSubsequence r_1 = p_dl;
  String r_2 = p_x.second;
  TUSubsequence r_3 = p_dr;
  TUSubsequence r_4 = p_rb;
  mfecovar ret_left = mldlr_l(l_0, l_1, l_2, l_3, l_4);
  String ret_right = mldlr_r(r_0, r_1, r_2, r_3, r_4);
  std::pair<mfecovar, String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar, String>  eval_microstate::mldr(const TUSubsequence & p_lb, const std::pair<mfecovar, String> & p_x, const TUSubsequence & p_dr, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  mfecovar l_1 = p_x.first;
  TUSubsequence l_2 = p_dr;
  TUSubsequence l_3 = p_rb;
  TUSubsequence r_0 = p_lb;
  String r_1 = p_x.second;
  TUSubsequence r_2 = p_dr;
  TUSubsequence r_3 = p_rb;
  mfecovar ret_left = mldr_l(l_0, l_1, l_2, l_3);
  String ret_right = mldr_r(r_0, r_1, r_2, r_3);
  std::pair<mfecovar, String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar, String>  eval_microstate::nil(const TUSubsequence & p_n)
{
  TUSubsequence l_0 = p_n;
  TUSubsequence r_0 = p_n;
  mfecovar ret_left = nil_l(l_0);
  String ret_right = nil_r(r_0);
  std::pair<mfecovar, String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar, String>  eval_microstate::sadd(const TUSubsequence & p_lb, const std::pair<mfecovar, String> & p_x)
{
  TUSubsequence l_0 = p_lb;
  mfecovar l_1 = p_x.first;
  TUSubsequence r_0 = p_lb;
  String r_1 = p_x.second;
  mfecovar ret_left = sadd_l(l_0, l_1);
  String ret_right = sadd_r(r_0, r_1);
  std::pair<mfecovar, String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar, String>  eval_microstate::sr(const TUSubsequence & p_lb, const std::pair<mfecovar, String> & p_x, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  mfecovar l_1 = p_x.first;
  TUSubsequence l_2 = p_rb;
  TUSubsequence r_0 = p_lb;
  String r_1 = p_x.second;
  TUSubsequence r_2 = p_rb;
  mfecovar ret_left = sr_l(l_0, l_1, l_2);
  String ret_right = sr_r(r_0, r_1, r_2);
  std::pair<mfecovar, String>  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}



mfecovar eval_microstate::addss_l(const mfecovar & x, const TUSubsequence & r)
{
#line 190 "../../../eval_ali_microstate.gap"
  mfecovar res = x;
  res.mfe = (res.mfe +  ( (ss_energy(r) / float(rows(r))) ) );
  return res;
#line 1625 "eval_microstate.cc"
}

mfecovar eval_microstate::bl_l(const TUSubsequence & lb, const TUSubsequence & lr, const mfecovar & x, const TUSubsequence & rb)
{
#line 126 "../../../eval_ali_microstate.gap"
  mfecovar res = x;
  res.mfe = (res.mfe +  ( (bl_energy(lr, rb) / float(rows(lb))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 1635 "eval_microstate.cc"
}

mfecovar eval_microstate::br_l(const TUSubsequence & lb, const mfecovar & x, const TUSubsequence & rr, const TUSubsequence & rb)
{
#line 134 "../../../eval_ali_microstate.gap"
  mfecovar res = x;
  res.mfe = (res.mfe +  ( (br_energy(lb, rr) / float(rows(lb))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 1645 "eval_microstate.cc"
}

mfecovar eval_microstate::cadd_l(const mfecovar & x, const mfecovar & y)
{
#line 71 "../../../eval_ali_microstate.gap"
  return  ( (x + y) ) ;
#line 1652 "eval_microstate.cc"
}

mfecovar eval_microstate::drem_l(const TUSubsequence & lb, const mfecovar & x, const TUSubsequence & rb)
{
#line 103 "../../../eval_ali_microstate.gap"
  mfecovar res = x;
  res.mfe = (res.mfe +  ( (termau_energy(lb, rb) / float(rows(lb))) ) );
  return res;
#line 1661 "eval_microstate.cc"
}

mfecovar eval_microstate::edl_l(const TUSubsequence & ldangle, const mfecovar & x, const TUSubsequence & rb)
{
#line 74 "../../../eval_ali_microstate.gap"
  mfecovar res = x;
  TUSubsequence lb = ldangle;
  lb.i = (ldangle.i + 1);
  res.mfe = (res.mfe +  ( ( ( (termau_energy(lb, rb) + dl_energy(lb, rb)) )  / float(rows(ldangle))) ) );
  return res;
#line 1672 "eval_microstate.cc"
}

mfecovar eval_microstate::edlr_l(const TUSubsequence & ldangle, const mfecovar & x, const TUSubsequence & rdangle)
{
#line 92 "../../../eval_ali_microstate.gap"
  mfecovar res = x;
  TUSubsequence lb = ldangle;
  lb.i = (ldangle.i + 1);
  TUSubsequence rb = rdangle;
  rb.j = (rdangle.j - 1);
  res.mfe = (res.mfe +  ( ( ( (termau_energy(lb, rb) + ext_mismatch_energy(lb, rb)) )  / float(rows(ldangle))) ) );
  return res;
#line 1685 "eval_microstate.cc"
}

mfecovar eval_microstate::edr_l(const TUSubsequence & lb, const mfecovar & x, const TUSubsequence & rdangle)
{
#line 83 "../../../eval_ali_microstate.gap"
  mfecovar res = x;
  TUSubsequence rb = rdangle;
  rb.j = (rdangle.j - 1);
  res.mfe = (res.mfe +  ( ( ( (termau_energy(lb, rb) + dr_energy(lb, rb)) )  / float(rows(lb))) ) );
  return res;
#line 1696 "eval_microstate.cc"
}

mfecovar eval_microstate::h_l(List_Ref<mfecovar> i)
{
  std::pair<List<mfecovar>::iterator, List<mfecovar>::iterator> range = get_range(i);
  return h_l(range);
}

template <typename Iterator>
mfecovar eval_microstate::h_l(std::pair<Iterator, Iterator> i)

{
#line 203 "../../../eval_ali_microstate.gap"
  return minimum(i);
#line 1711 "eval_microstate.cc"
}

mfecovar eval_microstate::hl_l(const TUSubsequence & lb, const TUSubsequence & r, const TUSubsequence & rb)
{
#line 118 "../../../eval_ali_microstate.gap"
  mfecovar res;
  res.mfe =  ( (hl_energy(r) / float(rows(r))) ) ;
  res.covar = covscore(lb, lb.i, rb.i);
  return res;
#line 1721 "eval_microstate.cc"
}

mfecovar eval_microstate::il_l(const TUSubsequence & lb, const TUSubsequence & lr, const mfecovar & x, const TUSubsequence & rr, const TUSubsequence & rb)
{
#line 142 "../../../eval_ali_microstate.gap"
  mfecovar res = x;
  res.mfe = (res.mfe +  ( (il_energy(lr, rr) / float(rows(lr))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 1731 "eval_microstate.cc"
}

mfecovar eval_microstate::incl_l(const mfecovar & x)
{
#line 183 "../../../eval_ali_microstate.gap"
  mfecovar res = x;
  res.mfe = (res.mfe + ul_energy());
  return res;
#line 1740 "eval_microstate.cc"
}

mfecovar eval_microstate::ml_l(const TUSubsequence & lb, const mfecovar & x, const TUSubsequence & rb)
{
#line 175 "../../../eval_ali_microstate.gap"
  mfecovar res = x;
  res.mfe = (((res.mfe + ml_energy()) + ul_energy()) +  ( (termau_energy(lb, rb) / float(rows(lb))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 1750 "eval_microstate.cc"
}

mfecovar eval_microstate::mldl_l(const TUSubsequence & lb, const TUSubsequence & dl, const mfecovar & x, const TUSubsequence & rb)
{
#line 151 "../../../eval_ali_microstate.gap"
  mfecovar res = x;
  res.mfe = (((res.mfe + ml_energy()) + ul_energy()) +  ( ( ( (termau_energy(lb, rb) + dli_energy(lb, rb)) )  / float(rows(lb))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 1760 "eval_microstate.cc"
}

mfecovar eval_microstate::mldlr_l(const TUSubsequence & lb, const TUSubsequence & dl, const mfecovar & x, const TUSubsequence & dr, const TUSubsequence & rb)
{
#line 167 "../../../eval_ali_microstate.gap"
  mfecovar res = x;
  res.mfe = (((res.mfe + ml_energy()) + ul_energy()) +  ( ( ( (termau_energy(lb, rb) + ml_mismatch_energy(lb, rb)) )  / float(rows(lb))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 1770 "eval_microstate.cc"
}

mfecovar eval_microstate::mldr_l(const TUSubsequence & lb, const mfecovar & x, const TUSubsequence & dr, const TUSubsequence & rb)
{
#line 159 "../../../eval_ali_microstate.gap"
  mfecovar res = x;
  res.mfe = (((res.mfe + ml_energy()) + ul_energy()) +  ( ( ( (termau_energy(lb, rb) + dri_energy(lb, rb)) )  / float(rows(lb))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 1780 "eval_microstate.cc"
}

mfecovar eval_microstate::nil_l(const TUSubsequence & n)
{
#line 197 "../../../eval_ali_microstate.gap"
  mfecovar res;
  res.mfe = 0;
  res.covar = 0;
  return res;
#line 1790 "eval_microstate.cc"
}

mfecovar eval_microstate::sadd_l(const TUSubsequence & lb, const mfecovar & x)
{
#line 58 "../../../eval_ali_microstate.gap"
  mfecovar res = x;
  int sbase_sum = 0;
  for(  int k = 0; (k < int(rows(lb)));   k = (k + 1))
  {
    if ((column(seq_char(lb, lb.i), k) != GAP_BASE))
      {
        sbase_sum = (sbase_sum + sbase_energy());
      }

  }

  res.mfe = (res.mfe +  ( (sbase_sum / float(rows(lb))) ) );
  return res;
#line 1809 "eval_microstate.cc"
}

mfecovar eval_microstate::sr_l(const TUSubsequence & lb, const mfecovar & x, const TUSubsequence & rb)
{
#line 110 "../../../eval_ali_microstate.gap"
  mfecovar res = x;
  res.mfe = (res.mfe +  ( (sr_energy(lb, rb) / float(rows(lb))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 1819 "eval_microstate.cc"
}



String eval_microstate::addss_r(const String & e, const TUSubsequence & rb)
{
  String res;
  append( res, e);
  append( res, '.', size(rb));
  return res;
}

String eval_microstate::bl_r(const TUSubsequence & lb, const TUSubsequence & lregion, const String & e, const TUSubsequence & rb)
{
  String res;
  append( res, '(');
  append( res, '.', size(lregion));
  append( res, e);
  append( res, ')');
  return res;
}

String eval_microstate::br_r(const TUSubsequence & lb, const String & e, const TUSubsequence & rregion, const TUSubsequence & rb)
{
  String res;
  append( res, '(');
  append( res, e);
  append( res, '.', size(rregion));
  append( res, ')');
  return res;
}

String eval_microstate::cadd_r(const String & le, const String & re)
{
  String res;
  append( res, le);
  append( res, re);
  return res;
}

String eval_microstate::drem_r(const TUSubsequence & lloc, const String & e, const TUSubsequence & rloc)
{
#line 868 "../../../eval_ali_microstate.gap"
  return e;
#line 1864 "eval_microstate.cc"
}

String eval_microstate::edl_r(const TUSubsequence & lb, const String & e, const TUSubsequence & loc)
{
  String res;
  append( res, '.');
  append( res, e);
  return res;
}

String eval_microstate::edlr_r(const TUSubsequence & lb, const String & e, const TUSubsequence & rb)
{
  String res;
  append( res, '.');
  append( res, e);
  append( res, '.');
  return res;
}

String eval_microstate::edr_r(const TUSubsequence & loc, const String & e, const TUSubsequence & rb)
{
  String res;
  append( res, e);
  append( res, '.');
  return res;
}

List_Ref<String> eval_microstate::h_r(List_Ref<String> i)
{
#line 1084 "../../../eval_ali_microstate.gap"
  return i;
#line 1896 "eval_microstate.cc"
}

String eval_microstate::hl_r(const TUSubsequence & lb, const TUSubsequence & region, const TUSubsequence & rb)
{
  String res;
  append( res, '(');
  append( res, '.', size(region));
  append( res, ')');
  return res;
}

String eval_microstate::il_r(const TUSubsequence & lb, const TUSubsequence & lregion, const String & e, const TUSubsequence & rregion, const TUSubsequence & rb)
{
  String res;
  append( res, '(');
  append( res, '.', size(lregion));
  append( res, e);
  append( res, '.', size(rregion));
  append( res, ')');
  return res;
}

String eval_microstate::incl_r(const String & e)
{
#line 960 "../../../eval_ali_microstate.gap"
  return e;
#line 1923 "eval_microstate.cc"
}

String eval_microstate::ml_r(const TUSubsequence & lb, const String & e, const TUSubsequence & rb)
{
  String res;
  append( res, '(');
  append( res, e);
  append( res, ')');
  return res;
}

String eval_microstate::mldl_r(const TUSubsequence & lb, const TUSubsequence & dl, const String & e, const TUSubsequence & rb)
{
  String res;
  append( res, '(');
  append( res, '.');
  append( res, e);
  append( res, ')');
  return res;
}

String eval_microstate::mldlr_r(const TUSubsequence & lb, const TUSubsequence & dl, const String & e, const TUSubsequence & dr, const TUSubsequence & rb)
{
  String res;
  append( res, '(');
  append( res, '.');
  append( res, e);
  append( res, '.');
  append( res, ')');
  return res;
}

String eval_microstate::mldr_r(const TUSubsequence & lb, const String & e, const TUSubsequence & dr, const TUSubsequence & rb)
{
  String res;
  append( res, '(');
  append( res, e);
  append( res, '.');
  append( res, ')');
  return res;
}

String eval_microstate::nil_r(const TUSubsequence & loc)
{
  String r;
  return r;
}

String eval_microstate::sadd_r(const TUSubsequence & lb, const String & e)
{
  String res;
  append( res, '.');
  append( res, e);
  return res;
}

String eval_microstate::sr_r(const TUSubsequence & lb, const String & e, const TUSubsequence & rb)
{
  String res;
  append( res, '(');
  append( res, e);
  append( res, ')');
  return res;
}


    void eval_microstate::cyk()
{

}



#ident "$Id: Compiled with gapc bellmansgapc-2013.05.02 $"

