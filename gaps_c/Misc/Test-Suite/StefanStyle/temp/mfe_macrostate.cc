
// A dynamic programming evaluator generated by GAP-C.
// 
//   GAP-C version:
//     bellmansgapc-2013.05.02
// 
//   GAP-C call:
//     /home/jhuang/local/gapc/bin/gapc -I ../../../../ -p alg_ali_mfe_macrostate * (alg_ali_dotBracket * alg_ali_shapeX * alg_ali_pfunc_macrostate) ../../../../ali_macrostate.gap --kbacktrace --no-coopt -o mfe_macrostate.cc 
// 
// 


#define GAPC_MOD_TRANSLATION_UNIT
#include "mfe_macrostate.hh"

#include <rtlib/subopt.hh>
#include "rna.hh"
#include "Extensions/alifold.hh"
#include "Extensions/mfesubopt.hh"
#include "Extensions/probabilities.hh"
#include "Extensions/typesRNAfolding.hh"
#include "Extensions/shapes.hh"

#include "Extensions/rnaoptions.hh"

mfecovar_macrostate &  mfe_macrostate::nt_block_dl(unsigned int t_0_i, unsigned int t_0_j)
{
  if (block_dl_table.is_tabulated(t_0_i, t_0_j))
    {
      return block_dl_table.get(t_0_i, t_0_j);
    }

  mfecovar_macrostate answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 7))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 1); (t_0_k_0 <= (t_0_j - 6)); ++t_0_k_0)
      {
        TUSubsequence ret_1;
        if (unpaired(t_0_seq, t_0_i, t_0_k_0))
          {
            ret_1 = REGION(t_0_seq, t_0_i, t_0_k_0);
          }

        else
          {
            empty( ret_1);
          }

        TUSubsequence a_0 = ret_1;
        if (is_not_empty(a_0))
        {
          mfecovar_macrostate ret_2 = nt_edanglel(t_0_k_0, t_0_j);
          mfecovar_macrostate a_1 = ret_2;
          if (is_not_empty(a_1))
          {
            mfecovar_macrostate ans = ssadd(a_0, a_1);
            push_back_min( answers, ans);
          }

          erase( a_1);
        }

        erase( a_0);
      }

    }

  mfecovar_macrostate ret_3;
  if (((t_0_j - t_0_i) >= 6))
  {
    mfecovar_macrostate ret_4 = nt_edanglel(t_0_i, t_0_j);
    mfecovar_macrostate a_2 = ret_4;
    if (is_not_empty(a_2))
      {
        ret_3 = incl(a_2);
      }

    else
      {
        empty( ret_3);
      }

    erase( a_2);
  }

  else
    {
      empty( ret_3);
    }

  if (is_not_empty(ret_3))
    {
      push_back_min( answers, ret_3);
    }

  mfecovar_macrostate eval = h(answers);
  erase( answers);
  block_dl_table.set( t_0_i, t_0_j, eval);
  return block_dl_table.get(t_0_i, t_0_j);
}

mfecovar_macrostate &  mfe_macrostate::nt_block_dlr(unsigned int t_0_i, unsigned int t_0_j)
{
  if (block_dlr_table.is_tabulated(t_0_i, t_0_j))
    {
      return block_dlr_table.get(t_0_i, t_0_j);
    }

  mfecovar_macrostate answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 8))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 1); (t_0_k_0 <= (t_0_j - 7)); ++t_0_k_0)
      {
        TUSubsequence ret_1;
        if (unpaired(t_0_seq, t_0_i, t_0_k_0))
          {
            ret_1 = REGION(t_0_seq, t_0_i, t_0_k_0);
          }

        else
          {
            empty( ret_1);
          }

        TUSubsequence a_0 = ret_1;
        if (is_not_empty(a_0))
        {
          mfecovar_macrostate ret_2 = nt_edanglelr(t_0_k_0, t_0_j);
          mfecovar_macrostate a_1 = ret_2;
          if (is_not_empty(a_1))
          {
            mfecovar_macrostate ans = ssadd(a_0, a_1);
            push_back_min( answers, ans);
          }

          erase( a_1);
        }

        erase( a_0);
      }

    }

  mfecovar_macrostate ret_3;
  if (((t_0_j - t_0_i) >= 7))
  {
    mfecovar_macrostate ret_4 = nt_edanglelr(t_0_i, t_0_j);
    mfecovar_macrostate a_2 = ret_4;
    if (is_not_empty(a_2))
      {
        ret_3 = incl(a_2);
      }

    else
      {
        empty( ret_3);
      }

    erase( a_2);
  }

  else
    {
      empty( ret_3);
    }

  if (is_not_empty(ret_3))
    {
      push_back_min( answers, ret_3);
    }

  mfecovar_macrostate eval = h(answers);
  erase( answers);
  block_dlr_table.set( t_0_i, t_0_j, eval);
  return block_dlr_table.get(t_0_i, t_0_j);
}

mfecovar_macrostate &  mfe_macrostate::nt_dl_or_ss_left_no_ss_end(unsigned int t_0_i, unsigned int t_0_j)
{
  if (dl_or_ss_left_no_ss_end_table.is_tabulated(t_0_i, t_0_j))
    {
      return dl_or_ss_left_no_ss_end_table.get(t_0_i, t_0_j);
    }

  mfecovar_macrostate answers;
  empty(answers);
  empty( answers);
  mfecovar_macrostate ret_0 = nt_ml_comps1(t_0_i, t_0_j);
  if (is_not_empty(ret_0))
    {
      push_back_min( answers, ret_0);
    }

  mfecovar_macrostate ret_1 = nt_block_dl(t_0_i, t_0_j);
  if (is_not_empty(ret_1))
    {
      push_back_min( answers, ret_1);
    }

  mfecovar_macrostate eval = h(answers);
  erase( answers);
  dl_or_ss_left_no_ss_end_table.set( t_0_i, t_0_j, eval);
  return dl_or_ss_left_no_ss_end_table.get(t_0_i, t_0_j);
}

mfecovar_macrostate &  mfe_macrostate::nt_dl_or_ss_left_ss_end(unsigned int t_0_i, unsigned int t_0_j)
{
  if (dl_or_ss_left_ss_end_table.is_tabulated(t_0_i, t_0_j))
    {
      return dl_or_ss_left_ss_end_table.get(t_0_i, t_0_j);
    }

  mfecovar_macrostate answers;
  empty(answers);
  empty( answers);
  mfecovar_macrostate ret_0 = nt_ml_comps4(t_0_i, t_0_j);
  if (is_not_empty(ret_0))
    {
      push_back_min( answers, ret_0);
    }

  mfecovar_macrostate ret_1 = nt_block_dlr(t_0_i, t_0_j);
  if (is_not_empty(ret_1))
    {
      push_back_min( answers, ret_1);
    }


  if (((t_0_j - t_0_i) >= 8))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 7); (t_0_k_0 <= (t_0_j - 1)); ++t_0_k_0)
      {
        TUSubsequence ret_4;
        if (unpaired(t_0_seq, t_0_k_0, t_0_j))
          {
            ret_4 = REGION(t_0_seq, t_0_k_0, t_0_j);
          }

        else
          {
            empty( ret_4);
          }

        TUSubsequence a_1 = ret_4;
        if (is_not_empty(a_1))
        {
          mfecovar_macrostate ret_3 = nt_block_dlr(t_0_i, t_0_k_0);
          mfecovar_macrostate a_0 = ret_3;
          if (is_not_empty(a_0))
          {
            mfecovar_macrostate ans = addss(a_0, a_1);
            push_back_min( answers, ans);
          }

          erase( a_0);
        }

        erase( a_1);
      }

    }

  mfecovar_macrostate eval = h(answers);
  erase( answers);
  dl_or_ss_left_ss_end_table.set( t_0_i, t_0_j, eval);
  return dl_or_ss_left_ss_end_table.get(t_0_i, t_0_j);
}

mfecovar_macrostate &  mfe_macrostate::nt_edanglel(unsigned int t_0_i, unsigned int t_0_j)
{
  if (edanglel_table.is_tabulated(t_0_i, t_0_j))
    {
      return edanglel_table.get(t_0_i, t_0_j);
    }

  mfecovar_macrostate answers;
  empty(answers);
  empty( answers);
  mfecovar_macrostate ret_0;
  if (((t_0_j - t_0_i) >= 6))
  {
    TUSubsequence ret_3 = LOC(t_0_seq, t_0_j, t_0_j);
    TUSubsequence a_2 = ret_3;
    if (is_not_empty(a_2))
    {
      TUSubsequence ret_1;
      if (unpaired(t_0_seq, t_0_i, (t_0_i + 1)))
        {
          ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
        }

      else
        {
          empty( ret_1);
        }

      TUSubsequence a_0 = ret_1;
      if (is_not_empty(a_0))
      {
        mfecovar_macrostate ret_2 = nt_strong((t_0_i + 1), t_0_j);
        mfecovar_macrostate a_1 = ret_2;
        if (is_not_empty(a_1))
          {
            ret_0 = edl(a_0, a_1, a_2);
          }

        else
          {
            empty( ret_0);
          }

        erase( a_1);
      }

      else
        {
          empty( ret_0);
        }

      erase( a_0);
    }

    else
      {
        empty( ret_0);
      }

    erase( a_2);
  }

  else
    {
      empty( ret_0);
    }

  if (is_not_empty(ret_0))
    {
      push_back_min( answers, ret_0);
    }

  mfecovar_macrostate eval = h(answers);
  erase( answers);
  edanglel_table.set( t_0_i, t_0_j, eval);
  return edanglel_table.get(t_0_i, t_0_j);
}

mfecovar_macrostate &  mfe_macrostate::nt_edanglelr(unsigned int t_0_i, unsigned int t_0_j)
{
  if (edanglelr_table.is_tabulated(t_0_i, t_0_j))
    {
      return edanglelr_table.get(t_0_i, t_0_j);
    }

  mfecovar_macrostate answers;
  empty(answers);
  empty( answers);
  mfecovar_macrostate ret_0;
  if (((t_0_j - t_0_i) >= 7))
  {
    TUSubsequence ret_3;
    if (unpaired(t_0_seq, (t_0_j - 1), t_0_j))
      {
        ret_3 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
      }

    else
      {
        empty( ret_3);
      }

    TUSubsequence a_2 = ret_3;
    if (is_not_empty(a_2))
    {
      TUSubsequence ret_1;
      if (unpaired(t_0_seq, t_0_i, (t_0_i + 1)))
        {
          ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
        }

      else
        {
          empty( ret_1);
        }

      TUSubsequence a_0 = ret_1;
      if (is_not_empty(a_0))
      {
        mfecovar_macrostate ret_2 = nt_strong((t_0_i + 1), (t_0_j - 1));
        mfecovar_macrostate a_1 = ret_2;
        if (is_not_empty(a_1))
          {
            ret_0 = edlr(a_0, a_1, a_2);
          }

        else
          {
            empty( ret_0);
          }

        erase( a_1);
      }

      else
        {
          empty( ret_0);
        }

      erase( a_0);
    }

    else
      {
        empty( ret_0);
      }

    erase( a_2);
  }

  else
    {
      empty( ret_0);
    }

  if (is_not_empty(ret_0))
    {
      push_back_min( answers, ret_0);
    }

  mfecovar_macrostate eval = h(answers);
  erase( answers);
  edanglelr_table.set( t_0_i, t_0_j, eval);
  return edanglelr_table.get(t_0_i, t_0_j);
}

mfecovar_macrostate &  mfe_macrostate::nt_edangler(unsigned int t_0_i, unsigned int t_0_j)
{
  if (edangler_table.is_tabulated(t_0_i, t_0_j))
    {
      return edangler_table.get(t_0_i, t_0_j);
    }

  mfecovar_macrostate answers;
  empty(answers);
  empty( answers);
  mfecovar_macrostate ret_0;
  if (((t_0_j - t_0_i) >= 6))
  {
    TUSubsequence ret_3;
    if (unpaired(t_0_seq, (t_0_j - 1), t_0_j))
      {
        ret_3 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
      }

    else
      {
        empty( ret_3);
      }

    TUSubsequence a_2 = ret_3;
    if (is_not_empty(a_2))
    {
      TUSubsequence ret_1 = LOC(t_0_seq, t_0_i, t_0_i);
      TUSubsequence a_0 = ret_1;
      if (is_not_empty(a_0))
      {
        mfecovar_macrostate ret_2 = nt_strong(t_0_i, (t_0_j - 1));
        mfecovar_macrostate a_1 = ret_2;
        if (is_not_empty(a_1))
          {
            ret_0 = edr(a_0, a_1, a_2);
          }

        else
          {
            empty( ret_0);
          }

        erase( a_1);
      }

      else
        {
          empty( ret_0);
        }

      erase( a_0);
    }

    else
      {
        empty( ret_0);
      }

    erase( a_2);
  }

  else
    {
      empty( ret_0);
    }

  if (is_not_empty(ret_0))
    {
      push_back_min( answers, ret_0);
    }

  mfecovar_macrostate eval = h(answers);
  erase( answers);
  edangler_table.set( t_0_i, t_0_j, eval);
  return edangler_table.get(t_0_i, t_0_j);
}

mfecovar_macrostate mfe_macrostate::nt_hairpin(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 5))
    {
      return mfecovar_macrostate_zero;
    }

  mfecovar_macrostate answers;
  empty( answers);
  mfecovar_macrostate ret_0;
  if (((t_0_j - t_0_i) >= 5))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_3 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_2 = ret_3;
        if (is_not_empty(a_2))
        {
          TUSubsequence ret_2;
          if ((minsize(t_0_seq, (t_0_i + 1), (t_0_j - 1), 3) && unpaired(t_0_seq, (t_0_i + 1), (t_0_j - 1))))
            {
              ret_2 = REGION(t_0_seq, (t_0_i + 1), (t_0_j - 1));
            }

          else
            {
              empty( ret_2);
            }

          TUSubsequence a_1 = ret_2;
          if (is_not_empty(a_1))
          {
            TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
            TUSubsequence a_0 = ret_1;
            if (is_not_empty(a_0))
              {
                ret_0 = hl(a_0, a_1, a_2);
              }

            else
              {
                empty( ret_0);
              }

            erase( a_0);
          }

          else
            {
              empty( ret_0);
            }

          erase( a_1);
        }

        else
          {
            empty( ret_0);
          }

        erase( a_2);
      }

      else
      {
        empty( ret_0);
        empty( ret_0);
      }

    }

  else
    {
      empty( ret_0);
    }

  answers = ret_0;
  return answers;
}

mfecovar_macrostate &  mfe_macrostate::nt_iloop(unsigned int t_0_i, unsigned int t_0_j)
{
  if (iloop_table.is_tabulated(t_0_i, t_0_j))
    {
      return iloop_table.get(t_0_i, t_0_j);
    }

  mfecovar_macrostate answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 9))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
        {
          for(          unsigned int t_0_k_0 = (t_0_i + 2); ((t_0_k_0 <= (t_0_j - 7)) && (t_0_k_0 <= (t_0_i + 31))); ++t_0_k_0)
          {
            for(            unsigned int t_0_k_1 = (((t_0_j - (t_0_k_0 + 5)) >= 31)) ? ((t_0_j - 31)) : ((t_0_k_0 + 5)); (t_0_k_1 <= (t_0_j - 2)); ++t_0_k_1)
            {
              TUSubsequence ret_5 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
              TUSubsequence a_4 = ret_5;
              if (is_not_empty(a_4))
              {
                TUSubsequence ret_4;
                if ((maxsize(t_0_seq, t_0_k_1, (t_0_j - 1), 30) && unpaired(t_0_seq, t_0_k_1, (t_0_j - 1))))
                  {
                    ret_4 = REGION(t_0_seq, t_0_k_1, (t_0_j - 1));
                  }

                else
                  {
                    empty( ret_4);
                  }

                TUSubsequence a_3 = ret_4;
                if (is_not_empty(a_3))
                {
                  TUSubsequence ret_2;
                  if ((maxsize(t_0_seq, (t_0_i + 1), t_0_k_0, 30) && unpaired(t_0_seq, (t_0_i + 1), t_0_k_0)))
                    {
                      ret_2 = REGION(t_0_seq, (t_0_i + 1), t_0_k_0);
                    }

                  else
                    {
                      empty( ret_2);
                    }

                  TUSubsequence a_1 = ret_2;
                  if (is_not_empty(a_1))
                  {
                    TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                    TUSubsequence a_0 = ret_1;
                    if (is_not_empty(a_0))
                    {
                      mfecovar_macrostate ret_3 = nt_strong(t_0_k_0, t_0_k_1);
                      mfecovar_macrostate a_2 = ret_3;
                      if (is_not_empty(a_2))
                      {
                        mfecovar_macrostate ans = il(a_0, a_1, a_2, a_3, a_4);
                        push_back_min( answers, ans);
                      }

                      erase( a_2);
                    }

                    erase( a_0);
                  }

                  erase( a_1);
                }

                erase( a_3);
              }

              erase( a_4);
            }

          }

        }

      else
        {
          empty( answers);
        }

    }

  mfecovar_macrostate eval = h(answers);
  erase( answers);
  iloop_table.set( t_0_i, t_0_j, eval);
  return iloop_table.get(t_0_i, t_0_j);
}

mfecovar_macrostate mfe_macrostate::nt_leftB(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 8))
    {
      return mfecovar_macrostate_zero;
    }

  mfecovar_macrostate answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 8))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
        {
          for(          unsigned int t_0_k_0 = (t_0_i + 2); ((t_0_k_0 <= (t_0_j - 6)) && (t_0_k_0 <= (t_0_i + 31))); ++t_0_k_0)
          {
            TUSubsequence ret_4 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
            TUSubsequence a_3 = ret_4;
            if (is_not_empty(a_3))
            {
              TUSubsequence ret_2;
              if ((maxsize(t_0_seq, (t_0_i + 1), t_0_k_0, 30) && unpaired(t_0_seq, (t_0_i + 1), t_0_k_0)))
                {
                  ret_2 = REGION(t_0_seq, (t_0_i + 1), t_0_k_0);
                }

              else
                {
                  empty( ret_2);
                }

              TUSubsequence a_1 = ret_2;
              if (is_not_empty(a_1))
              {
                TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                TUSubsequence a_0 = ret_1;
                if (is_not_empty(a_0))
                {
                  mfecovar_macrostate ret_3 = nt_strong(t_0_k_0, (t_0_j - 1));
                  mfecovar_macrostate a_2 = ret_3;
                  if (is_not_empty(a_2))
                  {
                    mfecovar_macrostate ans = bl(a_0, a_1, a_2, a_3);
                    push_back_min( answers, ans);
                  }

                  erase( a_2);
                }

                erase( a_0);
              }

              erase( a_1);
            }

            erase( a_3);
          }

        }

      else
        {
          empty( answers);
        }

    }

  mfecovar_macrostate eval = h(answers);
  erase( answers);
  return eval;
}

mfecovar_macrostate &  mfe_macrostate::nt_left_dangle(unsigned int t_0_i)
{
  if (left_dangle_table.is_tabulated(t_0_i))
    {
      return left_dangle_table.get(t_0_i);
    }

  mfecovar_macrostate answers;
  empty(answers);
  empty( answers);

  if (((t_0_right_most - t_0_i) >= 12))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 6); (t_0_k_0 <= (t_0_right_most - 6)); ++t_0_k_0)
      {
        TUSubsequence ret_2;
        if (unpaired(t_0_seq, t_0_k_0, (t_0_k_0 + 1)))
          {
            ret_2 = BASE(t_0_seq, t_0_k_0, (t_0_k_0 + 1));
          }

        else
          {
            empty( ret_2);
          }

        TUSubsequence a_1 = ret_2;
        if (is_not_empty(a_1))
        {
          mfecovar_macrostate ret_3 = nt_noleft_dangle((t_0_k_0 + 1));
          mfecovar_macrostate a_2 = ret_3;
          if (is_not_empty(a_2))
          {
            mfecovar_macrostate ret_1 = nt_edanglel(t_0_i, t_0_k_0);
            mfecovar_macrostate a_0 = ret_1;
            if (is_not_empty(a_0))
            {
              mfecovar_macrostate ans = ambd(a_0, a_1, a_2);
              push_back_min( answers, ans);
            }

            erase( a_0);
          }

          erase( a_2);
        }

        erase( a_1);
      }

    }


  if (((t_0_right_most - t_0_i) >= 6))
    {
      for(      unsigned int t_0_k_1 = (t_0_i + 6); (t_0_k_1 <= t_0_right_most); ++t_0_k_1)
      {
        mfecovar_macrostate ret_6;
        empty(ret_6);
        empty( ret_6);
        mfecovar_macrostate ret_7 = nt_noleft_dangle(t_0_k_1);
        if (is_not_empty(ret_7))
          {
            push_back_min( ret_6, ret_7);
          }

        mfecovar_macrostate ret_8;
        if ((((t_0_right_most - t_0_k_1) >= 0) && ((t_0_right_most - t_0_k_1) <= 0)))
        {
          TUSubsequence ret_9 = LOC(t_0_seq, t_0_k_1, t_0_k_1);
          TUSubsequence a_5 = ret_9;
          if (is_not_empty(a_5))
            {
              ret_8 = nil(a_5);
            }

          else
            {
              empty( ret_8);
            }

          erase( a_5);
        }

        else
          {
            empty( ret_8);
          }

        if (is_not_empty(ret_8))
          {
            push_back_min( ret_6, ret_8);
          }

        finalize( ret_6);
        mfecovar_macrostate a_4 = ret_6;
        if (is_not_empty(a_4))
        {
          mfecovar_macrostate ret_5 = nt_edanglel(t_0_i, t_0_k_1);
          mfecovar_macrostate a_3 = ret_5;
          if (is_not_empty(a_3))
            {
              mfecovar_macrostate x_4 = a_4;
              mfecovar_macrostate ans = cadd_Pr(a_3, x_4);
              push_back_min( answers, ans);

            }

          erase( a_3);
        }

        erase( a_4);
      }

    }


  if (((t_0_right_most - t_0_i) >= 7))
    {
      for(      unsigned int t_0_k_2 = (t_0_i + 7); (t_0_k_2 <= t_0_right_most); ++t_0_k_2)
      {
        mfecovar_macrostate ret_12;
        empty(ret_12);
        empty( ret_12);
        mfecovar_macrostate ret_13 = nt_left_dangle(t_0_k_2);
        if (is_not_empty(ret_13))
          {
            push_back_min( ret_12, ret_13);
          }

        mfecovar_macrostate ret_14 = nt_left_unpaired(t_0_k_2);
        if (is_not_empty(ret_14))
          {
            push_back_min( ret_12, ret_14);
          }

        finalize( ret_12);
        mfecovar_macrostate a_7 = ret_12;
        if (is_not_empty(a_7))
        {
          mfecovar_macrostate ret_11 = nt_edanglelr(t_0_i, t_0_k_2);
          mfecovar_macrostate a_6 = ret_11;
          if (is_not_empty(a_6))
            {
              mfecovar_macrostate x_7 = a_7;
              mfecovar_macrostate ans = cadd(a_6, x_7);
              push_back_min( answers, ans);

            }

          erase( a_6);
        }

        erase( a_7);
      }

    }

  mfecovar_macrostate ret_15;
  if ((((t_0_right_most - t_0_i) >= 0) && ((t_0_right_most - t_0_i) <= 0)))
  {
    TUSubsequence ret_16 = LOC(t_0_seq, t_0_i, t_0_i);
    TUSubsequence a_8 = ret_16;
    if (is_not_empty(a_8))
      {
        ret_15 = nil(a_8);
      }

    else
      {
        empty( ret_15);
      }

    erase( a_8);
  }

  else
    {
      empty( ret_15);
    }

  if (is_not_empty(ret_15))
    {
      push_back_min( answers, ret_15);
    }

  mfecovar_macrostate eval = h(answers);
  erase( answers);
  left_dangle_table.set( t_0_i, eval);
  return left_dangle_table.get(t_0_i);
}

mfecovar_macrostate &  mfe_macrostate::nt_left_unpaired(unsigned int t_0_i)
{
  if (left_unpaired_table.is_tabulated(t_0_i))
    {
      return left_unpaired_table.get(t_0_i);
    }

  mfecovar_macrostate answers;
  empty(answers);
  empty( answers);
  mfecovar_macrostate ret_0;
  if (((t_0_right_most - t_0_i) >= 2))
  {
    TUSubsequence ret_1;
    if (unpaired(t_0_seq, t_0_i, (t_0_i + 1)))
      {
        ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
      }

    else
      {
        empty( ret_1);
      }

    TUSubsequence a_0 = ret_1;
    if (is_not_empty(a_0))
    {
      mfecovar_macrostate ret_2 = nt_left_unpaired((t_0_i + 1));
      mfecovar_macrostate a_1 = ret_2;
      if (is_not_empty(a_1))
        {
          ret_0 = sadd(a_0, a_1);
        }

      else
        {
          empty( ret_0);
        }

      erase( a_1);
    }

    else
      {
        empty( ret_0);
      }

    erase( a_0);
  }

  else
    {
      empty( ret_0);
    }

  if (is_not_empty(ret_0))
    {
      push_back_min( answers, ret_0);
    }

  mfecovar_macrostate ret_3;
  if (((t_0_right_most - t_0_i) >= 1))
  {
    TUSubsequence ret_4;
    if (unpaired(t_0_seq, t_0_i, (t_0_i + 1)))
      {
        ret_4 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
      }

    else
      {
        empty( ret_4);
      }

    TUSubsequence a_2 = ret_4;
    if (is_not_empty(a_2))
    {
      mfecovar_macrostate ret_5 = nt_left_dangle((t_0_i + 1));
      mfecovar_macrostate a_3 = ret_5;
      if (is_not_empty(a_3))
        {
          ret_3 = sadd(a_2, a_3);
        }

      else
        {
          empty( ret_3);
        }

      erase( a_3);
    }

    else
      {
        empty( ret_3);
      }

    erase( a_2);
  }

  else
    {
      empty( ret_3);
    }

  if (is_not_empty(ret_3))
    {
      push_back_min( answers, ret_3);
    }

  mfecovar_macrostate eval = h(answers);
  erase( answers);
  left_unpaired_table.set( t_0_i, eval);
  return left_unpaired_table.get(t_0_i);
}

mfecovar_macrostate &  mfe_macrostate::nt_ml_comps1(unsigned int t_0_i, unsigned int t_0_j)
{
  if (ml_comps1_table.is_tabulated(t_0_i, t_0_j))
    {
      return ml_comps1_table.get(t_0_i, t_0_j);
    }

  mfecovar_macrostate answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 11))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 6); (t_0_k_0 <= (t_0_j - 5)); ++t_0_k_0)
      {
        mfecovar_macrostate ret_2 = nt_no_dl_no_ss_end(t_0_k_0, t_0_j);
        mfecovar_macrostate a_1 = ret_2;
        if (is_not_empty(a_1))
        {
          mfecovar_macrostate ret_1 = nt_block_dl(t_0_i, t_0_k_0);
          mfecovar_macrostate a_0 = ret_1;
          if (is_not_empty(a_0))
          {
            mfecovar_macrostate ans = combine(a_0, a_1);
            push_back_min( answers, ans);
          }

          erase( a_0);
        }

        erase( a_1);
      }

    }


  if (((t_0_j - t_0_i) >= 13))
    {
      for(      unsigned int t_0_k_1 = (t_0_i + 7); (t_0_k_1 <= (t_0_j - 6)); ++t_0_k_1)
      {
        mfecovar_macrostate ret_5 = nt_dl_or_ss_left_no_ss_end(t_0_k_1, t_0_j);
        mfecovar_macrostate a_3 = ret_5;
        if (is_not_empty(a_3))
        {
          mfecovar_macrostate ret_4 = nt_block_dlr(t_0_i, t_0_k_1);
          mfecovar_macrostate a_2 = ret_4;
          if (is_not_empty(a_2))
          {
            mfecovar_macrostate ans = combine(a_2, a_3);
            push_back_min( answers, ans);
          }

          erase( a_2);
        }

        erase( a_3);
      }

    }


  if (((t_0_j - t_0_i) >= 12))
    {
      for(      unsigned int t_0_k_2 = (t_0_i + 6); (t_0_k_2 <= (t_0_j - 6)); ++t_0_k_2)
      {
        TUSubsequence ret_8;
        if (unpaired(t_0_seq, t_0_k_2, (t_0_k_2 + 1)))
          {
            ret_8 = BASE(t_0_seq, t_0_k_2, (t_0_k_2 + 1));
          }

        else
          {
            empty( ret_8);
          }

        TUSubsequence a_5 = ret_8;
        if (is_not_empty(a_5))
        {
          mfecovar_macrostate ret_9 = nt_no_dl_no_ss_end((t_0_k_2 + 1), t_0_j);
          mfecovar_macrostate a_6 = ret_9;
          if (is_not_empty(a_6))
          {
            mfecovar_macrostate ret_7 = nt_block_dl(t_0_i, t_0_k_2);
            mfecovar_macrostate a_4 = ret_7;
            if (is_not_empty(a_4))
            {
              mfecovar_macrostate ans = acomb(a_4, a_5, a_6);
              push_back_min( answers, ans);
            }

            erase( a_4);
          }

          erase( a_6);
        }

        erase( a_5);
      }

    }

  mfecovar_macrostate eval = h(answers);
  erase( answers);
  ml_comps1_table.set( t_0_i, t_0_j, eval);
  return ml_comps1_table.get(t_0_i, t_0_j);
}

mfecovar_macrostate &  mfe_macrostate::nt_ml_comps2(unsigned int t_0_i, unsigned int t_0_j)
{
  if (ml_comps2_table.is_tabulated(t_0_i, t_0_j))
    {
      return ml_comps2_table.get(t_0_i, t_0_j);
    }

  mfecovar_macrostate answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 10))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 5); (t_0_k_0 <= (t_0_j - 5)); ++t_0_k_0)
      {
        mfecovar_macrostate ret_3 = nt_no_dl_no_ss_end(t_0_k_0, t_0_j);
        mfecovar_macrostate a_2 = ret_3;
        if (is_not_empty(a_2))
        {
          mfecovar_macrostate ret_1;
          if (((t_0_k_0 - t_0_i) >= 5))
          {
            mfecovar_macrostate ret_2 = nt_nodangle(t_0_i, t_0_k_0);
            mfecovar_macrostate a_1 = ret_2;
            if (is_not_empty(a_1))
              {
                ret_1 = incl(a_1);
              }

            else
              {
                empty( ret_1);
              }

            erase( a_1);
          }

          else
            {
              empty( ret_1);
            }

          mfecovar_macrostate a_0 = ret_1;
          if (is_not_empty(a_0))
          {
            mfecovar_macrostate ans = combine(a_0, a_2);
            push_back_min( answers, ans);
          }

          erase( a_0);
        }

        erase( a_2);
      }

    }


  if (((t_0_j - t_0_i) >= 12))
    {
      for(      unsigned int t_0_k_1 = (t_0_i + 6); (t_0_k_1 <= (t_0_j - 6)); ++t_0_k_1)
      {
        mfecovar_macrostate ret_7 = nt_dl_or_ss_left_no_ss_end(t_0_k_1, t_0_j);
        mfecovar_macrostate a_5 = ret_7;
        if (is_not_empty(a_5))
        {
          mfecovar_macrostate ret_5;
          if (((t_0_k_1 - t_0_i) >= 6))
          {
            mfecovar_macrostate ret_6 = nt_edangler(t_0_i, t_0_k_1);
            mfecovar_macrostate a_4 = ret_6;
            if (is_not_empty(a_4))
              {
                ret_5 = incl(a_4);
              }

            else
              {
                empty( ret_5);
              }

            erase( a_4);
          }

          else
            {
              empty( ret_5);
            }

          mfecovar_macrostate a_3 = ret_5;
          if (is_not_empty(a_3))
          {
            mfecovar_macrostate ans = combine(a_3, a_5);
            push_back_min( answers, ans);
          }

          erase( a_3);
        }

        erase( a_5);
      }

    }


  if (((t_0_j - t_0_i) >= 11))
    {
      for(      unsigned int t_0_k_2 = (t_0_i + 5); (t_0_k_2 <= (t_0_j - 6)); ++t_0_k_2)
      {
        TUSubsequence ret_11;
        if (unpaired(t_0_seq, t_0_k_2, (t_0_k_2 + 1)))
          {
            ret_11 = BASE(t_0_seq, t_0_k_2, (t_0_k_2 + 1));
          }

        else
          {
            empty( ret_11);
          }

        TUSubsequence a_8 = ret_11;
        if (is_not_empty(a_8))
        {
          mfecovar_macrostate ret_12 = nt_no_dl_no_ss_end((t_0_k_2 + 1), t_0_j);
          mfecovar_macrostate a_9 = ret_12;
          if (is_not_empty(a_9))
          {
            mfecovar_macrostate ret_9;
            if (((t_0_k_2 - t_0_i) >= 5))
            {
              mfecovar_macrostate ret_10 = nt_nodangle(t_0_i, t_0_k_2);
              mfecovar_macrostate a_7 = ret_10;
              if (is_not_empty(a_7))
                {
                  ret_9 = incl(a_7);
                }

              else
                {
                  empty( ret_9);
                }

              erase( a_7);
            }

            else
              {
                empty( ret_9);
              }

            mfecovar_macrostate a_6 = ret_9;
            if (is_not_empty(a_6))
            {
              mfecovar_macrostate ans = acomb(a_6, a_8, a_9);
              push_back_min( answers, ans);
            }

            erase( a_6);
          }

          erase( a_9);
        }

        erase( a_8);
      }

    }

  mfecovar_macrostate eval = h(answers);
  erase( answers);
  ml_comps2_table.set( t_0_i, t_0_j, eval);
  return ml_comps2_table.get(t_0_i, t_0_j);
}

mfecovar_macrostate &  mfe_macrostate::nt_ml_comps3(unsigned int t_0_i, unsigned int t_0_j)
{
  if (ml_comps3_table.is_tabulated(t_0_i, t_0_j))
    {
      return ml_comps3_table.get(t_0_i, t_0_j);
    }

  mfecovar_macrostate answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 13))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 6); (t_0_k_0 <= (t_0_j - 7)); ++t_0_k_0)
      {
        mfecovar_macrostate ret_3 = nt_dl_or_ss_left_ss_end(t_0_k_0, t_0_j);
        mfecovar_macrostate a_2 = ret_3;
        if (is_not_empty(a_2))
        {
          mfecovar_macrostate ret_1;
          if (((t_0_k_0 - t_0_i) >= 6))
          {
            mfecovar_macrostate ret_2 = nt_edangler(t_0_i, t_0_k_0);
            mfecovar_macrostate a_1 = ret_2;
            if (is_not_empty(a_1))
              {
                ret_1 = incl(a_1);
              }

            else
              {
                empty( ret_1);
              }

            erase( a_1);
          }

          else
            {
              empty( ret_1);
            }

          mfecovar_macrostate a_0 = ret_1;
          if (is_not_empty(a_0))
          {
            mfecovar_macrostate ans = combine(a_0, a_2);
            push_back_min( answers, ans);
          }

          erase( a_0);
        }

        erase( a_2);
      }

    }


  if (((t_0_j - t_0_i) >= 11))
    {
      for(      unsigned int t_0_k_1 = (t_0_i + 5); (t_0_k_1 <= (t_0_j - 6)); ++t_0_k_1)
      {
        mfecovar_macrostate ret_7 = nt_no_dl_ss_end(t_0_k_1, t_0_j);
        mfecovar_macrostate a_5 = ret_7;
        if (is_not_empty(a_5))
        {
          mfecovar_macrostate ret_5;
          if (((t_0_k_1 - t_0_i) >= 5))
          {
            mfecovar_macrostate ret_6 = nt_nodangle(t_0_i, t_0_k_1);
            mfecovar_macrostate a_4 = ret_6;
            if (is_not_empty(a_4))
              {
                ret_5 = incl(a_4);
              }

            else
              {
                empty( ret_5);
              }

            erase( a_4);
          }

          else
            {
              empty( ret_5);
            }

          mfecovar_macrostate a_3 = ret_5;
          if (is_not_empty(a_3))
          {
            mfecovar_macrostate ans = combine(a_3, a_5);
            push_back_min( answers, ans);
          }

          erase( a_3);
        }

        erase( a_5);
      }

    }


  if (((t_0_j - t_0_i) >= 12))
    {
      for(      unsigned int t_0_k_2 = (t_0_i + 5); (t_0_k_2 <= (t_0_j - 7)); ++t_0_k_2)
      {
        TUSubsequence ret_11;
        if (unpaired(t_0_seq, t_0_k_2, (t_0_k_2 + 1)))
          {
            ret_11 = BASE(t_0_seq, t_0_k_2, (t_0_k_2 + 1));
          }

        else
          {
            empty( ret_11);
          }

        TUSubsequence a_8 = ret_11;
        if (is_not_empty(a_8))
        {
          mfecovar_macrostate ret_12 = nt_no_dl_ss_end((t_0_k_2 + 1), t_0_j);
          mfecovar_macrostate a_9 = ret_12;
          if (is_not_empty(a_9))
          {
            mfecovar_macrostate ret_9;
            if (((t_0_k_2 - t_0_i) >= 5))
            {
              mfecovar_macrostate ret_10 = nt_nodangle(t_0_i, t_0_k_2);
              mfecovar_macrostate a_7 = ret_10;
              if (is_not_empty(a_7))
                {
                  ret_9 = incl(a_7);
                }

              else
                {
                  empty( ret_9);
                }

              erase( a_7);
            }

            else
              {
                empty( ret_9);
              }

            mfecovar_macrostate a_6 = ret_9;
            if (is_not_empty(a_6))
            {
              mfecovar_macrostate ans = acomb(a_6, a_8, a_9);
              push_back_min( answers, ans);
            }

            erase( a_6);
          }

          erase( a_9);
        }

        erase( a_8);
      }

    }

  mfecovar_macrostate eval = h(answers);
  erase( answers);
  ml_comps3_table.set( t_0_i, t_0_j, eval);
  return ml_comps3_table.get(t_0_i, t_0_j);
}

mfecovar_macrostate &  mfe_macrostate::nt_ml_comps4(unsigned int t_0_i, unsigned int t_0_j)
{
  if (ml_comps4_table.is_tabulated(t_0_i, t_0_j))
    {
      return ml_comps4_table.get(t_0_i, t_0_j);
    }

  mfecovar_macrostate answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 12))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 6); (t_0_k_0 <= (t_0_j - 6)); ++t_0_k_0)
      {
        mfecovar_macrostate ret_2 = nt_no_dl_ss_end(t_0_k_0, t_0_j);
        mfecovar_macrostate a_1 = ret_2;
        if (is_not_empty(a_1))
        {
          mfecovar_macrostate ret_1 = nt_block_dl(t_0_i, t_0_k_0);
          mfecovar_macrostate a_0 = ret_1;
          if (is_not_empty(a_0))
          {
            mfecovar_macrostate ans = combine(a_0, a_1);
            push_back_min( answers, ans);
          }

          erase( a_0);
        }

        erase( a_1);
      }

    }


  if (((t_0_j - t_0_i) >= 14))
    {
      for(      unsigned int t_0_k_1 = (t_0_i + 7); (t_0_k_1 <= (t_0_j - 7)); ++t_0_k_1)
      {
        mfecovar_macrostate ret_5 = nt_dl_or_ss_left_ss_end(t_0_k_1, t_0_j);
        mfecovar_macrostate a_3 = ret_5;
        if (is_not_empty(a_3))
        {
          mfecovar_macrostate ret_4 = nt_block_dlr(t_0_i, t_0_k_1);
          mfecovar_macrostate a_2 = ret_4;
          if (is_not_empty(a_2))
          {
            mfecovar_macrostate ans = combine(a_2, a_3);
            push_back_min( answers, ans);
          }

          erase( a_2);
        }

        erase( a_3);
      }

    }


  if (((t_0_j - t_0_i) >= 13))
    {
      for(      unsigned int t_0_k_2 = (t_0_i + 6); (t_0_k_2 <= (t_0_j - 7)); ++t_0_k_2)
      {
        TUSubsequence ret_8;
        if (unpaired(t_0_seq, t_0_k_2, (t_0_k_2 + 1)))
          {
            ret_8 = BASE(t_0_seq, t_0_k_2, (t_0_k_2 + 1));
          }

        else
          {
            empty( ret_8);
          }

        TUSubsequence a_5 = ret_8;
        if (is_not_empty(a_5))
        {
          mfecovar_macrostate ret_9 = nt_no_dl_ss_end((t_0_k_2 + 1), t_0_j);
          mfecovar_macrostate a_6 = ret_9;
          if (is_not_empty(a_6))
          {
            mfecovar_macrostate ret_7 = nt_block_dl(t_0_i, t_0_k_2);
            mfecovar_macrostate a_4 = ret_7;
            if (is_not_empty(a_4))
            {
              mfecovar_macrostate ans = acomb(a_4, a_5, a_6);
              push_back_min( answers, ans);
            }

            erase( a_4);
          }

          erase( a_6);
        }

        erase( a_5);
      }

    }

  mfecovar_macrostate eval = h(answers);
  erase( answers);
  ml_comps4_table.set( t_0_i, t_0_j, eval);
  return ml_comps4_table.get(t_0_i, t_0_j);
}

mfecovar_macrostate mfe_macrostate::nt_multiloop(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 12))
    {
      return mfecovar_macrostate_zero;
    }

  mfecovar_macrostate answers;
  empty(answers);
  empty( answers);


  mfecovar_macrostate ret_1;
  if (((t_0_j - t_0_i) >= 14))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_5 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_3 = ret_5;
        if (is_not_empty(a_3))
        {
          TUSubsequence ret_3;
          if (unpaired(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1)))
            {
              ret_3 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
            }

          else
            {
              empty( ret_3);
            }

          TUSubsequence a_1 = ret_3;
          if (is_not_empty(a_1))
          {
            TUSubsequence ret_2 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
            TUSubsequence a_0 = ret_2;
            if (is_not_empty(a_0))
            {
              mfecovar_macrostate ret_4 = nt_ml_comps1((t_0_i + 2), (t_0_j - 1));
              mfecovar_macrostate a_2 = ret_4;
              if (is_not_empty(a_2))
                {
                  ret_1 = mldl(a_0, a_1, a_2, a_3);
                }

              else
                {
                  empty( ret_1);
                }

              erase( a_2);
            }

            else
              {
                empty( ret_1);
              }

            erase( a_0);
          }

          else
            {
              empty( ret_1);
            }

          erase( a_1);
        }

        else
          {
            empty( ret_1);
          }

        erase( a_3);
      }

      else
      {
        empty( ret_1);
        empty( ret_1);
      }

    }

  else
    {
      empty( ret_1);
    }

  if (is_not_empty(ret_1))
    {
      push_back_min( answers, ret_1);
    }

  mfecovar_macrostate ret_6;
  if (((t_0_j - t_0_i) >= 13))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_10 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_7 = ret_10;
        if (is_not_empty(a_7))
        {
          TUSubsequence ret_8;
          if (unpaired(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1)))
            {
              ret_8 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
            }

          else
            {
              empty( ret_8);
            }

          TUSubsequence a_5 = ret_8;
          if (is_not_empty(a_5))
          {
            TUSubsequence ret_7 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
            TUSubsequence a_4 = ret_7;
            if (is_not_empty(a_4))
            {
              mfecovar_macrostate ret_9 = nt_ml_comps2((t_0_i + 2), (t_0_j - 1));
              mfecovar_macrostate a_6 = ret_9;
              if (is_not_empty(a_6))
                {
                  ret_6 = mladl(a_4, a_5, a_6, a_7);
                }

              else
                {
                  empty( ret_6);
                }

              erase( a_6);
            }

            else
              {
                empty( ret_6);
              }

            erase( a_4);
          }

          else
            {
              empty( ret_6);
            }

          erase( a_5);
        }

        else
          {
            empty( ret_6);
          }

        erase( a_7);
      }

      else
      {
        empty( ret_6);
        empty( ret_6);
      }

    }

  else
    {
      empty( ret_6);
    }

  if (is_not_empty(ret_6))
    {
      push_back_min( answers, ret_6);
    }

  mfecovar_macrostate ret_11;
  if (((t_0_j - t_0_i) >= 14))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_15 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_11 = ret_15;
        if (is_not_empty(a_11))
        {
          TUSubsequence ret_14;
          if (unpaired(t_0_seq, (t_0_j - 2), (t_0_j - 1)))
            {
              ret_14 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
            }

          else
            {
              empty( ret_14);
            }

          TUSubsequence a_10 = ret_14;
          if (is_not_empty(a_10))
          {
            TUSubsequence ret_12 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
            TUSubsequence a_8 = ret_12;
            if (is_not_empty(a_8))
            {
              mfecovar_macrostate ret_13 = nt_ml_comps3((t_0_i + 1), (t_0_j - 2));
              mfecovar_macrostate a_9 = ret_13;
              if (is_not_empty(a_9))
                {
                  ret_11 = mldr(a_8, a_9, a_10, a_11);
                }

              else
                {
                  empty( ret_11);
                }

              erase( a_9);
            }

            else
              {
                empty( ret_11);
              }

            erase( a_8);
          }

          else
            {
              empty( ret_11);
            }

          erase( a_10);
        }

        else
          {
            empty( ret_11);
          }

        erase( a_11);
      }

      else
      {
        empty( ret_11);
        empty( ret_11);
      }

    }

  else
    {
      empty( ret_11);
    }

  if (is_not_empty(ret_11))
    {
      push_back_min( answers, ret_11);
    }

  mfecovar_macrostate ret_16;
  if (((t_0_j - t_0_i) >= 13))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_20 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_15 = ret_20;
        if (is_not_empty(a_15))
        {
          TUSubsequence ret_19;
          if (unpaired(t_0_seq, (t_0_j - 2), (t_0_j - 1)))
            {
              ret_19 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
            }

          else
            {
              empty( ret_19);
            }

          TUSubsequence a_14 = ret_19;
          if (is_not_empty(a_14))
          {
            TUSubsequence ret_17 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
            TUSubsequence a_12 = ret_17;
            if (is_not_empty(a_12))
            {
              mfecovar_macrostate ret_18 = nt_ml_comps2((t_0_i + 1), (t_0_j - 2));
              mfecovar_macrostate a_13 = ret_18;
              if (is_not_empty(a_13))
                {
                  ret_16 = mladr(a_12, a_13, a_14, a_15);
                }

              else
                {
                  empty( ret_16);
                }

              erase( a_13);
            }

            else
              {
                empty( ret_16);
              }

            erase( a_12);
          }

          else
            {
              empty( ret_16);
            }

          erase( a_14);
        }

        else
          {
            empty( ret_16);
          }

        erase( a_15);
      }

      else
      {
        empty( ret_16);
        empty( ret_16);
      }

    }

  else
    {
      empty( ret_16);
    }

  if (is_not_empty(ret_16))
    {
      push_back_min( answers, ret_16);
    }

  mfecovar_macrostate ret_21;
  if (((t_0_j - t_0_i) >= 16))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_26 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_20 = ret_26;
        if (is_not_empty(a_20))
        {
          TUSubsequence ret_25;
          if (unpaired(t_0_seq, (t_0_j - 2), (t_0_j - 1)))
            {
              ret_25 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
            }

          else
            {
              empty( ret_25);
            }

          TUSubsequence a_19 = ret_25;
          if (is_not_empty(a_19))
          {
            TUSubsequence ret_23;
            if (unpaired(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1)))
              {
                ret_23 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
              }

            else
              {
                empty( ret_23);
              }

            TUSubsequence a_17 = ret_23;
            if (is_not_empty(a_17))
            {
              TUSubsequence ret_22 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
              TUSubsequence a_16 = ret_22;
              if (is_not_empty(a_16))
              {
                mfecovar_macrostate ret_24 = nt_ml_comps4((t_0_i + 2), (t_0_j - 2));
                mfecovar_macrostate a_18 = ret_24;
                if (is_not_empty(a_18))
                  {
                    ret_21 = mldlr(a_16, a_17, a_18, a_19, a_20);
                  }

                else
                  {
                    empty( ret_21);
                  }

                erase( a_18);
              }

              else
                {
                  empty( ret_21);
                }

              erase( a_16);
            }

            else
              {
                empty( ret_21);
              }

            erase( a_17);
          }

          else
            {
              empty( ret_21);
            }

          erase( a_19);
        }

        else
          {
            empty( ret_21);
          }

        erase( a_20);
      }

      else
      {
        empty( ret_21);
        empty( ret_21);
      }

    }

  else
    {
      empty( ret_21);
    }

  if (is_not_empty(ret_21))
    {
      push_back_min( answers, ret_21);
    }

  mfecovar_macrostate ret_27;
  if (((t_0_j - t_0_i) >= 14))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_32 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_25 = ret_32;
        if (is_not_empty(a_25))
        {
          TUSubsequence ret_31;
          if (unpaired(t_0_seq, (t_0_j - 2), (t_0_j - 1)))
            {
              ret_31 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
            }

          else
            {
              empty( ret_31);
            }

          TUSubsequence a_24 = ret_31;
          if (is_not_empty(a_24))
          {
            TUSubsequence ret_29;
            if (unpaired(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1)))
              {
                ret_29 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
              }

            else
              {
                empty( ret_29);
              }

            TUSubsequence a_22 = ret_29;
            if (is_not_empty(a_22))
            {
              TUSubsequence ret_28 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
              TUSubsequence a_21 = ret_28;
              if (is_not_empty(a_21))
              {
                mfecovar_macrostate ret_30 = nt_ml_comps2((t_0_i + 2), (t_0_j - 2));
                mfecovar_macrostate a_23 = ret_30;
                if (is_not_empty(a_23))
                  {
                    ret_27 = mladlr(a_21, a_22, a_23, a_24, a_25);
                  }

                else
                  {
                    empty( ret_27);
                  }

                erase( a_23);
              }

              else
                {
                  empty( ret_27);
                }

              erase( a_21);
            }

            else
              {
                empty( ret_27);
              }

            erase( a_22);
          }

          else
            {
              empty( ret_27);
            }

          erase( a_24);
        }

        else
          {
            empty( ret_27);
          }

        erase( a_25);
      }

      else
      {
        empty( ret_27);
        empty( ret_27);
      }

    }

  else
    {
      empty( ret_27);
    }

  if (is_not_empty(ret_27))
    {
      push_back_min( answers, ret_27);
    }

  mfecovar_macrostate ret_33;
  if (((t_0_j - t_0_i) >= 15))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_38 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_30 = ret_38;
        if (is_not_empty(a_30))
        {
          TUSubsequence ret_37;
          if (unpaired(t_0_seq, (t_0_j - 2), (t_0_j - 1)))
            {
              ret_37 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
            }

          else
            {
              empty( ret_37);
            }

          TUSubsequence a_29 = ret_37;
          if (is_not_empty(a_29))
          {
            TUSubsequence ret_35;
            if (unpaired(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1)))
              {
                ret_35 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
              }

            else
              {
                empty( ret_35);
              }

            TUSubsequence a_27 = ret_35;
            if (is_not_empty(a_27))
            {
              TUSubsequence ret_34 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
              TUSubsequence a_26 = ret_34;
              if (is_not_empty(a_26))
              {
                mfecovar_macrostate ret_36 = nt_ml_comps1((t_0_i + 2), (t_0_j - 2));
                mfecovar_macrostate a_28 = ret_36;
                if (is_not_empty(a_28))
                  {
                    ret_33 = mldladr(a_26, a_27, a_28, a_29, a_30);
                  }

                else
                  {
                    empty( ret_33);
                  }

                erase( a_28);
              }

              else
                {
                  empty( ret_33);
                }

              erase( a_26);
            }

            else
              {
                empty( ret_33);
              }

            erase( a_27);
          }

          else
            {
              empty( ret_33);
            }

          erase( a_29);
        }

        else
          {
            empty( ret_33);
          }

        erase( a_30);
      }

      else
      {
        empty( ret_33);
        empty( ret_33);
      }

    }

  else
    {
      empty( ret_33);
    }

  if (is_not_empty(ret_33))
    {
      push_back_min( answers, ret_33);
    }

  mfecovar_macrostate ret_39;
  if (((t_0_j - t_0_i) >= 15))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_44 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_35 = ret_44;
        if (is_not_empty(a_35))
        {
          TUSubsequence ret_43;
          if (unpaired(t_0_seq, (t_0_j - 2), (t_0_j - 1)))
            {
              ret_43 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
            }

          else
            {
              empty( ret_43);
            }

          TUSubsequence a_34 = ret_43;
          if (is_not_empty(a_34))
          {
            TUSubsequence ret_41;
            if (unpaired(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1)))
              {
                ret_41 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
              }

            else
              {
                empty( ret_41);
              }

            TUSubsequence a_32 = ret_41;
            if (is_not_empty(a_32))
            {
              TUSubsequence ret_40 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
              TUSubsequence a_31 = ret_40;
              if (is_not_empty(a_31))
              {
                mfecovar_macrostate ret_42 = nt_ml_comps3((t_0_i + 2), (t_0_j - 2));
                mfecovar_macrostate a_33 = ret_42;
                if (is_not_empty(a_33))
                  {
                    ret_39 = mladldr(a_31, a_32, a_33, a_34, a_35);
                  }

                else
                  {
                    empty( ret_39);
                  }

                erase( a_33);
              }

              else
                {
                  empty( ret_39);
                }

              erase( a_31);
            }

            else
              {
                empty( ret_39);
              }

            erase( a_32);
          }

          else
            {
              empty( ret_39);
            }

          erase( a_34);
        }

        else
          {
            empty( ret_39);
          }

        erase( a_35);
      }

      else
      {
        empty( ret_39);
        empty( ret_39);
      }

    }

  else
    {
      empty( ret_39);
    }

  if (is_not_empty(ret_39))
    {
      push_back_min( answers, ret_39);
    }

  mfecovar_macrostate ret_45;
  if (((t_0_j - t_0_i) >= 12))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_48 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_38 = ret_48;
        if (is_not_empty(a_38))
        {
          TUSubsequence ret_46 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
          TUSubsequence a_36 = ret_46;
          if (is_not_empty(a_36))
          {
            mfecovar_macrostate ret_47 = nt_ml_comps2((t_0_i + 1), (t_0_j - 1));
            mfecovar_macrostate a_37 = ret_47;
            if (is_not_empty(a_37))
              {
                ret_45 = ml(a_36, a_37, a_38);
              }

            else
              {
                empty( ret_45);
              }

            erase( a_37);
          }

          else
            {
              empty( ret_45);
            }

          erase( a_36);
        }

        else
          {
            empty( ret_45);
          }

        erase( a_38);
      }

      else
      {
        empty( ret_45);
        empty( ret_45);
      }

    }

  else
    {
      empty( ret_45);
    }

  if (is_not_empty(ret_45))
    {
      push_back_min( answers, ret_45);
    }

  mfecovar_macrostate eval = h(answers);
  erase( answers);
  return eval;
}

mfecovar_macrostate &  mfe_macrostate::nt_no_dl_no_ss_end(unsigned int t_0_i, unsigned int t_0_j)
{
  if (no_dl_no_ss_end_table.is_tabulated(t_0_i, t_0_j))
    {
      return no_dl_no_ss_end_table.get(t_0_i, t_0_j);
    }

  mfecovar_macrostate answers;
  empty(answers);
  empty( answers);
  mfecovar_macrostate ret_0 = nt_ml_comps2(t_0_i, t_0_j);
  if (is_not_empty(ret_0))
    {
      push_back_min( answers, ret_0);
    }

  mfecovar_macrostate ret_1;
  if (((t_0_j - t_0_i) >= 5))
  {
    mfecovar_macrostate ret_2 = nt_nodangle(t_0_i, t_0_j);
    mfecovar_macrostate a_0 = ret_2;
    if (is_not_empty(a_0))
      {
        ret_1 = incl(a_0);
      }

    else
      {
        empty( ret_1);
      }

    erase( a_0);
  }

  else
    {
      empty( ret_1);
    }

  if (is_not_empty(ret_1))
    {
      push_back_min( answers, ret_1);
    }

  mfecovar_macrostate eval = h(answers);
  erase( answers);
  no_dl_no_ss_end_table.set( t_0_i, t_0_j, eval);
  return no_dl_no_ss_end_table.get(t_0_i, t_0_j);
}

mfecovar_macrostate &  mfe_macrostate::nt_no_dl_ss_end(unsigned int t_0_i, unsigned int t_0_j)
{
  if (no_dl_ss_end_table.is_tabulated(t_0_i, t_0_j))
    {
      return no_dl_ss_end_table.get(t_0_i, t_0_j);
    }

  mfecovar_macrostate answers;
  empty(answers);
  empty( answers);
  mfecovar_macrostate ret_0 = nt_ml_comps3(t_0_i, t_0_j);
  if (is_not_empty(ret_0))
    {
      push_back_min( answers, ret_0);
    }

  mfecovar_macrostate ret_1;
  if (((t_0_j - t_0_i) >= 6))
  {
    mfecovar_macrostate ret_2 = nt_edangler(t_0_i, t_0_j);
    mfecovar_macrostate a_0 = ret_2;
    if (is_not_empty(a_0))
      {
        ret_1 = incl(a_0);
      }

    else
      {
        empty( ret_1);
      }

    erase( a_0);
  }

  else
    {
      empty( ret_1);
    }

  if (is_not_empty(ret_1))
    {
      push_back_min( answers, ret_1);
    }


  if (((t_0_j - t_0_i) >= 7))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 6); (t_0_k_0 <= (t_0_j - 1)); ++t_0_k_0)
      {
        TUSubsequence ret_6;
        if (unpaired(t_0_seq, t_0_k_0, t_0_j))
          {
            ret_6 = REGION(t_0_seq, t_0_k_0, t_0_j);
          }

        else
          {
            empty( ret_6);
          }

        TUSubsequence a_3 = ret_6;
        if (is_not_empty(a_3))
        {
          mfecovar_macrostate ret_4;
          if (((t_0_k_0 - t_0_i) >= 6))
          {
            mfecovar_macrostate ret_5 = nt_edangler(t_0_i, t_0_k_0);
            mfecovar_macrostate a_2 = ret_5;
            if (is_not_empty(a_2))
              {
                ret_4 = incl(a_2);
              }

            else
              {
                empty( ret_4);
              }

            erase( a_2);
          }

          else
            {
              empty( ret_4);
            }

          mfecovar_macrostate a_1 = ret_4;
          if (is_not_empty(a_1))
          {
            mfecovar_macrostate ans = addss(a_1, a_3);
            push_back_min( answers, ans);
          }

          erase( a_1);
        }

        erase( a_3);
      }

    }

  mfecovar_macrostate eval = h(answers);
  erase( answers);
  no_dl_ss_end_table.set( t_0_i, t_0_j, eval);
  return no_dl_ss_end_table.get(t_0_i, t_0_j);
}

mfecovar_macrostate &  mfe_macrostate::nt_nodangle(unsigned int t_0_i, unsigned int t_0_j)
{
  if (nodangle_table.is_tabulated(t_0_i, t_0_j))
    {
      return nodangle_table.get(t_0_i, t_0_j);
    }

  mfecovar_macrostate answers;
  empty(answers);
  empty( answers);
  mfecovar_macrostate ret_0;
  if (((t_0_j - t_0_i) >= 5))
  {
    TUSubsequence ret_3 = LOC(t_0_seq, t_0_j, t_0_j);
    TUSubsequence a_2 = ret_3;
    if (is_not_empty(a_2))
    {
      TUSubsequence ret_1 = LOC(t_0_seq, t_0_i, t_0_i);
      TUSubsequence a_0 = ret_1;
      if (is_not_empty(a_0))
      {
        mfecovar_macrostate ret_2 = nt_strong(t_0_i, t_0_j);
        mfecovar_macrostate a_1 = ret_2;
        if (is_not_empty(a_1))
          {
            ret_0 = drem(a_0, a_1, a_2);
          }

        else
          {
            empty( ret_0);
          }

        erase( a_1);
      }

      else
        {
          empty( ret_0);
        }

      erase( a_0);
    }

    else
      {
        empty( ret_0);
      }

    erase( a_2);
  }

  else
    {
      empty( ret_0);
    }

  if (is_not_empty(ret_0))
    {
      push_back_min( answers, ret_0);
    }

  mfecovar_macrostate eval = h(answers);
  erase( answers);
  nodangle_table.set( t_0_i, t_0_j, eval);
  return nodangle_table.get(t_0_i, t_0_j);
}

mfecovar_macrostate &  mfe_macrostate::nt_noleft_dangle(unsigned int t_0_i)
{
  if (noleft_dangle_table.is_tabulated(t_0_i))
    {
      return noleft_dangle_table.get(t_0_i);
    }

  mfecovar_macrostate answers;
  empty(answers);
  empty( answers);

  if (((t_0_right_most - t_0_i) >= 6))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 6); (t_0_k_0 <= t_0_right_most); ++t_0_k_0)
      {
        mfecovar_macrostate ret_2;
        empty(ret_2);
        empty( ret_2);
        mfecovar_macrostate ret_3 = nt_left_dangle(t_0_k_0);
        if (is_not_empty(ret_3))
          {
            push_back_min( ret_2, ret_3);
          }

        mfecovar_macrostate ret_4 = nt_left_unpaired(t_0_k_0);
        if (is_not_empty(ret_4))
          {
            push_back_min( ret_2, ret_4);
          }

        finalize( ret_2);
        mfecovar_macrostate a_1 = ret_2;
        if (is_not_empty(a_1))
        {
          mfecovar_macrostate ret_1 = nt_edangler(t_0_i, t_0_k_0);
          mfecovar_macrostate a_0 = ret_1;
          if (is_not_empty(a_0))
            {
              mfecovar_macrostate x_1 = a_1;
              mfecovar_macrostate ans = cadd_Pr_Pr(a_0, x_1);
              push_back_min( answers, ans);

            }

          erase( a_0);
        }

        erase( a_1);
      }

    }


  if (((t_0_right_most - t_0_i) >= 5))
    {
      for(      unsigned int t_0_k_1 = (t_0_i + 5); (t_0_k_1 <= t_0_right_most); ++t_0_k_1)
      {
        mfecovar_macrostate ret_7;
        empty(ret_7);
        empty( ret_7);
        mfecovar_macrostate ret_8 = nt_noleft_dangle(t_0_k_1);
        if (is_not_empty(ret_8))
          {
            push_back_min( ret_7, ret_8);
          }

        mfecovar_macrostate ret_9;
        if ((((t_0_right_most - t_0_k_1) >= 0) && ((t_0_right_most - t_0_k_1) <= 0)))
        {
          TUSubsequence ret_10 = LOC(t_0_seq, t_0_k_1, t_0_k_1);
          TUSubsequence a_4 = ret_10;
          if (is_not_empty(a_4))
            {
              ret_9 = nil(a_4);
            }

          else
            {
              empty( ret_9);
            }

          erase( a_4);
        }

        else
          {
            empty( ret_9);
          }

        if (is_not_empty(ret_9))
          {
            push_back_min( ret_7, ret_9);
          }

        finalize( ret_7);
        mfecovar_macrostate a_3 = ret_7;
        if (is_not_empty(a_3))
        {
          mfecovar_macrostate ret_6 = nt_nodangle(t_0_i, t_0_k_1);
          mfecovar_macrostate a_2 = ret_6;
          if (is_not_empty(a_2))
            {
              mfecovar_macrostate x_3 = a_3;
              mfecovar_macrostate ans = cadd_Pr_Pr_Pr(a_2, x_3);
              push_back_min( answers, ans);

            }

          erase( a_2);
        }

        erase( a_3);
      }

    }


  if (((t_0_right_most - t_0_i) >= 11))
    {
      for(      unsigned int t_0_k_2 = (t_0_i + 5); (t_0_k_2 <= (t_0_right_most - 6)); ++t_0_k_2)
      {
        TUSubsequence ret_13;
        if (unpaired(t_0_seq, t_0_k_2, (t_0_k_2 + 1)))
          {
            ret_13 = BASE(t_0_seq, t_0_k_2, (t_0_k_2 + 1));
          }

        else
          {
            empty( ret_13);
          }

        TUSubsequence a_6 = ret_13;
        if (is_not_empty(a_6))
        {
          mfecovar_macrostate ret_14 = nt_noleft_dangle((t_0_k_2 + 1));
          mfecovar_macrostate a_7 = ret_14;
          if (is_not_empty(a_7))
          {
            mfecovar_macrostate ret_12 = nt_nodangle(t_0_i, t_0_k_2);
            mfecovar_macrostate a_5 = ret_12;
            if (is_not_empty(a_5))
            {
              mfecovar_macrostate ans = ambd_Pr(a_5, a_6, a_7);
              push_back_min( answers, ans);
            }

            erase( a_5);
          }

          erase( a_7);
        }

        erase( a_6);
      }

    }

  mfecovar_macrostate eval = h(answers);
  erase( answers);
  noleft_dangle_table.set( t_0_i, eval);
  return noleft_dangle_table.get(t_0_i);
}

mfecovar_macrostate mfe_macrostate::nt_rightB(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 8))
    {
      return mfecovar_macrostate_zero;
    }

  mfecovar_macrostate answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 8))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
        {
          for(          unsigned int t_0_k_0 = (((t_0_j - (t_0_i + 6)) >= 31)) ? ((t_0_j - 31)) : ((t_0_i + 6)); (t_0_k_0 <= (t_0_j - 2)); ++t_0_k_0)
          {
            TUSubsequence ret_4 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
            TUSubsequence a_3 = ret_4;
            if (is_not_empty(a_3))
            {
              TUSubsequence ret_3;
              if ((maxsize(t_0_seq, t_0_k_0, (t_0_j - 1), 30) && unpaired(t_0_seq, t_0_k_0, (t_0_j - 1))))
                {
                  ret_3 = REGION(t_0_seq, t_0_k_0, (t_0_j - 1));
                }

              else
                {
                  empty( ret_3);
                }

              TUSubsequence a_2 = ret_3;
              if (is_not_empty(a_2))
              {
                TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                TUSubsequence a_0 = ret_1;
                if (is_not_empty(a_0))
                {
                  mfecovar_macrostate ret_2 = nt_strong((t_0_i + 1), t_0_k_0);
                  mfecovar_macrostate a_1 = ret_2;
                  if (is_not_empty(a_1))
                  {
                    mfecovar_macrostate ans = br(a_0, a_1, a_2, a_3);
                    push_back_min( answers, ans);
                  }

                  erase( a_1);
                }

                erase( a_0);
              }

              erase( a_2);
            }

            erase( a_3);
          }

        }

      else
        {
          empty( answers);
        }

    }

  mfecovar_macrostate eval = h(answers);
  erase( answers);
  return eval;
}

mfecovar_macrostate mfe_macrostate::nt_stack(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 7))
    {
      return mfecovar_macrostate_zero;
    }

  mfecovar_macrostate answers;
  empty(answers);
  empty( answers);
  mfecovar_macrostate ret_0;
  if (((t_0_j - t_0_i) >= 7))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_3 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_2 = ret_3;
        if (is_not_empty(a_2))
        {
          TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
          TUSubsequence a_0 = ret_1;
          if (is_not_empty(a_0))
          {
            mfecovar_macrostate ret_2 = nt_weak((t_0_i + 1), (t_0_j - 1));
            mfecovar_macrostate a_1 = ret_2;
            if (is_not_empty(a_1))
              {
                ret_0 = sr(a_0, a_1, a_2);
              }

            else
              {
                empty( ret_0);
              }

            erase( a_1);
          }

          else
            {
              empty( ret_0);
            }

          erase( a_0);
        }

        else
          {
            empty( ret_0);
          }

        erase( a_2);
      }

      else
      {
        empty( ret_0);
        empty( ret_0);
      }

    }

  else
    {
      empty( ret_0);
    }

  if (is_not_empty(ret_0))
    {
      push_back_min( answers, ret_0);
    }

  mfecovar_macrostate eval = h(answers);
  erase( answers);
  return eval;
}

mfecovar_macrostate &  mfe_macrostate::nt_strong(unsigned int t_0_i, unsigned int t_0_j)
{
  if (strong_table.is_tabulated(t_0_i, t_0_j))
    {
      return strong_table.get(t_0_i, t_0_j);
    }

  mfecovar_macrostate answers;
  empty(answers);
  empty( answers);
  mfecovar_macrostate ret_0;
  empty( ret_0);
  if (allowLonelyBasepairs(t_0_seq, t_0_i, t_0_j, false))
  {
    mfecovar_macrostate ret_1;
    if (((t_0_j - t_0_i) >= 7))
      {
        if (basepair(t_0_seq, t_0_i, t_0_j))
        {
          TUSubsequence ret_4 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
          TUSubsequence a_2 = ret_4;
          if (is_not_empty(a_2))
          {
            TUSubsequence ret_2 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
            TUSubsequence a_0 = ret_2;
            if (is_not_empty(a_0))
            {
              mfecovar_macrostate ret_3 = nt_weak((t_0_i + 1), (t_0_j - 1));
              mfecovar_macrostate a_1 = ret_3;
              if (is_not_empty(a_1))
                {
                  ret_1 = sr(a_0, a_1, a_2);
                }

              else
                {
                  empty( ret_1);
                }

              erase( a_1);
            }

            else
              {
                empty( ret_1);
              }

            erase( a_0);
          }

          else
            {
              empty( ret_1);
            }

          erase( a_2);
        }

        else
        {
          empty( ret_1);
          empty( ret_1);
        }

      }

    else
      {
        empty( ret_1);
      }

    ret_0 = ret_1;
  }

  if (is_not_empty(ret_0))
    {
      push_back_min( answers, ret_0);
    }

  mfecovar_macrostate ret_5;
  empty( ret_5);
  if (allowLonelyBasepairs(t_0_seq, t_0_i, t_0_j, true))
  {
    mfecovar_macrostate ret_6 = nt_weak(t_0_i, t_0_j);
    ret_5 = ret_6;
  }

  if (is_not_empty(ret_5))
    {
      push_back_min( answers, ret_5);
    }

  mfecovar_macrostate eval = h(answers);
  erase( answers);
  strong_table.set( t_0_i, t_0_j, eval);
  return strong_table.get(t_0_i, t_0_j);
}

mfecovar_macrostate mfe_macrostate::nt_struct()
{
  mfecovar_macrostate answers;
  empty(answers);
  empty( answers);
  mfecovar_macrostate ret_0 = nt_left_dangle(t_0_left_most);
  if (is_not_empty(ret_0))
    {
      push_back_min( answers, ret_0);
    }

  mfecovar_macrostate ret_1;
  if (((t_0_right_most - t_0_left_most) >= 5))
  {
    mfecovar_macrostate ret_2 = nt_noleft_dangle(t_0_left_most);
    mfecovar_macrostate a_0 = ret_2;
    if (is_not_empty(a_0))
      {
        ret_1 = trafo(a_0);
      }

    else
      {
        empty( ret_1);
      }

    erase( a_0);
  }

  else
    {
      empty( ret_1);
    }

  if (is_not_empty(ret_1))
    {
      push_back_min( answers, ret_1);
    }

  mfecovar_macrostate ret_3 = nt_left_unpaired(t_0_left_most);
  if (is_not_empty(ret_3))
    {
      push_back_min( answers, ret_3);
    }

  mfecovar_macrostate eval = h(answers);
  erase( answers);
  return eval;
}

mfecovar_macrostate &  mfe_macrostate::nt_weak(unsigned int t_0_i, unsigned int t_0_j)
{
  if (weak_table.is_tabulated(t_0_i, t_0_j))
    {
      return weak_table.get(t_0_i, t_0_j);
    }

  mfecovar_macrostate answers;
  empty(answers);
  empty( answers);
  mfecovar_macrostate ret_0 = nt_stack(t_0_i, t_0_j);
  if (is_not_empty(ret_0))
    {
      push_back_min( answers, ret_0);
    }

  mfecovar_macrostate ret_1 = nt_hairpin(t_0_i, t_0_j);
  if (is_not_empty(ret_1))
    {
      push_back_min( answers, ret_1);
    }

  mfecovar_macrostate ret_2 = nt_multiloop(t_0_i, t_0_j);
  if (is_not_empty(ret_2))
    {
      push_back_min( answers, ret_2);
    }

  mfecovar_macrostate ret_3 = nt_leftB(t_0_i, t_0_j);
  if (is_not_empty(ret_3))
    {
      push_back_min( answers, ret_3);
    }

  mfecovar_macrostate ret_4 = nt_rightB(t_0_i, t_0_j);
  if (is_not_empty(ret_4))
    {
      push_back_min( answers, ret_4);
    }

  mfecovar_macrostate ret_5 = nt_iloop(t_0_i, t_0_j);
  if (is_not_empty(ret_5))
    {
      push_back_min( answers, ret_5);
    }

  mfecovar_macrostate eval = h(answers);
  erase( answers);
  weak_table.set( t_0_i, t_0_j, eval);
  return weak_table.get(t_0_i, t_0_j);
}


mfecovar_macrostate mfe_macrostate::acomb(const mfecovar_macrostate & le, const TUSubsequence & b, const mfecovar_macrostate & re)
{
#line 2315 "../../../../ali_macrostate.gap"
  mfecovar_macrostate res = le;
  res.mfe = ((le.mfe + re.mfe) +  ( (min(dr_energy(le.lastStem, le.lastStem), dl_energy(re.firstStem, re.firstStem)) / float(rows(b))) ) );
  res.covar = (le.covar + re.covar);
  res.firstStem = le.firstStem;
  res.lastStem = re.lastStem;
  return res;
#line 3228 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::addss(const mfecovar_macrostate & e, const TUSubsequence & rb)
{
#line 2280 "../../../../ali_macrostate.gap"
  mfecovar_macrostate res = e;
  res.mfe = (res.mfe +  ( (ss_energy(rb) / float(rows(rb))) ) );
  res.firstStem = e.firstStem;
  res.lastStem = e.lastStem;
  return res;
#line 3239 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::ambd(const mfecovar_macrostate & le, const TUSubsequence & b, const mfecovar_macrostate & re)
{
#line 2075 "../../../../ali_macrostate.gap"
  mfecovar_macrostate res = le;
  res.mfe = ((le.mfe + re.mfe) +  ( (min(dr_energy(le.firstStem, le.firstStem), dl_energy(re.firstStem, re.firstStem)) / float(rows(b))) ) );
  res.firstStem = le.firstStem;
  return res;
#line 3249 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::ambd_Pr(const mfecovar_macrostate & le, const TUSubsequence & b, const mfecovar_macrostate & re)
{
#line 2082 "../../../../ali_macrostate.gap"
  mfecovar_macrostate res = le;
  res.mfe = ((le.mfe + re.mfe) +  ( (min(dr_energy(le.firstStem, le.firstStem), dl_energy(re.firstStem, re.firstStem)) / float(rows(b))) ) );
  res.firstStem = le.firstStem;
  return res;
#line 3259 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::bl(const TUSubsequence & lb, const TUSubsequence & lregion, const mfecovar_macrostate & e, const TUSubsequence & rb)
{
#line 2148 "../../../../ali_macrostate.gap"
  mfecovar_macrostate res = e;
  res.firstStem.seq = lb.seq;
  res.firstStem.i = lb.i;
  res.firstStem.j = rb.j;
  res.mfe = (res.mfe +  ( (bl_energy(lregion, rb) / float(rows(lb))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 3272 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::br(const TUSubsequence & lb, const mfecovar_macrostate & e, const TUSubsequence & rregion, const TUSubsequence & rb)
{
#line 2159 "../../../../ali_macrostate.gap"
  mfecovar_macrostate res = e;
  res.firstStem.seq = lb.seq;
  res.firstStem.i = lb.i;
  res.firstStem.j = rb.j;
  res.mfe = (res.mfe +  ( (br_energy(lb, rregion) / float(rows(lb))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 3285 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::cadd(const mfecovar_macrostate & le, const mfecovar_macrostate & re)
{
#line 2059 "../../../../ali_macrostate.gap"
  return  ( (le + re) ) ;
#line 3292 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::cadd_Pr(const mfecovar_macrostate & le, const mfecovar_macrostate & re)
{
#line 2063 "../../../../ali_macrostate.gap"
  return  ( (le + re) ) ;
#line 3299 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::cadd_Pr_Pr(const mfecovar_macrostate & le, const mfecovar_macrostate & re)
{
#line 2067 "../../../../ali_macrostate.gap"
  return  ( (le + re) ) ;
#line 3306 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::cadd_Pr_Pr_Pr(const mfecovar_macrostate & le, const mfecovar_macrostate & re)
{
#line 2071 "../../../../ali_macrostate.gap"
  return  ( (le + re) ) ;
#line 3313 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::combine(const mfecovar_macrostate & le, const mfecovar_macrostate & re)
{
#line 2311 "../../../../ali_macrostate.gap"
  return  ( (le + re) ) ;
#line 3320 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::drem(const TUSubsequence & lloc, const mfecovar_macrostate & e, const TUSubsequence & rloc)
{
#line 2119 "../../../../ali_macrostate.gap"
  mfecovar_macrostate res = e;
  res.mfe = (e.mfe +  ( (termau_energy(e.firstStem, e.firstStem) / float(rows(lloc))) ) );
  return res;
#line 3329 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::edl(const TUSubsequence & lb, const mfecovar_macrostate & e, const TUSubsequence & rloc)
{
#line 2098 "../../../../ali_macrostate.gap"
  mfecovar_macrostate res = e;
  res.mfe = (e.mfe +  ( ( ( (dl_energy(e.firstStem, e.firstStem) + termau_energy(e.firstStem, e.firstStem)) )  / float(rows(lb))) ) );
  res.firstStem = e.firstStem;
  return res;
#line 3339 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::edlr(const TUSubsequence & lb, const mfecovar_macrostate & e, const TUSubsequence & rb)
{
#line 2112 "../../../../ali_macrostate.gap"
  mfecovar_macrostate res = e;
  res.mfe = (e.mfe +  ( ( ( (ext_mismatch_energy(e.firstStem, e.firstStem) + termau_energy(e.firstStem, e.firstStem)) )  / float(rows(lb))) ) );
  res.firstStem = e.firstStem;
  return res;
#line 3349 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::edr(const TUSubsequence & lloc, const mfecovar_macrostate & e, const TUSubsequence & rb)
{
#line 2105 "../../../../ali_macrostate.gap"
  mfecovar_macrostate res = e;
  res.mfe = (e.mfe +  ( ( ( (dr_energy(e.firstStem, e.firstStem) + termau_energy(e.firstStem, e.firstStem)) )  / float(rows(rb))) ) );
  res.firstStem = e.firstStem;
  return res;
#line 3359 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::h(mfecovar_macrostate i)
{
  return i;
  return minimum(i);
}

mfecovar_macrostate mfe_macrostate::hl(const TUSubsequence & lb, const TUSubsequence & region, const TUSubsequence & rb)
{
#line 2136 "../../../../ali_macrostate.gap"
  mfecovar_macrostate res;
  res.firstStem.seq = lb.seq;
  res.firstStem.i = lb.i;
  res.firstStem.j = rb.j;
  res.mfe = (hl_energy(region) / float(rows(lb)));
  res.covar = covscore(lb, lb.i, rb.i);
  return res;
#line 3378 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::il(const TUSubsequence & lb, const TUSubsequence & lregion, const mfecovar_macrostate & e, const TUSubsequence & rregion, const TUSubsequence & rb)
{
#line 2170 "../../../../ali_macrostate.gap"
  mfecovar_macrostate res = e;
  res.firstStem.seq = lb.seq;
  res.firstStem.i = lb.i;
  res.firstStem.j = rb.j;
  res.mfe = (res.mfe +  ( (il_energy(lregion, rregion) / float(rows(lb))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 3391 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::incl(const mfecovar_macrostate & e)
{
#line 2302 "../../../../ali_macrostate.gap"
  mfecovar_macrostate res = e;
  res.mfe = (res.mfe + ul_energy());
  res.firstStem = e.firstStem;
  res.lastStem = e.firstStem;
  return res;
#line 3402 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::ml(const TUSubsequence & lb, const mfecovar_macrostate & e, const TUSubsequence & rb)
{
#line 2181 "../../../../ali_macrostate.gap"
  mfecovar_macrostate res = e;
  res.firstStem.seq = lb.seq;
  res.firstStem.i = lb.i;
  res.firstStem.j = rb.j;
  res.mfe = (((res.mfe + ml_energy()) + ul_energy()) +  ( (termau_energy(res.firstStem, res.firstStem) / float(rows(lb))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 3415 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::mladl(const TUSubsequence & lb, const TUSubsequence & dl, const mfecovar_macrostate & e, const TUSubsequence & rb)
{
#line 2269 "../../../../ali_macrostate.gap"
  mfecovar_macrostate res = e;
  res.firstStem.seq = lb.seq;
  res.firstStem.i = lb.i;
  res.firstStem.j = rb.j;
  res.mfe = (((res.mfe + ml_energy()) + ul_energy()) +  ( ( ( (min(dli_energy(res.firstStem, res.firstStem), dl_energy(e.firstStem, e.firstStem)) + termau_energy(res.firstStem, res.firstStem)) )  / float(rows(lb))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 3428 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::mladldr(const TUSubsequence & lb, const TUSubsequence & dl, const mfecovar_macrostate & e, const TUSubsequence & dr, const TUSubsequence & rb)
{
#line 2247 "../../../../ali_macrostate.gap"
  mfecovar_macrostate res = e;
  res.firstStem.seq = lb.seq;
  res.firstStem.i = lb.i;
  res.firstStem.j = rb.j;
  res.mfe = (((res.mfe + ml_energy()) + ul_energy()) +  ( ( ( ((min(dli_energy(res.firstStem, res.firstStem), dl_energy(e.firstStem, e.firstStem)) + dri_energy(res.firstStem, res.firstStem)) + termau_energy(res.firstStem, res.firstStem)) )  / float(rows(lb))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 3441 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::mladlr(const TUSubsequence & lb, const TUSubsequence & dl, const mfecovar_macrostate & e, const TUSubsequence & dr, const TUSubsequence & rb)
{
#line 2225 "../../../../ali_macrostate.gap"
  mfecovar_macrostate res = e;
  res.firstStem.seq = lb.seq;
  res.firstStem.i = lb.i;
  res.firstStem.j = rb.j;
  res.mfe = (((res.mfe + ml_energy()) + ul_energy()) +  ( ( ( ((min(dli_energy(res.firstStem, res.firstStem), dl_energy(e.firstStem, e.firstStem)) + min(dri_energy(res.firstStem, res.firstStem), dr_energy(e.lastStem, e.lastStem))) + termau_energy(res.firstStem, res.firstStem)) )  / float(rows(lb))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 3454 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::mladr(const TUSubsequence & lb, const mfecovar_macrostate & e, const TUSubsequence & dr, const TUSubsequence & rb)
{
#line 2203 "../../../../ali_macrostate.gap"
  mfecovar_macrostate res = e;
  res.firstStem.seq = lb.seq;
  res.firstStem.i = lb.i;
  res.firstStem.j = rb.j;
  res.mfe = (((res.mfe + ml_energy()) + ul_energy()) +  ( ( ( (min(dri_energy(res.firstStem, res.firstStem), dr_energy(e.lastStem, e.lastStem)) + termau_energy(res.firstStem, res.firstStem)) )  / float(rows(lb))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 3467 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::mldl(const TUSubsequence & lb, const TUSubsequence & dl, const mfecovar_macrostate & e, const TUSubsequence & rb)
{
#line 2258 "../../../../ali_macrostate.gap"
  mfecovar_macrostate res = e;
  res.firstStem.seq = lb.seq;
  res.firstStem.i = lb.i;
  res.firstStem.j = rb.j;
  res.mfe = (((res.mfe + ml_energy()) + ul_energy()) +  ( ( ( (dli_energy(res.firstStem, res.firstStem) + termau_energy(res.firstStem, res.firstStem)) )  / float(rows(lb))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 3480 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::mldladr(const TUSubsequence & lb, const TUSubsequence & dl, const mfecovar_macrostate & e, const TUSubsequence & dr, const TUSubsequence & rb)
{
#line 2236 "../../../../ali_macrostate.gap"
  mfecovar_macrostate res = e;
  res.firstStem.seq = lb.seq;
  res.firstStem.i = lb.i;
  res.firstStem.j = rb.j;
  res.mfe = (((res.mfe + ml_energy()) + ul_energy()) +  ( ( ( ((dli_energy(res.firstStem, res.firstStem) + min(dri_energy(res.firstStem, res.firstStem), dr_energy(e.lastStem, e.lastStem))) + termau_energy(res.firstStem, res.firstStem)) )  / float(rows(lb))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 3493 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::mldlr(const TUSubsequence & lb, const TUSubsequence & dl, const mfecovar_macrostate & e, const TUSubsequence & dr, const TUSubsequence & rb)
{
#line 2214 "../../../../ali_macrostate.gap"
  mfecovar_macrostate res = e;
  res.firstStem.seq = lb.seq;
  res.firstStem.i = lb.i;
  res.firstStem.j = rb.j;
  res.mfe = (((res.mfe + ml_energy()) + ul_energy()) +  ( ( ( (ml_mismatch_energy(res.firstStem, res.firstStem) + termau_energy(res.firstStem, res.firstStem)) )  / float(rows(lb))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 3506 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::mldr(const TUSubsequence & lb, const mfecovar_macrostate & e, const TUSubsequence & dr, const TUSubsequence & rb)
{
#line 2192 "../../../../ali_macrostate.gap"
  mfecovar_macrostate res = e;
  res.firstStem.seq = lb.seq;
  res.firstStem.i = lb.i;
  res.firstStem.j = rb.j;
  res.mfe = (((res.mfe + ml_energy()) + ul_energy()) +  ( ( ( (dri_energy(res.firstStem, res.firstStem) + termau_energy(res.firstStem, res.firstStem)) )  / float(rows(lb))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 3519 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::nil(const TUSubsequence & loc)
{
#line 2089 "../../../../ali_macrostate.gap"
  mfecovar_macrostate res;
  res.mfe = 0;
  res.covar = 0;
  res.firstStem = loc;
  res.lastStem = loc;
  return res;
#line 3531 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::sadd(const TUSubsequence & lb, const mfecovar_macrostate & e)
{
#line 2042 "../../../../ali_macrostate.gap"
  mfecovar_macrostate res = e;
  int sbase_sum = 0;
  for(  int k = 0; (k < int(rows(lb)));   k = (k + 1))
  {
    if ((column(seq_char(lb, lb.i), k) != GAP_BASE))
      {
        sbase_sum = (sbase_sum + sbase_energy());
      }

  }

  res.mfe = (res.mfe +  ( (sbase_sum / float(rows(lb))) ) );
  res.firstStem.seq = lb.seq;
  res.firstStem.i = lb.i;
  res.firstStem.j = e.firstStem.j;
  return res;
#line 3553 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::sr(const TUSubsequence & lb, const mfecovar_macrostate & e, const TUSubsequence & rb)
{
#line 2126 "../../../../ali_macrostate.gap"
  mfecovar_macrostate res = e;
  res.firstStem.seq = lb.seq;
  res.firstStem.i = lb.i;
  res.firstStem.j = rb.j;
  res.mfe = (e.mfe +  ( (sr_energy(res.firstStem, res.firstStem) / float(rows(lb))) ) );
  return res;
#line 3565 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::ssadd(const TUSubsequence & lb, const mfecovar_macrostate & e)
{
#line 2289 "../../../../ali_macrostate.gap"
  mfecovar_macrostate res = e;
  res.mfe = ((res.mfe + ul_energy()) +  ( (ss_energy(lb) / float(rows(lb))) ) );
  res.firstStem = e.firstStem;
  res.lastStem = e.firstStem;
  return res;
#line 3576 "mfe_macrostate.cc"
}

mfecovar_macrostate mfe_macrostate::trafo(const mfecovar_macrostate & e)
{
#line 2298 "../../../../ali_macrostate.gap"
  return e;
#line 3583 "mfe_macrostate.cc"
}


    void mfe_macrostate::cyk()
{

}



#ident "$Id: Compiled with gapc bellmansgapc-2013.05.02 $"

List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > mfe_macrostate::bt_proxy_nt_struct()
{
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > l;
  empty(l);
  mfecovar_macrostate ret = nt_struct();
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_struct_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int>  >  bt = new Backtrace_nt_struct_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (this);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_struct_Front<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > mfe_macrostate::bt_proxy_nt_left_unpaired(unsigned int t_0_i)
{
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > l;
  empty(l);
  mfecovar_macrostate ret = nt_left_unpaired(t_0_i);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_left_unpaired_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int>  >  bt = new Backtrace_nt_left_unpaired_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (this, t_0_i);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_left_unpaired_Front<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > mfe_macrostate::bt_proxy_nt_left_dangle(unsigned int t_0_i)
{
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > l;
  empty(l);
  mfecovar_macrostate ret = nt_left_dangle(t_0_i);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_left_dangle_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int>  >  bt = new Backtrace_nt_left_dangle_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (this, t_0_i);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_left_dangle_Front<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > mfe_macrostate::bt_proxy_nt_noleft_dangle(unsigned int t_0_i)
{
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > l;
  empty(l);
  mfecovar_macrostate ret = nt_noleft_dangle(t_0_i);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_noleft_dangle_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int>  >  bt = new Backtrace_nt_noleft_dangle_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (this, t_0_i);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_noleft_dangle_Front<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > mfe_macrostate::bt_proxy_nt_edanglel(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > l;
  empty(l);
  mfecovar_macrostate ret = nt_edanglel(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_edanglel_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int>  >  bt = new Backtrace_nt_edanglel_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_edanglel_Front<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > mfe_macrostate::bt_proxy_nt_edangler(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > l;
  empty(l);
  mfecovar_macrostate ret = nt_edangler(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_edangler_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int>  >  bt = new Backtrace_nt_edangler_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_edangler_Front<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > mfe_macrostate::bt_proxy_nt_edanglelr(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > l;
  empty(l);
  mfecovar_macrostate ret = nt_edanglelr(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_edanglelr_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int>  >  bt = new Backtrace_nt_edanglelr_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_edanglelr_Front<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > mfe_macrostate::bt_proxy_nt_nodangle(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > l;
  empty(l);
  mfecovar_macrostate ret = nt_nodangle(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_nodangle_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int>  >  bt = new Backtrace_nt_nodangle_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_nodangle_Front<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > mfe_macrostate::bt_proxy_nt_strong(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > l;
  empty(l);
  mfecovar_macrostate ret = nt_strong(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_strong_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int>  >  bt = new Backtrace_nt_strong_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_strong_Front<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > mfe_macrostate::bt_proxy_nt_weak(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > l;
  empty(l);
  mfecovar_macrostate ret = nt_weak(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_weak_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int>  >  bt = new Backtrace_nt_weak_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_weak_Front<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > mfe_macrostate::bt_proxy_nt_multiloop(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > l;
  empty(l);
  mfecovar_macrostate ret = nt_multiloop(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_multiloop_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int>  >  bt = new Backtrace_nt_multiloop_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_multiloop_Front<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > mfe_macrostate::bt_proxy_nt_ml_comps1(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > l;
  empty(l);
  mfecovar_macrostate ret = nt_ml_comps1(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_ml_comps1_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int>  >  bt = new Backtrace_nt_ml_comps1_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_ml_comps1_Front<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > mfe_macrostate::bt_proxy_nt_ml_comps2(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > l;
  empty(l);
  mfecovar_macrostate ret = nt_ml_comps2(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_ml_comps2_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int>  >  bt = new Backtrace_nt_ml_comps2_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_ml_comps2_Front<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > mfe_macrostate::bt_proxy_nt_ml_comps3(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > l;
  empty(l);
  mfecovar_macrostate ret = nt_ml_comps3(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_ml_comps3_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int>  >  bt = new Backtrace_nt_ml_comps3_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_ml_comps3_Front<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > mfe_macrostate::bt_proxy_nt_ml_comps4(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > l;
  empty(l);
  mfecovar_macrostate ret = nt_ml_comps4(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_ml_comps4_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int>  >  bt = new Backtrace_nt_ml_comps4_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_ml_comps4_Front<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > mfe_macrostate::bt_proxy_nt_block_dl(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > l;
  empty(l);
  mfecovar_macrostate ret = nt_block_dl(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_block_dl_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int>  >  bt = new Backtrace_nt_block_dl_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_block_dl_Front<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > mfe_macrostate::bt_proxy_nt_block_dlr(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > l;
  empty(l);
  mfecovar_macrostate ret = nt_block_dlr(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_block_dlr_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int>  >  bt = new Backtrace_nt_block_dlr_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_block_dlr_Front<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > mfe_macrostate::bt_proxy_nt_no_dl_no_ss_end(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > l;
  empty(l);
  mfecovar_macrostate ret = nt_no_dl_no_ss_end(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_no_dl_no_ss_end_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int>  >  bt = new Backtrace_nt_no_dl_no_ss_end_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_no_dl_no_ss_end_Front<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > mfe_macrostate::bt_proxy_nt_dl_or_ss_left_no_ss_end(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > l;
  empty(l);
  mfecovar_macrostate ret = nt_dl_or_ss_left_no_ss_end(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_dl_or_ss_left_no_ss_end_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int>  >  bt = new Backtrace_nt_dl_or_ss_left_no_ss_end_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_dl_or_ss_left_no_ss_end_Front<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > mfe_macrostate::bt_proxy_nt_no_dl_ss_end(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > l;
  empty(l);
  mfecovar_macrostate ret = nt_no_dl_ss_end(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_no_dl_ss_end_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int>  >  bt = new Backtrace_nt_no_dl_ss_end_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_no_dl_ss_end_Front<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > mfe_macrostate::bt_proxy_nt_dl_or_ss_left_ss_end(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > l;
  empty(l);
  mfecovar_macrostate ret = nt_dl_or_ss_left_ss_end(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_dl_or_ss_left_ss_end_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int>  >  bt = new Backtrace_nt_dl_or_ss_left_ss_end_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_dl_or_ss_left_ss_end_Front<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > mfe_macrostate::bt_proxy_nt_stack(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > l;
  empty(l);
  mfecovar_macrostate ret = nt_stack(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_stack_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int>  >  bt = new Backtrace_nt_stack_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_stack_Front<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::bt_proxy_nt_hairpin(unsigned int t_0_i, unsigned int t_0_j)
{
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  l;
  mfecovar_macrostate ret = nt_hairpin(t_0_i, t_0_j);
  if (isEmpty(ret))
  {
    empty( l);
    return l;
  }

  intrusive_ptr<Backtrace_nt_hairpin_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int>  >  bt = new Backtrace_nt_hairpin_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (this, t_0_i, t_0_j);
  l.first = ret;
  l.second = new Backtrace_nt_hairpin_Front<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (bt);
  set_value( l);
  return l;
}

List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > mfe_macrostate::bt_proxy_nt_leftB(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > l;
  empty(l);
  mfecovar_macrostate ret = nt_leftB(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_leftB_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int>  >  bt = new Backtrace_nt_leftB_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_leftB_Front<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > mfe_macrostate::bt_proxy_nt_rightB(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > l;
  empty(l);
  mfecovar_macrostate ret = nt_rightB(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_rightB_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int>  >  bt = new Backtrace_nt_rightB_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_rightB_Front<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > mfe_macrostate::bt_proxy_nt_iloop(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > l;
  empty(l);
  mfecovar_macrostate ret = nt_iloop(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_iloop_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int>  >  bt = new Backtrace_nt_iloop_Back<mfe_macrostate, std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_iloop_Front<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::bt_nt_block_dl(unsigned int t_0_i, unsigned int t_0_j)
{
  if (!block_dl_table.is_tabulated(t_0_i, t_0_j))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 7))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 1); (t_0_k_0 <= (t_0_j - 6)); ++t_0_k_0)
      {
        TUSubsequence ret_1;
        if (unpaired(t_0_seq, t_0_i, t_0_k_0))
          {
            ret_1 = REGION(t_0_seq, t_0_i, t_0_k_0);
          }

        else
          {
            empty( ret_1);
          }

        TUSubsequence a_0 = ret_1;
        if (is_not_empty(a_0))
        {
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_2 = bt_proxy_nt_edanglel(t_0_k_0, t_0_j);
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_1 = ret_2;
          if (is_not_empty(a_1))
            {
              for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_1 = *x_1_itr;
                std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = ssadd_bt(a_0, x_1);
                push_back_min_other( answers, ans);
              }
            }

          erase( a_1);
        }

        erase( a_0);
      }

    }


  if (((t_0_j - t_0_i) >= 6))
  {
    List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_4 = bt_proxy_nt_edanglel(t_0_i, t_0_j);
    List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_2 = ret_4;
    if (is_not_empty(a_2))
      {
        for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
          std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_2 = *x_2_itr;
          std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = incl_bt(x_2);
          push_back_min_other( answers, ans);
        }
      }

    erase( a_2);
  }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > eval = h_bt(answers, block_dl_table.get(t_0_i, t_0_j));
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::bt_nt_block_dlr(unsigned int t_0_i, unsigned int t_0_j)
{
  if (!block_dlr_table.is_tabulated(t_0_i, t_0_j))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 8))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 1); (t_0_k_0 <= (t_0_j - 7)); ++t_0_k_0)
      {
        TUSubsequence ret_1;
        if (unpaired(t_0_seq, t_0_i, t_0_k_0))
          {
            ret_1 = REGION(t_0_seq, t_0_i, t_0_k_0);
          }

        else
          {
            empty( ret_1);
          }

        TUSubsequence a_0 = ret_1;
        if (is_not_empty(a_0))
        {
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_2 = bt_proxy_nt_edanglelr(t_0_k_0, t_0_j);
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_1 = ret_2;
          if (is_not_empty(a_1))
            {
              for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_1 = *x_1_itr;
                std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = ssadd_bt(a_0, x_1);
                push_back_min_other( answers, ans);
              }
            }

          erase( a_1);
        }

        erase( a_0);
      }

    }


  if (((t_0_j - t_0_i) >= 7))
  {
    List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_4 = bt_proxy_nt_edanglelr(t_0_i, t_0_j);
    List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_2 = ret_4;
    if (is_not_empty(a_2))
      {
        for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
          std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_2 = *x_2_itr;
          std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = incl_bt(x_2);
          push_back_min_other( answers, ans);
        }
      }

    erase( a_2);
  }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > eval = h_bt(answers, block_dlr_table.get(t_0_i, t_0_j));
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::bt_nt_dl_or_ss_left_no_ss_end(unsigned int t_0_i, unsigned int t_0_j)
{
  if (!dl_or_ss_left_no_ss_end_table.is_tabulated(t_0_i, t_0_j))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_0 = bt_proxy_nt_ml_comps1(t_0_i, t_0_j);
  append_min_other( answers, ret_0);
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_1 = bt_proxy_nt_block_dl(t_0_i, t_0_j);
  append_min_other( answers, ret_1);
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > eval = h_bt(answers, dl_or_ss_left_no_ss_end_table.get(t_0_i, t_0_j));
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::bt_nt_dl_or_ss_left_ss_end(unsigned int t_0_i, unsigned int t_0_j)
{
  if (!dl_or_ss_left_ss_end_table.is_tabulated(t_0_i, t_0_j))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_0 = bt_proxy_nt_ml_comps4(t_0_i, t_0_j);
  append_min_other( answers, ret_0);
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_1 = bt_proxy_nt_block_dlr(t_0_i, t_0_j);
  append_min_other( answers, ret_1);

  if (((t_0_j - t_0_i) >= 8))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 7); (t_0_k_0 <= (t_0_j - 1)); ++t_0_k_0)
      {
        TUSubsequence ret_4;
        if (unpaired(t_0_seq, t_0_k_0, t_0_j))
          {
            ret_4 = REGION(t_0_seq, t_0_k_0, t_0_j);
          }

        else
          {
            empty( ret_4);
          }

        TUSubsequence a_1 = ret_4;
        if (is_not_empty(a_1))
        {
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_3 = bt_proxy_nt_block_dlr(t_0_i, t_0_k_0);
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_0 = ret_3;
          if (is_not_empty(a_0))
            {
              for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_0_itr = a_0.ref().begin(); x_0_itr!=a_0.ref().end(); ++x_0_itr){
                std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_0 = *x_0_itr;
                std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = addss_bt(x_0, a_1);
                push_back_min_other( answers, ans);
              }
            }

          erase( a_0);
        }

        erase( a_1);
      }

    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > eval = h_bt(answers, dl_or_ss_left_ss_end_table.get(t_0_i, t_0_j));
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::bt_nt_edanglel(unsigned int t_0_i, unsigned int t_0_j)
{
  if (!edanglel_table.is_tabulated(t_0_i, t_0_j))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 6))
  {
    TUSubsequence ret_3 = LOC(t_0_seq, t_0_j, t_0_j);
    TUSubsequence a_2 = ret_3;
    if (is_not_empty(a_2))
    {
      TUSubsequence ret_1;
      if (unpaired(t_0_seq, t_0_i, (t_0_i + 1)))
        {
          ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
        }

      else
        {
          empty( ret_1);
        }

      TUSubsequence a_0 = ret_1;
      if (is_not_empty(a_0))
      {
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_2 = bt_proxy_nt_strong((t_0_i + 1), t_0_j);
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_1 = ret_2;
        if (is_not_empty(a_1))
          {
            for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
              std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_1 = *x_1_itr;
              std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = edl_bt(a_0, x_1, a_2);
              push_back_min_other( answers, ans);
            }
          }

        erase( a_1);
      }

      erase( a_0);
    }

    erase( a_2);
  }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > eval = h_bt(answers, edanglel_table.get(t_0_i, t_0_j));
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::bt_nt_edanglelr(unsigned int t_0_i, unsigned int t_0_j)
{
  if (!edanglelr_table.is_tabulated(t_0_i, t_0_j))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 7))
  {
    TUSubsequence ret_3;
    if (unpaired(t_0_seq, (t_0_j - 1), t_0_j))
      {
        ret_3 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
      }

    else
      {
        empty( ret_3);
      }

    TUSubsequence a_2 = ret_3;
    if (is_not_empty(a_2))
    {
      TUSubsequence ret_1;
      if (unpaired(t_0_seq, t_0_i, (t_0_i + 1)))
        {
          ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
        }

      else
        {
          empty( ret_1);
        }

      TUSubsequence a_0 = ret_1;
      if (is_not_empty(a_0))
      {
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_2 = bt_proxy_nt_strong((t_0_i + 1), (t_0_j - 1));
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_1 = ret_2;
        if (is_not_empty(a_1))
          {
            for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
              std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_1 = *x_1_itr;
              std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = edlr_bt(a_0, x_1, a_2);
              push_back_min_other( answers, ans);
            }
          }

        erase( a_1);
      }

      erase( a_0);
    }

    erase( a_2);
  }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > eval = h_bt(answers, edanglelr_table.get(t_0_i, t_0_j));
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::bt_nt_edangler(unsigned int t_0_i, unsigned int t_0_j)
{
  if (!edangler_table.is_tabulated(t_0_i, t_0_j))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 6))
  {
    TUSubsequence ret_3;
    if (unpaired(t_0_seq, (t_0_j - 1), t_0_j))
      {
        ret_3 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
      }

    else
      {
        empty( ret_3);
      }

    TUSubsequence a_2 = ret_3;
    if (is_not_empty(a_2))
    {
      TUSubsequence ret_1 = LOC(t_0_seq, t_0_i, t_0_i);
      TUSubsequence a_0 = ret_1;
      if (is_not_empty(a_0))
      {
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_2 = bt_proxy_nt_strong(t_0_i, (t_0_j - 1));
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_1 = ret_2;
        if (is_not_empty(a_1))
          {
            for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
              std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_1 = *x_1_itr;
              std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = edr_bt(a_0, x_1, a_2);
              push_back_min_other( answers, ans);
            }
          }

        erase( a_1);
      }

      erase( a_0);
    }

    erase( a_2);
  }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > eval = h_bt(answers, edangler_table.get(t_0_i, t_0_j));
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::bt_nt_hairpin(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 5))
    {
      return 0;
    }

  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  answers;
  empty( answers);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret_0;
  if (((t_0_j - t_0_i) >= 5))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_3 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_2 = ret_3;
        if (is_not_empty(a_2))
        {
          TUSubsequence ret_2;
          if ((minsize(t_0_seq, (t_0_i + 1), (t_0_j - 1), 3) && unpaired(t_0_seq, (t_0_i + 1), (t_0_j - 1))))
            {
              ret_2 = REGION(t_0_seq, (t_0_i + 1), (t_0_j - 1));
            }

          else
            {
              empty( ret_2);
            }

          TUSubsequence a_1 = ret_2;
          if (is_not_empty(a_1))
          {
            TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
            TUSubsequence a_0 = ret_1;
            if (is_not_empty(a_0))
              {
                ret_0 = hl_bt(a_0, a_1, a_2);
              }

            else
              {
                empty( ret_0);
              }

            erase( a_0);
          }

          else
            {
              empty( ret_0);
            }

          erase( a_1);
        }

        else
          {
            empty( ret_0);
          }

        erase( a_2);
      }

      else
      {
        empty( ret_0);
        empty( ret_0);
      }

    }

  else
    {
      empty( ret_0);
    }

  answers = ret_0;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  bt_list = execute_backtrace_k_one(answers);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::bt_nt_iloop(unsigned int t_0_i, unsigned int t_0_j)
{
  if (!iloop_table.is_tabulated(t_0_i, t_0_j))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 9))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
        {
          for(          unsigned int t_0_k_0 = (t_0_i + 2); ((t_0_k_0 <= (t_0_j - 7)) && (t_0_k_0 <= (t_0_i + 31))); ++t_0_k_0)
          {
            for(            unsigned int t_0_k_1 = (((t_0_j - (t_0_k_0 + 5)) >= 31)) ? ((t_0_j - 31)) : ((t_0_k_0 + 5)); (t_0_k_1 <= (t_0_j - 2)); ++t_0_k_1)
            {
              TUSubsequence ret_5 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
              TUSubsequence a_4 = ret_5;
              if (is_not_empty(a_4))
              {
                TUSubsequence ret_4;
                if ((maxsize(t_0_seq, t_0_k_1, (t_0_j - 1), 30) && unpaired(t_0_seq, t_0_k_1, (t_0_j - 1))))
                  {
                    ret_4 = REGION(t_0_seq, t_0_k_1, (t_0_j - 1));
                  }

                else
                  {
                    empty( ret_4);
                  }

                TUSubsequence a_3 = ret_4;
                if (is_not_empty(a_3))
                {
                  TUSubsequence ret_2;
                  if ((maxsize(t_0_seq, (t_0_i + 1), t_0_k_0, 30) && unpaired(t_0_seq, (t_0_i + 1), t_0_k_0)))
                    {
                      ret_2 = REGION(t_0_seq, (t_0_i + 1), t_0_k_0);
                    }

                  else
                    {
                      empty( ret_2);
                    }

                  TUSubsequence a_1 = ret_2;
                  if (is_not_empty(a_1))
                  {
                    TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                    TUSubsequence a_0 = ret_1;
                    if (is_not_empty(a_0))
                    {
                      List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_3 = bt_proxy_nt_strong(t_0_k_0, t_0_k_1);
                      List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_2 = ret_3;
                      if (is_not_empty(a_2))
                        {
                          for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                            std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_2 = *x_2_itr;
                            std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = il_bt(a_0, a_1, x_2, a_3, a_4);
                            push_back_min_other( answers, ans);
                          }
                        }

                      erase( a_2);
                    }

                    erase( a_0);
                  }

                  erase( a_1);
                }

                erase( a_3);
              }

              erase( a_4);
            }

          }

        }

      else
        {
          empty( answers);
        }

    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > eval = h_bt(answers, iloop_table.get(t_0_i, t_0_j));
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::bt_nt_leftB(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 8))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 8))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
        {
          for(          unsigned int t_0_k_0 = (t_0_i + 2); ((t_0_k_0 <= (t_0_j - 6)) && (t_0_k_0 <= (t_0_i + 31))); ++t_0_k_0)
          {
            TUSubsequence ret_4 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
            TUSubsequence a_3 = ret_4;
            if (is_not_empty(a_3))
            {
              TUSubsequence ret_2;
              if ((maxsize(t_0_seq, (t_0_i + 1), t_0_k_0, 30) && unpaired(t_0_seq, (t_0_i + 1), t_0_k_0)))
                {
                  ret_2 = REGION(t_0_seq, (t_0_i + 1), t_0_k_0);
                }

              else
                {
                  empty( ret_2);
                }

              TUSubsequence a_1 = ret_2;
              if (is_not_empty(a_1))
              {
                TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                TUSubsequence a_0 = ret_1;
                if (is_not_empty(a_0))
                {
                  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_3 = bt_proxy_nt_strong(t_0_k_0, (t_0_j - 1));
                  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_2 = ret_3;
                  if (is_not_empty(a_2))
                    {
                      for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                        std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_2 = *x_2_itr;
                        std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = bl_bt(a_0, a_1, x_2, a_3);
                        push_back_min_other( answers, ans);
                      }
                    }

                  erase( a_2);
                }

                erase( a_0);
              }

              erase( a_1);
            }

            erase( a_3);
          }

        }

      else
        {
          empty( answers);
        }

    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > eval = h_bt(answers);
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::bt_nt_left_dangle(unsigned int t_0_i)
{
  if (!left_dangle_table.is_tabulated(t_0_i))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_right_most - t_0_i) >= 12))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 6); (t_0_k_0 <= (t_0_right_most - 6)); ++t_0_k_0)
      {
        TUSubsequence ret_2;
        if (unpaired(t_0_seq, t_0_k_0, (t_0_k_0 + 1)))
          {
            ret_2 = BASE(t_0_seq, t_0_k_0, (t_0_k_0 + 1));
          }

        else
          {
            empty( ret_2);
          }

        TUSubsequence a_1 = ret_2;
        if (is_not_empty(a_1))
        {
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_3 = bt_proxy_nt_noleft_dangle((t_0_k_0 + 1));
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_2 = ret_3;
          if (is_not_empty(a_2))
          {
            List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_1 = bt_proxy_nt_edanglel(t_0_i, t_0_k_0);
            List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_0 = ret_1;
            if (is_not_empty(a_0))
              {
                for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_0_itr = a_0.ref().begin(); x_0_itr!=a_0.ref().end(); ++x_0_itr){
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_0 = *x_0_itr;
                  for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                    std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_2 = *x_2_itr;
                    std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = ambd_bt(x_0, a_1, x_2);
                    push_back_min_other( answers, ans);
                  }
                }
              }

            erase( a_0);
          }

          else
            {
              for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator elem_itr = a_2.ref().begin(); elem_itr!=a_2.ref().end(); ++elem_itr){
                std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  elem = *elem_itr;
                erase( elem.second);
              }
            }

          erase( a_2);
        }

        erase( a_1);
      }

    }


  if (((t_0_right_most - t_0_i) >= 6))
    {
      for(      unsigned int t_0_k_1 = (t_0_i + 6); (t_0_k_1 <= t_0_right_most); ++t_0_k_1)
      {
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_6;
        empty(ret_6);
        empty( ret_6);
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_7 = bt_proxy_nt_noleft_dangle(t_0_k_1);
        append_min_other( ret_6, ret_7);
        std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret_8;
        if ((((t_0_right_most - t_0_k_1) >= 0) && ((t_0_right_most - t_0_k_1) <= 0)))
        {
          TUSubsequence ret_9 = LOC(t_0_seq, t_0_k_1, t_0_k_1);
          TUSubsequence a_5 = ret_9;
          if (is_not_empty(a_5))
            {
              ret_8 = nil_bt(a_5);
            }

          else
            {
              empty( ret_8);
            }

          erase( a_5);
        }

        else
          {
            empty( ret_8);
          }

        if (is_not_empty(ret_8))
          {
            push_back_min_other( ret_6, ret_8);
          }

        finalize( ret_6);
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_4 = ret_6;
        if (is_not_empty(a_4))
        {
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_5 = bt_proxy_nt_edanglel(t_0_i, t_0_k_1);
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_3 = ret_5;
          if (is_not_empty(a_3))
            {
              for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_3_itr = a_3.ref().begin(); x_3_itr!=a_3.ref().end(); ++x_3_itr){
                std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_3 = *x_3_itr;
                for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_4_itr = a_4.ref().begin(); x_4_itr!=a_4.ref().end(); ++x_4_itr){
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_4 = *x_4_itr;
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = cadd_Pr_bt(x_3, x_4);
                  push_back_min_other( answers, ans);
                }
              }
            }

          erase( a_3);
        }

        else
          {
            for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator elem_itr = a_4.ref().begin(); elem_itr!=a_4.ref().end(); ++elem_itr){
              std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  elem = *elem_itr;
              erase( elem.second);
            }
          }

        erase( a_4);
      }

    }


  if (((t_0_right_most - t_0_i) >= 7))
    {
      for(      unsigned int t_0_k_2 = (t_0_i + 7); (t_0_k_2 <= t_0_right_most); ++t_0_k_2)
      {
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_12;
        empty(ret_12);
        empty( ret_12);
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_13 = bt_proxy_nt_left_dangle(t_0_k_2);
        append_min_other( ret_12, ret_13);
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_14 = bt_proxy_nt_left_unpaired(t_0_k_2);
        append_min_other( ret_12, ret_14);
        finalize( ret_12);
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_7 = ret_12;
        if (is_not_empty(a_7))
        {
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_11 = bt_proxy_nt_edanglelr(t_0_i, t_0_k_2);
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_6 = ret_11;
          if (is_not_empty(a_6))
            {
              for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_6_itr = a_6.ref().begin(); x_6_itr!=a_6.ref().end(); ++x_6_itr){
                std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_6 = *x_6_itr;
                for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_7_itr = a_7.ref().begin(); x_7_itr!=a_7.ref().end(); ++x_7_itr){
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_7 = *x_7_itr;
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = cadd_bt(x_6, x_7);
                  push_back_min_other( answers, ans);
                }
              }
            }

          erase( a_6);
        }

        else
          {
            for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator elem_itr = a_7.ref().begin(); elem_itr!=a_7.ref().end(); ++elem_itr){
              std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  elem = *elem_itr;
              erase( elem.second);
            }
          }

        erase( a_7);
      }

    }

  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret_15;
  if ((((t_0_right_most - t_0_i) >= 0) && ((t_0_right_most - t_0_i) <= 0)))
  {
    TUSubsequence ret_16 = LOC(t_0_seq, t_0_i, t_0_i);
    TUSubsequence a_8 = ret_16;
    if (is_not_empty(a_8))
      {
        ret_15 = nil_bt(a_8);
      }

    else
      {
        empty( ret_15);
      }

    erase( a_8);
  }

  else
    {
      empty( ret_15);
    }

  if (is_not_empty(ret_15))
    {
      push_back_min_other( answers, ret_15);
    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > eval = h_bt(answers, left_dangle_table.get(t_0_i));
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::bt_nt_left_unpaired(unsigned int t_0_i)
{
  if (!left_unpaired_table.is_tabulated(t_0_i))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_right_most - t_0_i) >= 2))
  {
    TUSubsequence ret_1;
    if (unpaired(t_0_seq, t_0_i, (t_0_i + 1)))
      {
        ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
      }

    else
      {
        empty( ret_1);
      }

    TUSubsequence a_0 = ret_1;
    if (is_not_empty(a_0))
    {
      List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_2 = bt_proxy_nt_left_unpaired((t_0_i + 1));
      List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_1 = ret_2;
      if (is_not_empty(a_1))
        {
          for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
            std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_1 = *x_1_itr;
            std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = sadd_bt(a_0, x_1);
            push_back_min_other( answers, ans);
          }
        }

      erase( a_1);
    }

    erase( a_0);
  }


  if (((t_0_right_most - t_0_i) >= 1))
  {
    TUSubsequence ret_4;
    if (unpaired(t_0_seq, t_0_i, (t_0_i + 1)))
      {
        ret_4 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
      }

    else
      {
        empty( ret_4);
      }

    TUSubsequence a_2 = ret_4;
    if (is_not_empty(a_2))
    {
      List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_5 = bt_proxy_nt_left_dangle((t_0_i + 1));
      List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_3 = ret_5;
      if (is_not_empty(a_3))
        {
          for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_3_itr = a_3.ref().begin(); x_3_itr!=a_3.ref().end(); ++x_3_itr){
            std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_3 = *x_3_itr;
            std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = sadd_bt(a_2, x_3);
            push_back_min_other( answers, ans);
          }
        }

      erase( a_3);
    }

    erase( a_2);
  }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > eval = h_bt(answers, left_unpaired_table.get(t_0_i));
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::bt_nt_ml_comps1(unsigned int t_0_i, unsigned int t_0_j)
{
  if (!ml_comps1_table.is_tabulated(t_0_i, t_0_j))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 11))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 6); (t_0_k_0 <= (t_0_j - 5)); ++t_0_k_0)
      {
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_2 = bt_proxy_nt_no_dl_no_ss_end(t_0_k_0, t_0_j);
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_1 = ret_2;
        if (is_not_empty(a_1))
        {
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_1 = bt_proxy_nt_block_dl(t_0_i, t_0_k_0);
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_0 = ret_1;
          if (is_not_empty(a_0))
            {
              for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_0_itr = a_0.ref().begin(); x_0_itr!=a_0.ref().end(); ++x_0_itr){
                std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_0 = *x_0_itr;
                for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_1 = *x_1_itr;
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = combine_bt(x_0, x_1);
                  push_back_min_other( answers, ans);
                }
              }
            }

          erase( a_0);
        }

        else
          {
            for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator elem_itr = a_1.ref().begin(); elem_itr!=a_1.ref().end(); ++elem_itr){
              std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  elem = *elem_itr;
              erase( elem.second);
            }
          }

        erase( a_1);
      }

    }


  if (((t_0_j - t_0_i) >= 13))
    {
      for(      unsigned int t_0_k_1 = (t_0_i + 7); (t_0_k_1 <= (t_0_j - 6)); ++t_0_k_1)
      {
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_5 = bt_proxy_nt_dl_or_ss_left_no_ss_end(t_0_k_1, t_0_j);
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_3 = ret_5;
        if (is_not_empty(a_3))
        {
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_4 = bt_proxy_nt_block_dlr(t_0_i, t_0_k_1);
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_2 = ret_4;
          if (is_not_empty(a_2))
            {
              for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_2 = *x_2_itr;
                for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_3_itr = a_3.ref().begin(); x_3_itr!=a_3.ref().end(); ++x_3_itr){
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_3 = *x_3_itr;
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = combine_bt(x_2, x_3);
                  push_back_min_other( answers, ans);
                }
              }
            }

          erase( a_2);
        }

        else
          {
            for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator elem_itr = a_3.ref().begin(); elem_itr!=a_3.ref().end(); ++elem_itr){
              std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  elem = *elem_itr;
              erase( elem.second);
            }
          }

        erase( a_3);
      }

    }


  if (((t_0_j - t_0_i) >= 12))
    {
      for(      unsigned int t_0_k_2 = (t_0_i + 6); (t_0_k_2 <= (t_0_j - 6)); ++t_0_k_2)
      {
        TUSubsequence ret_8;
        if (unpaired(t_0_seq, t_0_k_2, (t_0_k_2 + 1)))
          {
            ret_8 = BASE(t_0_seq, t_0_k_2, (t_0_k_2 + 1));
          }

        else
          {
            empty( ret_8);
          }

        TUSubsequence a_5 = ret_8;
        if (is_not_empty(a_5))
        {
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_9 = bt_proxy_nt_no_dl_no_ss_end((t_0_k_2 + 1), t_0_j);
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_6 = ret_9;
          if (is_not_empty(a_6))
          {
            List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_7 = bt_proxy_nt_block_dl(t_0_i, t_0_k_2);
            List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_4 = ret_7;
            if (is_not_empty(a_4))
              {
                for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_4_itr = a_4.ref().begin(); x_4_itr!=a_4.ref().end(); ++x_4_itr){
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_4 = *x_4_itr;
                  for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_6_itr = a_6.ref().begin(); x_6_itr!=a_6.ref().end(); ++x_6_itr){
                    std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_6 = *x_6_itr;
                    std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = acomb_bt(x_4, a_5, x_6);
                    push_back_min_other( answers, ans);
                  }
                }
              }

            erase( a_4);
          }

          else
            {
              for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator elem_itr = a_6.ref().begin(); elem_itr!=a_6.ref().end(); ++elem_itr){
                std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  elem = *elem_itr;
                erase( elem.second);
              }
            }

          erase( a_6);
        }

        erase( a_5);
      }

    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > eval = h_bt(answers, ml_comps1_table.get(t_0_i, t_0_j));
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::bt_nt_ml_comps2(unsigned int t_0_i, unsigned int t_0_j)
{
  if (!ml_comps2_table.is_tabulated(t_0_i, t_0_j))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 10))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 5); (t_0_k_0 <= (t_0_j - 5)); ++t_0_k_0)
      {
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_3 = bt_proxy_nt_no_dl_no_ss_end(t_0_k_0, t_0_j);
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_2 = ret_3;
        if (is_not_empty(a_2))
        {
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_1;
          empty(ret_1);
          if (((t_0_k_0 - t_0_i) >= 5))
          {
            List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_2 = bt_proxy_nt_nodangle(t_0_i, t_0_k_0);
            List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_1 = ret_2;
            if (is_not_empty(a_1))
              {
                for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_1 = *x_1_itr;
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = incl_bt(x_1);
                  push_back_min_other( ret_1, ans);
                }
              }

            erase( a_1);
          }

          finalize( ret_1);
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_0 = ret_1;
          if (is_not_empty(a_0))
            {
              for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_0_itr = a_0.ref().begin(); x_0_itr!=a_0.ref().end(); ++x_0_itr){
                std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_0 = *x_0_itr;
                for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_2 = *x_2_itr;
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = combine_bt(x_0, x_2);
                  push_back_min_other( answers, ans);
                }
              }
            }

          erase( a_0);
        }

        else
          {
            for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator elem_itr = a_2.ref().begin(); elem_itr!=a_2.ref().end(); ++elem_itr){
              std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  elem = *elem_itr;
              erase( elem.second);
            }
          }

        erase( a_2);
      }

    }


  if (((t_0_j - t_0_i) >= 12))
    {
      for(      unsigned int t_0_k_1 = (t_0_i + 6); (t_0_k_1 <= (t_0_j - 6)); ++t_0_k_1)
      {
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_7 = bt_proxy_nt_dl_or_ss_left_no_ss_end(t_0_k_1, t_0_j);
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_5 = ret_7;
        if (is_not_empty(a_5))
        {
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_5;
          empty(ret_5);
          if (((t_0_k_1 - t_0_i) >= 6))
          {
            List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_6 = bt_proxy_nt_edangler(t_0_i, t_0_k_1);
            List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_4 = ret_6;
            if (is_not_empty(a_4))
              {
                for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_4_itr = a_4.ref().begin(); x_4_itr!=a_4.ref().end(); ++x_4_itr){
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_4 = *x_4_itr;
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = incl_bt(x_4);
                  push_back_min_other( ret_5, ans);
                }
              }

            erase( a_4);
          }

          finalize( ret_5);
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_3 = ret_5;
          if (is_not_empty(a_3))
            {
              for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_3_itr = a_3.ref().begin(); x_3_itr!=a_3.ref().end(); ++x_3_itr){
                std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_3 = *x_3_itr;
                for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_5_itr = a_5.ref().begin(); x_5_itr!=a_5.ref().end(); ++x_5_itr){
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_5 = *x_5_itr;
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = combine_bt(x_3, x_5);
                  push_back_min_other( answers, ans);
                }
              }
            }

          erase( a_3);
        }

        else
          {
            for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator elem_itr = a_5.ref().begin(); elem_itr!=a_5.ref().end(); ++elem_itr){
              std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  elem = *elem_itr;
              erase( elem.second);
            }
          }

        erase( a_5);
      }

    }


  if (((t_0_j - t_0_i) >= 11))
    {
      for(      unsigned int t_0_k_2 = (t_0_i + 5); (t_0_k_2 <= (t_0_j - 6)); ++t_0_k_2)
      {
        TUSubsequence ret_11;
        if (unpaired(t_0_seq, t_0_k_2, (t_0_k_2 + 1)))
          {
            ret_11 = BASE(t_0_seq, t_0_k_2, (t_0_k_2 + 1));
          }

        else
          {
            empty( ret_11);
          }

        TUSubsequence a_8 = ret_11;
        if (is_not_empty(a_8))
        {
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_12 = bt_proxy_nt_no_dl_no_ss_end((t_0_k_2 + 1), t_0_j);
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_9 = ret_12;
          if (is_not_empty(a_9))
          {
            List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_9;
            empty(ret_9);
            if (((t_0_k_2 - t_0_i) >= 5))
            {
              List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_10 = bt_proxy_nt_nodangle(t_0_i, t_0_k_2);
              List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_7 = ret_10;
              if (is_not_empty(a_7))
                {
                  for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_7_itr = a_7.ref().begin(); x_7_itr!=a_7.ref().end(); ++x_7_itr){
                    std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_7 = *x_7_itr;
                    std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = incl_bt(x_7);
                    push_back_min_other( ret_9, ans);
                  }
                }

              erase( a_7);
            }

            finalize( ret_9);
            List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_6 = ret_9;
            if (is_not_empty(a_6))
              {
                for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_6_itr = a_6.ref().begin(); x_6_itr!=a_6.ref().end(); ++x_6_itr){
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_6 = *x_6_itr;
                  for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_9_itr = a_9.ref().begin(); x_9_itr!=a_9.ref().end(); ++x_9_itr){
                    std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_9 = *x_9_itr;
                    std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = acomb_bt(x_6, a_8, x_9);
                    push_back_min_other( answers, ans);
                  }
                }
              }

            erase( a_6);
          }

          else
            {
              for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator elem_itr = a_9.ref().begin(); elem_itr!=a_9.ref().end(); ++elem_itr){
                std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  elem = *elem_itr;
                erase( elem.second);
              }
            }

          erase( a_9);
        }

        erase( a_8);
      }

    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > eval = h_bt(answers, ml_comps2_table.get(t_0_i, t_0_j));
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::bt_nt_ml_comps3(unsigned int t_0_i, unsigned int t_0_j)
{
  if (!ml_comps3_table.is_tabulated(t_0_i, t_0_j))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 13))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 6); (t_0_k_0 <= (t_0_j - 7)); ++t_0_k_0)
      {
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_3 = bt_proxy_nt_dl_or_ss_left_ss_end(t_0_k_0, t_0_j);
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_2 = ret_3;
        if (is_not_empty(a_2))
        {
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_1;
          empty(ret_1);
          if (((t_0_k_0 - t_0_i) >= 6))
          {
            List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_2 = bt_proxy_nt_edangler(t_0_i, t_0_k_0);
            List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_1 = ret_2;
            if (is_not_empty(a_1))
              {
                for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_1 = *x_1_itr;
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = incl_bt(x_1);
                  push_back_min_other( ret_1, ans);
                }
              }

            erase( a_1);
          }

          finalize( ret_1);
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_0 = ret_1;
          if (is_not_empty(a_0))
            {
              for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_0_itr = a_0.ref().begin(); x_0_itr!=a_0.ref().end(); ++x_0_itr){
                std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_0 = *x_0_itr;
                for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_2 = *x_2_itr;
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = combine_bt(x_0, x_2);
                  push_back_min_other( answers, ans);
                }
              }
            }

          erase( a_0);
        }

        else
          {
            for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator elem_itr = a_2.ref().begin(); elem_itr!=a_2.ref().end(); ++elem_itr){
              std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  elem = *elem_itr;
              erase( elem.second);
            }
          }

        erase( a_2);
      }

    }


  if (((t_0_j - t_0_i) >= 11))
    {
      for(      unsigned int t_0_k_1 = (t_0_i + 5); (t_0_k_1 <= (t_0_j - 6)); ++t_0_k_1)
      {
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_7 = bt_proxy_nt_no_dl_ss_end(t_0_k_1, t_0_j);
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_5 = ret_7;
        if (is_not_empty(a_5))
        {
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_5;
          empty(ret_5);
          if (((t_0_k_1 - t_0_i) >= 5))
          {
            List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_6 = bt_proxy_nt_nodangle(t_0_i, t_0_k_1);
            List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_4 = ret_6;
            if (is_not_empty(a_4))
              {
                for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_4_itr = a_4.ref().begin(); x_4_itr!=a_4.ref().end(); ++x_4_itr){
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_4 = *x_4_itr;
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = incl_bt(x_4);
                  push_back_min_other( ret_5, ans);
                }
              }

            erase( a_4);
          }

          finalize( ret_5);
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_3 = ret_5;
          if (is_not_empty(a_3))
            {
              for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_3_itr = a_3.ref().begin(); x_3_itr!=a_3.ref().end(); ++x_3_itr){
                std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_3 = *x_3_itr;
                for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_5_itr = a_5.ref().begin(); x_5_itr!=a_5.ref().end(); ++x_5_itr){
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_5 = *x_5_itr;
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = combine_bt(x_3, x_5);
                  push_back_min_other( answers, ans);
                }
              }
            }

          erase( a_3);
        }

        else
          {
            for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator elem_itr = a_5.ref().begin(); elem_itr!=a_5.ref().end(); ++elem_itr){
              std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  elem = *elem_itr;
              erase( elem.second);
            }
          }

        erase( a_5);
      }

    }


  if (((t_0_j - t_0_i) >= 12))
    {
      for(      unsigned int t_0_k_2 = (t_0_i + 5); (t_0_k_2 <= (t_0_j - 7)); ++t_0_k_2)
      {
        TUSubsequence ret_11;
        if (unpaired(t_0_seq, t_0_k_2, (t_0_k_2 + 1)))
          {
            ret_11 = BASE(t_0_seq, t_0_k_2, (t_0_k_2 + 1));
          }

        else
          {
            empty( ret_11);
          }

        TUSubsequence a_8 = ret_11;
        if (is_not_empty(a_8))
        {
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_12 = bt_proxy_nt_no_dl_ss_end((t_0_k_2 + 1), t_0_j);
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_9 = ret_12;
          if (is_not_empty(a_9))
          {
            List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_9;
            empty(ret_9);
            if (((t_0_k_2 - t_0_i) >= 5))
            {
              List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_10 = bt_proxy_nt_nodangle(t_0_i, t_0_k_2);
              List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_7 = ret_10;
              if (is_not_empty(a_7))
                {
                  for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_7_itr = a_7.ref().begin(); x_7_itr!=a_7.ref().end(); ++x_7_itr){
                    std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_7 = *x_7_itr;
                    std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = incl_bt(x_7);
                    push_back_min_other( ret_9, ans);
                  }
                }

              erase( a_7);
            }

            finalize( ret_9);
            List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_6 = ret_9;
            if (is_not_empty(a_6))
              {
                for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_6_itr = a_6.ref().begin(); x_6_itr!=a_6.ref().end(); ++x_6_itr){
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_6 = *x_6_itr;
                  for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_9_itr = a_9.ref().begin(); x_9_itr!=a_9.ref().end(); ++x_9_itr){
                    std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_9 = *x_9_itr;
                    std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = acomb_bt(x_6, a_8, x_9);
                    push_back_min_other( answers, ans);
                  }
                }
              }

            erase( a_6);
          }

          else
            {
              for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator elem_itr = a_9.ref().begin(); elem_itr!=a_9.ref().end(); ++elem_itr){
                std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  elem = *elem_itr;
                erase( elem.second);
              }
            }

          erase( a_9);
        }

        erase( a_8);
      }

    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > eval = h_bt(answers, ml_comps3_table.get(t_0_i, t_0_j));
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::bt_nt_ml_comps4(unsigned int t_0_i, unsigned int t_0_j)
{
  if (!ml_comps4_table.is_tabulated(t_0_i, t_0_j))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 12))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 6); (t_0_k_0 <= (t_0_j - 6)); ++t_0_k_0)
      {
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_2 = bt_proxy_nt_no_dl_ss_end(t_0_k_0, t_0_j);
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_1 = ret_2;
        if (is_not_empty(a_1))
        {
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_1 = bt_proxy_nt_block_dl(t_0_i, t_0_k_0);
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_0 = ret_1;
          if (is_not_empty(a_0))
            {
              for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_0_itr = a_0.ref().begin(); x_0_itr!=a_0.ref().end(); ++x_0_itr){
                std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_0 = *x_0_itr;
                for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_1 = *x_1_itr;
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = combine_bt(x_0, x_1);
                  push_back_min_other( answers, ans);
                }
              }
            }

          erase( a_0);
        }

        else
          {
            for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator elem_itr = a_1.ref().begin(); elem_itr!=a_1.ref().end(); ++elem_itr){
              std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  elem = *elem_itr;
              erase( elem.second);
            }
          }

        erase( a_1);
      }

    }


  if (((t_0_j - t_0_i) >= 14))
    {
      for(      unsigned int t_0_k_1 = (t_0_i + 7); (t_0_k_1 <= (t_0_j - 7)); ++t_0_k_1)
      {
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_5 = bt_proxy_nt_dl_or_ss_left_ss_end(t_0_k_1, t_0_j);
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_3 = ret_5;
        if (is_not_empty(a_3))
        {
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_4 = bt_proxy_nt_block_dlr(t_0_i, t_0_k_1);
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_2 = ret_4;
          if (is_not_empty(a_2))
            {
              for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_2 = *x_2_itr;
                for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_3_itr = a_3.ref().begin(); x_3_itr!=a_3.ref().end(); ++x_3_itr){
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_3 = *x_3_itr;
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = combine_bt(x_2, x_3);
                  push_back_min_other( answers, ans);
                }
              }
            }

          erase( a_2);
        }

        else
          {
            for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator elem_itr = a_3.ref().begin(); elem_itr!=a_3.ref().end(); ++elem_itr){
              std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  elem = *elem_itr;
              erase( elem.second);
            }
          }

        erase( a_3);
      }

    }


  if (((t_0_j - t_0_i) >= 13))
    {
      for(      unsigned int t_0_k_2 = (t_0_i + 6); (t_0_k_2 <= (t_0_j - 7)); ++t_0_k_2)
      {
        TUSubsequence ret_8;
        if (unpaired(t_0_seq, t_0_k_2, (t_0_k_2 + 1)))
          {
            ret_8 = BASE(t_0_seq, t_0_k_2, (t_0_k_2 + 1));
          }

        else
          {
            empty( ret_8);
          }

        TUSubsequence a_5 = ret_8;
        if (is_not_empty(a_5))
        {
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_9 = bt_proxy_nt_no_dl_ss_end((t_0_k_2 + 1), t_0_j);
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_6 = ret_9;
          if (is_not_empty(a_6))
          {
            List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_7 = bt_proxy_nt_block_dl(t_0_i, t_0_k_2);
            List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_4 = ret_7;
            if (is_not_empty(a_4))
              {
                for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_4_itr = a_4.ref().begin(); x_4_itr!=a_4.ref().end(); ++x_4_itr){
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_4 = *x_4_itr;
                  for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_6_itr = a_6.ref().begin(); x_6_itr!=a_6.ref().end(); ++x_6_itr){
                    std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_6 = *x_6_itr;
                    std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = acomb_bt(x_4, a_5, x_6);
                    push_back_min_other( answers, ans);
                  }
                }
              }

            erase( a_4);
          }

          else
            {
              for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator elem_itr = a_6.ref().begin(); elem_itr!=a_6.ref().end(); ++elem_itr){
                std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  elem = *elem_itr;
                erase( elem.second);
              }
            }

          erase( a_6);
        }

        erase( a_5);
      }

    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > eval = h_bt(answers, ml_comps4_table.get(t_0_i, t_0_j));
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::bt_nt_multiloop(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 12))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);


  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_1;
  empty(ret_1);
  if (((t_0_j - t_0_i) >= 14))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_5 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_3 = ret_5;
        if (is_not_empty(a_3))
        {
          TUSubsequence ret_3;
          if (unpaired(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1)))
            {
              ret_3 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
            }

          else
            {
              empty( ret_3);
            }

          TUSubsequence a_1 = ret_3;
          if (is_not_empty(a_1))
          {
            TUSubsequence ret_2 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
            TUSubsequence a_0 = ret_2;
            if (is_not_empty(a_0))
            {
              List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_4 = bt_proxy_nt_ml_comps1((t_0_i + 2), (t_0_j - 1));
              List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_2 = ret_4;
              if (is_not_empty(a_2))
                {
                  for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                    std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_2 = *x_2_itr;
                    std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = mldl_bt(a_0, a_1, x_2, a_3);
                    push_back_min_other( ret_1, ans);
                  }
                }

              erase( a_2);
            }

            erase( a_0);
          }

          erase( a_1);
        }

        erase( a_3);
      }

      else
        {
          empty( ret_1);
        }

    }

  finalize( ret_1);
  append_min_other( answers, ret_1);
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_6;
  empty(ret_6);
  if (((t_0_j - t_0_i) >= 13))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_10 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_7 = ret_10;
        if (is_not_empty(a_7))
        {
          TUSubsequence ret_8;
          if (unpaired(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1)))
            {
              ret_8 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
            }

          else
            {
              empty( ret_8);
            }

          TUSubsequence a_5 = ret_8;
          if (is_not_empty(a_5))
          {
            TUSubsequence ret_7 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
            TUSubsequence a_4 = ret_7;
            if (is_not_empty(a_4))
            {
              List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_9 = bt_proxy_nt_ml_comps2((t_0_i + 2), (t_0_j - 1));
              List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_6 = ret_9;
              if (is_not_empty(a_6))
                {
                  for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_6_itr = a_6.ref().begin(); x_6_itr!=a_6.ref().end(); ++x_6_itr){
                    std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_6 = *x_6_itr;
                    std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = mladl_bt(a_4, a_5, x_6, a_7);
                    push_back_min_other( ret_6, ans);
                  }
                }

              erase( a_6);
            }

            erase( a_4);
          }

          erase( a_5);
        }

        erase( a_7);
      }

      else
        {
          empty( ret_6);
        }

    }

  finalize( ret_6);
  append_min_other( answers, ret_6);
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_11;
  empty(ret_11);
  if (((t_0_j - t_0_i) >= 14))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_15 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_11 = ret_15;
        if (is_not_empty(a_11))
        {
          TUSubsequence ret_14;
          if (unpaired(t_0_seq, (t_0_j - 2), (t_0_j - 1)))
            {
              ret_14 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
            }

          else
            {
              empty( ret_14);
            }

          TUSubsequence a_10 = ret_14;
          if (is_not_empty(a_10))
          {
            TUSubsequence ret_12 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
            TUSubsequence a_8 = ret_12;
            if (is_not_empty(a_8))
            {
              List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_13 = bt_proxy_nt_ml_comps3((t_0_i + 1), (t_0_j - 2));
              List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_9 = ret_13;
              if (is_not_empty(a_9))
                {
                  for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_9_itr = a_9.ref().begin(); x_9_itr!=a_9.ref().end(); ++x_9_itr){
                    std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_9 = *x_9_itr;
                    std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = mldr_bt(a_8, x_9, a_10, a_11);
                    push_back_min_other( ret_11, ans);
                  }
                }

              erase( a_9);
            }

            erase( a_8);
          }

          erase( a_10);
        }

        erase( a_11);
      }

      else
        {
          empty( ret_11);
        }

    }

  finalize( ret_11);
  append_min_other( answers, ret_11);
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_16;
  empty(ret_16);
  if (((t_0_j - t_0_i) >= 13))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_20 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_15 = ret_20;
        if (is_not_empty(a_15))
        {
          TUSubsequence ret_19;
          if (unpaired(t_0_seq, (t_0_j - 2), (t_0_j - 1)))
            {
              ret_19 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
            }

          else
            {
              empty( ret_19);
            }

          TUSubsequence a_14 = ret_19;
          if (is_not_empty(a_14))
          {
            TUSubsequence ret_17 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
            TUSubsequence a_12 = ret_17;
            if (is_not_empty(a_12))
            {
              List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_18 = bt_proxy_nt_ml_comps2((t_0_i + 1), (t_0_j - 2));
              List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_13 = ret_18;
              if (is_not_empty(a_13))
                {
                  for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_13_itr = a_13.ref().begin(); x_13_itr!=a_13.ref().end(); ++x_13_itr){
                    std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_13 = *x_13_itr;
                    std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = mladr_bt(a_12, x_13, a_14, a_15);
                    push_back_min_other( ret_16, ans);
                  }
                }

              erase( a_13);
            }

            erase( a_12);
          }

          erase( a_14);
        }

        erase( a_15);
      }

      else
        {
          empty( ret_16);
        }

    }

  finalize( ret_16);
  append_min_other( answers, ret_16);
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_21;
  empty(ret_21);
  if (((t_0_j - t_0_i) >= 16))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_26 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_20 = ret_26;
        if (is_not_empty(a_20))
        {
          TUSubsequence ret_25;
          if (unpaired(t_0_seq, (t_0_j - 2), (t_0_j - 1)))
            {
              ret_25 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
            }

          else
            {
              empty( ret_25);
            }

          TUSubsequence a_19 = ret_25;
          if (is_not_empty(a_19))
          {
            TUSubsequence ret_23;
            if (unpaired(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1)))
              {
                ret_23 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
              }

            else
              {
                empty( ret_23);
              }

            TUSubsequence a_17 = ret_23;
            if (is_not_empty(a_17))
            {
              TUSubsequence ret_22 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
              TUSubsequence a_16 = ret_22;
              if (is_not_empty(a_16))
              {
                List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_24 = bt_proxy_nt_ml_comps4((t_0_i + 2), (t_0_j - 2));
                List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_18 = ret_24;
                if (is_not_empty(a_18))
                  {
                    for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_18_itr = a_18.ref().begin(); x_18_itr!=a_18.ref().end(); ++x_18_itr){
                      std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_18 = *x_18_itr;
                      std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = mldlr_bt(a_16, a_17, x_18, a_19, a_20);
                      push_back_min_other( ret_21, ans);
                    }
                  }

                erase( a_18);
              }

              erase( a_16);
            }

            erase( a_17);
          }

          erase( a_19);
        }

        erase( a_20);
      }

      else
        {
          empty( ret_21);
        }

    }

  finalize( ret_21);
  append_min_other( answers, ret_21);
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_27;
  empty(ret_27);
  if (((t_0_j - t_0_i) >= 14))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_32 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_25 = ret_32;
        if (is_not_empty(a_25))
        {
          TUSubsequence ret_31;
          if (unpaired(t_0_seq, (t_0_j - 2), (t_0_j - 1)))
            {
              ret_31 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
            }

          else
            {
              empty( ret_31);
            }

          TUSubsequence a_24 = ret_31;
          if (is_not_empty(a_24))
          {
            TUSubsequence ret_29;
            if (unpaired(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1)))
              {
                ret_29 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
              }

            else
              {
                empty( ret_29);
              }

            TUSubsequence a_22 = ret_29;
            if (is_not_empty(a_22))
            {
              TUSubsequence ret_28 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
              TUSubsequence a_21 = ret_28;
              if (is_not_empty(a_21))
              {
                List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_30 = bt_proxy_nt_ml_comps2((t_0_i + 2), (t_0_j - 2));
                List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_23 = ret_30;
                if (is_not_empty(a_23))
                  {
                    for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_23_itr = a_23.ref().begin(); x_23_itr!=a_23.ref().end(); ++x_23_itr){
                      std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_23 = *x_23_itr;
                      std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = mladlr_bt(a_21, a_22, x_23, a_24, a_25);
                      push_back_min_other( ret_27, ans);
                    }
                  }

                erase( a_23);
              }

              erase( a_21);
            }

            erase( a_22);
          }

          erase( a_24);
        }

        erase( a_25);
      }

      else
        {
          empty( ret_27);
        }

    }

  finalize( ret_27);
  append_min_other( answers, ret_27);
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_33;
  empty(ret_33);
  if (((t_0_j - t_0_i) >= 15))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_38 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_30 = ret_38;
        if (is_not_empty(a_30))
        {
          TUSubsequence ret_37;
          if (unpaired(t_0_seq, (t_0_j - 2), (t_0_j - 1)))
            {
              ret_37 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
            }

          else
            {
              empty( ret_37);
            }

          TUSubsequence a_29 = ret_37;
          if (is_not_empty(a_29))
          {
            TUSubsequence ret_35;
            if (unpaired(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1)))
              {
                ret_35 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
              }

            else
              {
                empty( ret_35);
              }

            TUSubsequence a_27 = ret_35;
            if (is_not_empty(a_27))
            {
              TUSubsequence ret_34 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
              TUSubsequence a_26 = ret_34;
              if (is_not_empty(a_26))
              {
                List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_36 = bt_proxy_nt_ml_comps1((t_0_i + 2), (t_0_j - 2));
                List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_28 = ret_36;
                if (is_not_empty(a_28))
                  {
                    for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_28_itr = a_28.ref().begin(); x_28_itr!=a_28.ref().end(); ++x_28_itr){
                      std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_28 = *x_28_itr;
                      std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = mldladr_bt(a_26, a_27, x_28, a_29, a_30);
                      push_back_min_other( ret_33, ans);
                    }
                  }

                erase( a_28);
              }

              erase( a_26);
            }

            erase( a_27);
          }

          erase( a_29);
        }

        erase( a_30);
      }

      else
        {
          empty( ret_33);
        }

    }

  finalize( ret_33);
  append_min_other( answers, ret_33);
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_39;
  empty(ret_39);
  if (((t_0_j - t_0_i) >= 15))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_44 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_35 = ret_44;
        if (is_not_empty(a_35))
        {
          TUSubsequence ret_43;
          if (unpaired(t_0_seq, (t_0_j - 2), (t_0_j - 1)))
            {
              ret_43 = BASE(t_0_seq, (t_0_j - 2), (t_0_j - 1));
            }

          else
            {
              empty( ret_43);
            }

          TUSubsequence a_34 = ret_43;
          if (is_not_empty(a_34))
          {
            TUSubsequence ret_41;
            if (unpaired(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1)))
              {
                ret_41 = BASE(t_0_seq, (t_0_i + 1), ((t_0_i + 1) + 1));
              }

            else
              {
                empty( ret_41);
              }

            TUSubsequence a_32 = ret_41;
            if (is_not_empty(a_32))
            {
              TUSubsequence ret_40 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
              TUSubsequence a_31 = ret_40;
              if (is_not_empty(a_31))
              {
                List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_42 = bt_proxy_nt_ml_comps3((t_0_i + 2), (t_0_j - 2));
                List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_33 = ret_42;
                if (is_not_empty(a_33))
                  {
                    for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_33_itr = a_33.ref().begin(); x_33_itr!=a_33.ref().end(); ++x_33_itr){
                      std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_33 = *x_33_itr;
                      std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = mladldr_bt(a_31, a_32, x_33, a_34, a_35);
                      push_back_min_other( ret_39, ans);
                    }
                  }

                erase( a_33);
              }

              erase( a_31);
            }

            erase( a_32);
          }

          erase( a_34);
        }

        erase( a_35);
      }

      else
        {
          empty( ret_39);
        }

    }

  finalize( ret_39);
  append_min_other( answers, ret_39);
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_45;
  empty(ret_45);
  if (((t_0_j - t_0_i) >= 12))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_48 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_38 = ret_48;
        if (is_not_empty(a_38))
        {
          TUSubsequence ret_46 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
          TUSubsequence a_36 = ret_46;
          if (is_not_empty(a_36))
          {
            List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_47 = bt_proxy_nt_ml_comps2((t_0_i + 1), (t_0_j - 1));
            List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_37 = ret_47;
            if (is_not_empty(a_37))
              {
                for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_37_itr = a_37.ref().begin(); x_37_itr!=a_37.ref().end(); ++x_37_itr){
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_37 = *x_37_itr;
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = ml_bt(a_36, x_37, a_38);
                  push_back_min_other( ret_45, ans);
                }
              }

            erase( a_37);
          }

          erase( a_36);
        }

        erase( a_38);
      }

      else
        {
          empty( ret_45);
        }

    }

  finalize( ret_45);
  append_min_other( answers, ret_45);
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > eval = h_bt(answers);
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::bt_nt_no_dl_no_ss_end(unsigned int t_0_i, unsigned int t_0_j)
{
  if (!no_dl_no_ss_end_table.is_tabulated(t_0_i, t_0_j))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_0 = bt_proxy_nt_ml_comps2(t_0_i, t_0_j);
  append_min_other( answers, ret_0);

  if (((t_0_j - t_0_i) >= 5))
  {
    List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_2 = bt_proxy_nt_nodangle(t_0_i, t_0_j);
    List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_0 = ret_2;
    if (is_not_empty(a_0))
      {
        for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_0_itr = a_0.ref().begin(); x_0_itr!=a_0.ref().end(); ++x_0_itr){
          std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_0 = *x_0_itr;
          std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = incl_bt(x_0);
          push_back_min_other( answers, ans);
        }
      }

    erase( a_0);
  }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > eval = h_bt(answers, no_dl_no_ss_end_table.get(t_0_i, t_0_j));
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::bt_nt_no_dl_ss_end(unsigned int t_0_i, unsigned int t_0_j)
{
  if (!no_dl_ss_end_table.is_tabulated(t_0_i, t_0_j))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_0 = bt_proxy_nt_ml_comps3(t_0_i, t_0_j);
  append_min_other( answers, ret_0);

  if (((t_0_j - t_0_i) >= 6))
  {
    List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_2 = bt_proxy_nt_edangler(t_0_i, t_0_j);
    List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_0 = ret_2;
    if (is_not_empty(a_0))
      {
        for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_0_itr = a_0.ref().begin(); x_0_itr!=a_0.ref().end(); ++x_0_itr){
          std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_0 = *x_0_itr;
          std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = incl_bt(x_0);
          push_back_min_other( answers, ans);
        }
      }

    erase( a_0);
  }


  if (((t_0_j - t_0_i) >= 7))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 6); (t_0_k_0 <= (t_0_j - 1)); ++t_0_k_0)
      {
        TUSubsequence ret_6;
        if (unpaired(t_0_seq, t_0_k_0, t_0_j))
          {
            ret_6 = REGION(t_0_seq, t_0_k_0, t_0_j);
          }

        else
          {
            empty( ret_6);
          }

        TUSubsequence a_3 = ret_6;
        if (is_not_empty(a_3))
        {
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_4;
          empty(ret_4);
          if (((t_0_k_0 - t_0_i) >= 6))
          {
            List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_5 = bt_proxy_nt_edangler(t_0_i, t_0_k_0);
            List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_2 = ret_5;
            if (is_not_empty(a_2))
              {
                for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_2 = *x_2_itr;
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = incl_bt(x_2);
                  push_back_min_other( ret_4, ans);
                }
              }

            erase( a_2);
          }

          finalize( ret_4);
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_1 = ret_4;
          if (is_not_empty(a_1))
            {
              for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_1 = *x_1_itr;
                std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = addss_bt(x_1, a_3);
                push_back_min_other( answers, ans);
              }
            }

          erase( a_1);
        }

        erase( a_3);
      }

    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > eval = h_bt(answers, no_dl_ss_end_table.get(t_0_i, t_0_j));
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::bt_nt_nodangle(unsigned int t_0_i, unsigned int t_0_j)
{
  if (!nodangle_table.is_tabulated(t_0_i, t_0_j))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 5))
  {
    TUSubsequence ret_3 = LOC(t_0_seq, t_0_j, t_0_j);
    TUSubsequence a_2 = ret_3;
    if (is_not_empty(a_2))
    {
      TUSubsequence ret_1 = LOC(t_0_seq, t_0_i, t_0_i);
      TUSubsequence a_0 = ret_1;
      if (is_not_empty(a_0))
      {
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_2 = bt_proxy_nt_strong(t_0_i, t_0_j);
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_1 = ret_2;
        if (is_not_empty(a_1))
          {
            for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
              std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_1 = *x_1_itr;
              std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = drem_bt(a_0, x_1, a_2);
              push_back_min_other( answers, ans);
            }
          }

        erase( a_1);
      }

      erase( a_0);
    }

    erase( a_2);
  }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > eval = h_bt(answers, nodangle_table.get(t_0_i, t_0_j));
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::bt_nt_noleft_dangle(unsigned int t_0_i)
{
  if (!noleft_dangle_table.is_tabulated(t_0_i))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_right_most - t_0_i) >= 6))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 6); (t_0_k_0 <= t_0_right_most); ++t_0_k_0)
      {
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_2;
        empty(ret_2);
        empty( ret_2);
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_3 = bt_proxy_nt_left_dangle(t_0_k_0);
        append_min_other( ret_2, ret_3);
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_4 = bt_proxy_nt_left_unpaired(t_0_k_0);
        append_min_other( ret_2, ret_4);
        finalize( ret_2);
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_1 = ret_2;
        if (is_not_empty(a_1))
        {
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_1 = bt_proxy_nt_edangler(t_0_i, t_0_k_0);
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_0 = ret_1;
          if (is_not_empty(a_0))
            {
              for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_0_itr = a_0.ref().begin(); x_0_itr!=a_0.ref().end(); ++x_0_itr){
                std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_0 = *x_0_itr;
                for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_1 = *x_1_itr;
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = cadd_Pr_Pr_bt(x_0, x_1);
                  push_back_min_other( answers, ans);
                }
              }
            }

          erase( a_0);
        }

        else
          {
            for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator elem_itr = a_1.ref().begin(); elem_itr!=a_1.ref().end(); ++elem_itr){
              std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  elem = *elem_itr;
              erase( elem.second);
            }
          }

        erase( a_1);
      }

    }


  if (((t_0_right_most - t_0_i) >= 5))
    {
      for(      unsigned int t_0_k_1 = (t_0_i + 5); (t_0_k_1 <= t_0_right_most); ++t_0_k_1)
      {
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_7;
        empty(ret_7);
        empty( ret_7);
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_8 = bt_proxy_nt_noleft_dangle(t_0_k_1);
        append_min_other( ret_7, ret_8);
        std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret_9;
        if ((((t_0_right_most - t_0_k_1) >= 0) && ((t_0_right_most - t_0_k_1) <= 0)))
        {
          TUSubsequence ret_10 = LOC(t_0_seq, t_0_k_1, t_0_k_1);
          TUSubsequence a_4 = ret_10;
          if (is_not_empty(a_4))
            {
              ret_9 = nil_bt(a_4);
            }

          else
            {
              empty( ret_9);
            }

          erase( a_4);
        }

        else
          {
            empty( ret_9);
          }

        if (is_not_empty(ret_9))
          {
            push_back_min_other( ret_7, ret_9);
          }

        finalize( ret_7);
        List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_3 = ret_7;
        if (is_not_empty(a_3))
        {
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_6 = bt_proxy_nt_nodangle(t_0_i, t_0_k_1);
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_2 = ret_6;
          if (is_not_empty(a_2))
            {
              for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_2 = *x_2_itr;
                for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_3_itr = a_3.ref().begin(); x_3_itr!=a_3.ref().end(); ++x_3_itr){
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_3 = *x_3_itr;
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = cadd_Pr_Pr_Pr_bt(x_2, x_3);
                  push_back_min_other( answers, ans);
                }
              }
            }

          erase( a_2);
        }

        else
          {
            for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator elem_itr = a_3.ref().begin(); elem_itr!=a_3.ref().end(); ++elem_itr){
              std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  elem = *elem_itr;
              erase( elem.second);
            }
          }

        erase( a_3);
      }

    }


  if (((t_0_right_most - t_0_i) >= 11))
    {
      for(      unsigned int t_0_k_2 = (t_0_i + 5); (t_0_k_2 <= (t_0_right_most - 6)); ++t_0_k_2)
      {
        TUSubsequence ret_13;
        if (unpaired(t_0_seq, t_0_k_2, (t_0_k_2 + 1)))
          {
            ret_13 = BASE(t_0_seq, t_0_k_2, (t_0_k_2 + 1));
          }

        else
          {
            empty( ret_13);
          }

        TUSubsequence a_6 = ret_13;
        if (is_not_empty(a_6))
        {
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_14 = bt_proxy_nt_noleft_dangle((t_0_k_2 + 1));
          List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_7 = ret_14;
          if (is_not_empty(a_7))
          {
            List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_12 = bt_proxy_nt_nodangle(t_0_i, t_0_k_2);
            List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_5 = ret_12;
            if (is_not_empty(a_5))
              {
                for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_5_itr = a_5.ref().begin(); x_5_itr!=a_5.ref().end(); ++x_5_itr){
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_5 = *x_5_itr;
                  for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_7_itr = a_7.ref().begin(); x_7_itr!=a_7.ref().end(); ++x_7_itr){
                    std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_7 = *x_7_itr;
                    std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = ambd_Pr_bt(x_5, a_6, x_7);
                    push_back_min_other( answers, ans);
                  }
                }
              }

            erase( a_5);
          }

          else
            {
              for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator elem_itr = a_7.ref().begin(); elem_itr!=a_7.ref().end(); ++elem_itr){
                std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  elem = *elem_itr;
                erase( elem.second);
              }
            }

          erase( a_7);
        }

        erase( a_6);
      }

    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > eval = h_bt(answers, noleft_dangle_table.get(t_0_i));
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::bt_nt_rightB(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 8))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 8))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
        {
          for(          unsigned int t_0_k_0 = (((t_0_j - (t_0_i + 6)) >= 31)) ? ((t_0_j - 31)) : ((t_0_i + 6)); (t_0_k_0 <= (t_0_j - 2)); ++t_0_k_0)
          {
            TUSubsequence ret_4 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
            TUSubsequence a_3 = ret_4;
            if (is_not_empty(a_3))
            {
              TUSubsequence ret_3;
              if ((maxsize(t_0_seq, t_0_k_0, (t_0_j - 1), 30) && unpaired(t_0_seq, t_0_k_0, (t_0_j - 1))))
                {
                  ret_3 = REGION(t_0_seq, t_0_k_0, (t_0_j - 1));
                }

              else
                {
                  empty( ret_3);
                }

              TUSubsequence a_2 = ret_3;
              if (is_not_empty(a_2))
              {
                TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                TUSubsequence a_0 = ret_1;
                if (is_not_empty(a_0))
                {
                  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_2 = bt_proxy_nt_strong((t_0_i + 1), t_0_k_0);
                  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_1 = ret_2;
                  if (is_not_empty(a_1))
                    {
                      for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                        std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_1 = *x_1_itr;
                        std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = br_bt(a_0, x_1, a_2, a_3);
                        push_back_min_other( answers, ans);
                      }
                    }

                  erase( a_1);
                }

                erase( a_0);
              }

              erase( a_2);
            }

            erase( a_3);
          }

        }

      else
        {
          empty( answers);
        }

    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > eval = h_bt(answers);
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::bt_nt_stack(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 7))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 7))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_3 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_2 = ret_3;
        if (is_not_empty(a_2))
        {
          TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
          TUSubsequence a_0 = ret_1;
          if (is_not_empty(a_0))
          {
            List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_2 = bt_proxy_nt_weak((t_0_i + 1), (t_0_j - 1));
            List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_1 = ret_2;
            if (is_not_empty(a_1))
              {
                for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_1 = *x_1_itr;
                  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = sr_bt(a_0, x_1, a_2);
                  push_back_min_other( answers, ans);
                }
              }

            erase( a_1);
          }

          erase( a_0);
        }

        erase( a_2);
      }

      else
        {
          empty( answers);
        }

    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > eval = h_bt(answers);
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::bt_nt_strong(unsigned int t_0_i, unsigned int t_0_j)
{
  if (!strong_table.is_tabulated(t_0_i, t_0_j))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);


  if (allowLonelyBasepairs(t_0_seq, t_0_i, t_0_j, false))
  {
    List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_1;
    empty(ret_1);
    if (((t_0_j - t_0_i) >= 7))
      {
        if (basepair(t_0_seq, t_0_i, t_0_j))
        {
          TUSubsequence ret_4 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
          TUSubsequence a_2 = ret_4;
          if (is_not_empty(a_2))
          {
            TUSubsequence ret_2 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
            TUSubsequence a_0 = ret_2;
            if (is_not_empty(a_0))
            {
              List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_3 = bt_proxy_nt_weak((t_0_i + 1), (t_0_j - 1));
              List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_1 = ret_3;
              if (is_not_empty(a_1))
                {
                  for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                    std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_1 = *x_1_itr;
                    std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = sr_bt(a_0, x_1, a_2);
                    push_back_min_other( ret_1, ans);
                  }
                }

              erase( a_1);
            }

            erase( a_0);
          }

          erase( a_2);
        }

        else
          {
            empty( ret_1);
          }

      }

    finalize( ret_1);
    append_min_other( answers, ret_1);
  }



  if (allowLonelyBasepairs(t_0_seq, t_0_i, t_0_j, true))
  {
    List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_6 = bt_proxy_nt_weak(t_0_i, t_0_j);
    append_min_other( answers, ret_6);
  }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > eval = h_bt(answers, strong_table.get(t_0_i, t_0_j));
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::bt_nt_struct()
{
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_0 = bt_proxy_nt_left_dangle(t_0_left_most);
  append_min_other( answers, ret_0);

  if (((t_0_right_most - t_0_left_most) >= 5))
  {
    List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_2 = bt_proxy_nt_noleft_dangle(t_0_left_most);
    List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > a_0 = ret_2;
    if (is_not_empty(a_0))
      {
        for (List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > >::iterator x_0_itr = a_0.ref().begin(); x_0_itr!=a_0.ref().end(); ++x_0_itr){
          std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  x_0 = *x_0_itr;
          std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ans = trafo_bt(x_0);
          push_back_min_other( answers, ans);
        }
      }

    erase( a_0);
  }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_3 = bt_proxy_nt_left_unpaired(t_0_left_most);
  append_min_other( answers, ret_3);
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > eval = h_bt(answers);
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::bt_nt_weak(unsigned int t_0_i, unsigned int t_0_j)
{
  if (!weak_table.is_tabulated(t_0_i, t_0_j))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_0 = bt_proxy_nt_stack(t_0_i, t_0_j);
  append_min_other( answers, ret_0);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret_1 = bt_proxy_nt_hairpin(t_0_i, t_0_j);
  if (is_not_empty(ret_1))
    {
      push_back_min_other( answers, ret_1);
    }

  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_2 = bt_proxy_nt_multiloop(t_0_i, t_0_j);
  append_min_other( answers, ret_2);
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_3 = bt_proxy_nt_leftB(t_0_i, t_0_j);
  append_min_other( answers, ret_3);
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_4 = bt_proxy_nt_rightB(t_0_i, t_0_j);
  append_min_other( answers, ret_4);
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > ret_5 = bt_proxy_nt_iloop(t_0_i, t_0_j);
  append_min_other( answers, ret_5);
  List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > eval = h_bt(answers, weak_table.get(t_0_i, t_0_j));
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}


intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::acomb_bt_r(intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_0, const TUSubsequence & param_1, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_2)
{
  return new Backtrace_acomb<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0, param_1, param_2);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::addss_bt_r(intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_0, const TUSubsequence & param_1)
{
  return new Backtrace_addss<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0, param_1);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::ambd_bt_r(intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_0, const TUSubsequence & param_1, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_2)
{
  return new Backtrace_ambd<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0, param_1, param_2);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::ambd_Pr_bt_r(intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_0, const TUSubsequence & param_1, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_2)
{
  return new Backtrace_ambd_Pr<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0, param_1, param_2);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::bl_bt_r(const TUSubsequence & param_0, const TUSubsequence & param_1, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_2, const TUSubsequence & param_3)
{
  return new Backtrace_bl<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0, param_1, param_2, param_3);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::br_bt_r(const TUSubsequence & param_0, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_1, const TUSubsequence & param_2, const TUSubsequence & param_3)
{
  return new Backtrace_br<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0, param_1, param_2, param_3);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::cadd_bt_r(intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_0, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_1)
{
  return new Backtrace_cadd<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0, param_1);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::cadd_Pr_bt_r(intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_0, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_1)
{
  return new Backtrace_cadd_Pr<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0, param_1);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::cadd_Pr_Pr_bt_r(intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_0, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_1)
{
  return new Backtrace_cadd_Pr_Pr<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0, param_1);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::cadd_Pr_Pr_Pr_bt_r(intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_0, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_1)
{
  return new Backtrace_cadd_Pr_Pr_Pr<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0, param_1);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::combine_bt_r(intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_0, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_1)
{
  return new Backtrace_combine<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0, param_1);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::drem_bt_r(const TUSubsequence & param_0, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_1, const TUSubsequence & param_2)
{
  return new Backtrace_drem<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0, param_1, param_2);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::edl_bt_r(const TUSubsequence & param_0, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_1, const TUSubsequence & param_2)
{
  return new Backtrace_edl<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0, param_1, param_2);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::edlr_bt_r(const TUSubsequence & param_0, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_1, const TUSubsequence & param_2)
{
  return new Backtrace_edlr<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0, param_1, param_2);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::edr_bt_r(const TUSubsequence & param_0, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_1, const TUSubsequence & param_2)
{
  return new Backtrace_edr<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0, param_1, param_2);
}

List_Ref<intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > mfe_macrostate::h_bt_r(List_Ref<intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > param_0)
{
  return param_0;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::hl_bt_r(const TUSubsequence & param_0, const TUSubsequence & param_1, const TUSubsequence & param_2)
{
  return new Backtrace_hl<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0, param_1, param_2);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::il_bt_r(const TUSubsequence & param_0, const TUSubsequence & param_1, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_2, const TUSubsequence & param_3, const TUSubsequence & param_4)
{
  return new Backtrace_il<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0, param_1, param_2, param_3, param_4);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::incl_bt_r(intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_0)
{
  return new Backtrace_incl<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::ml_bt_r(const TUSubsequence & param_0, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_1, const TUSubsequence & param_2)
{
  return new Backtrace_ml<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0, param_1, param_2);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::mladl_bt_r(const TUSubsequence & param_0, const TUSubsequence & param_1, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_2, const TUSubsequence & param_3)
{
  return new Backtrace_mladl<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0, param_1, param_2, param_3);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::mladldr_bt_r(const TUSubsequence & param_0, const TUSubsequence & param_1, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_2, const TUSubsequence & param_3, const TUSubsequence & param_4)
{
  return new Backtrace_mladldr<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0, param_1, param_2, param_3, param_4);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::mladlr_bt_r(const TUSubsequence & param_0, const TUSubsequence & param_1, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_2, const TUSubsequence & param_3, const TUSubsequence & param_4)
{
  return new Backtrace_mladlr<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0, param_1, param_2, param_3, param_4);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::mladr_bt_r(const TUSubsequence & param_0, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_1, const TUSubsequence & param_2, const TUSubsequence & param_3)
{
  return new Backtrace_mladr<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0, param_1, param_2, param_3);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::mldl_bt_r(const TUSubsequence & param_0, const TUSubsequence & param_1, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_2, const TUSubsequence & param_3)
{
  return new Backtrace_mldl<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0, param_1, param_2, param_3);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::mldladr_bt_r(const TUSubsequence & param_0, const TUSubsequence & param_1, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_2, const TUSubsequence & param_3, const TUSubsequence & param_4)
{
  return new Backtrace_mldladr<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0, param_1, param_2, param_3, param_4);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::mldlr_bt_r(const TUSubsequence & param_0, const TUSubsequence & param_1, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_2, const TUSubsequence & param_3, const TUSubsequence & param_4)
{
  return new Backtrace_mldlr<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0, param_1, param_2, param_3, param_4);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::mldr_bt_r(const TUSubsequence & param_0, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_1, const TUSubsequence & param_2, const TUSubsequence & param_3)
{
  return new Backtrace_mldr<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0, param_1, param_2, param_3);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::nil_bt_r(const TUSubsequence & param_0)
{
  return new Backtrace_nil<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::sadd_bt_r(const TUSubsequence & param_0, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_1)
{
  return new Backtrace_sadd<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0, param_1);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::sr_bt_r(const TUSubsequence & param_0, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_1, const TUSubsequence & param_2)
{
  return new Backtrace_sr<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0, param_1, param_2);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::ssadd_bt_r(const TUSubsequence & param_0, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_1)
{
  return new Backtrace_ssadd<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0, param_1);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  mfe_macrostate::trafo_bt_r(intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  param_0)
{
  return new Backtrace_trafo<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> (param_0);
}



std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::acomb_bt(const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_le, const TUSubsequence & p_b, const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_re)
{
  mfecovar_macrostate l_0 = p_le.first;
  TUSubsequence l_1 = p_b;
  mfecovar_macrostate l_2 = p_re.first;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_0 = p_le.second;
  TUSubsequence r_1 = p_b;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_2 = p_re.second;
  mfecovar_macrostate ret_left = acomb(l_0, l_1, l_2);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = acomb_bt_r(r_0, r_1, r_2);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::addss_bt(const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_e, const TUSubsequence & p_rb)
{
  mfecovar_macrostate l_0 = p_e.first;
  TUSubsequence l_1 = p_rb;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_0 = p_e.second;
  TUSubsequence r_1 = p_rb;
  mfecovar_macrostate ret_left = addss(l_0, l_1);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = addss_bt_r(r_0, r_1);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::ambd_bt(const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_le, const TUSubsequence & p_b, const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_re)
{
  mfecovar_macrostate l_0 = p_le.first;
  TUSubsequence l_1 = p_b;
  mfecovar_macrostate l_2 = p_re.first;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_0 = p_le.second;
  TUSubsequence r_1 = p_b;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_2 = p_re.second;
  mfecovar_macrostate ret_left = ambd(l_0, l_1, l_2);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = ambd_bt_r(r_0, r_1, r_2);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::ambd_Pr_bt(const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_le, const TUSubsequence & p_b, const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_re)
{
  mfecovar_macrostate l_0 = p_le.first;
  TUSubsequence l_1 = p_b;
  mfecovar_macrostate l_2 = p_re.first;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_0 = p_le.second;
  TUSubsequence r_1 = p_b;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_2 = p_re.second;
  mfecovar_macrostate ret_left = ambd_Pr(l_0, l_1, l_2);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = ambd_Pr_bt_r(r_0, r_1, r_2);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::bl_bt(const TUSubsequence & p_lb, const TUSubsequence & p_lregion, const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_e, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  TUSubsequence l_1 = p_lregion;
  mfecovar_macrostate l_2 = p_e.first;
  TUSubsequence l_3 = p_rb;
  TUSubsequence r_0 = p_lb;
  TUSubsequence r_1 = p_lregion;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_2 = p_e.second;
  TUSubsequence r_3 = p_rb;
  mfecovar_macrostate ret_left = bl(l_0, l_1, l_2, l_3);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = bl_bt_r(r_0, r_1, r_2, r_3);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::br_bt(const TUSubsequence & p_lb, const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_e, const TUSubsequence & p_rregion, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  mfecovar_macrostate l_1 = p_e.first;
  TUSubsequence l_2 = p_rregion;
  TUSubsequence l_3 = p_rb;
  TUSubsequence r_0 = p_lb;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_1 = p_e.second;
  TUSubsequence r_2 = p_rregion;
  TUSubsequence r_3 = p_rb;
  mfecovar_macrostate ret_left = br(l_0, l_1, l_2, l_3);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = br_bt_r(r_0, r_1, r_2, r_3);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::cadd_bt(const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_le, const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_re)
{
  mfecovar_macrostate l_0 = p_le.first;
  mfecovar_macrostate l_1 = p_re.first;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_0 = p_le.second;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_1 = p_re.second;
  mfecovar_macrostate ret_left = cadd(l_0, l_1);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = cadd_bt_r(r_0, r_1);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::cadd_Pr_bt(const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_le, const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_re)
{
  mfecovar_macrostate l_0 = p_le.first;
  mfecovar_macrostate l_1 = p_re.first;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_0 = p_le.second;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_1 = p_re.second;
  mfecovar_macrostate ret_left = cadd_Pr(l_0, l_1);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = cadd_Pr_bt_r(r_0, r_1);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::cadd_Pr_Pr_bt(const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_le, const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_re)
{
  mfecovar_macrostate l_0 = p_le.first;
  mfecovar_macrostate l_1 = p_re.first;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_0 = p_le.second;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_1 = p_re.second;
  mfecovar_macrostate ret_left = cadd_Pr_Pr(l_0, l_1);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = cadd_Pr_Pr_bt_r(r_0, r_1);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::cadd_Pr_Pr_Pr_bt(const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_le, const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_re)
{
  mfecovar_macrostate l_0 = p_le.first;
  mfecovar_macrostate l_1 = p_re.first;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_0 = p_le.second;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_1 = p_re.second;
  mfecovar_macrostate ret_left = cadd_Pr_Pr_Pr(l_0, l_1);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = cadd_Pr_Pr_Pr_bt_r(r_0, r_1);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::combine_bt(const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_le, const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_re)
{
  mfecovar_macrostate l_0 = p_le.first;
  mfecovar_macrostate l_1 = p_re.first;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_0 = p_le.second;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_1 = p_re.second;
  mfecovar_macrostate ret_left = combine(l_0, l_1);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = combine_bt_r(r_0, r_1);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::drem_bt(const TUSubsequence & p_lloc, const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_e, const TUSubsequence & p_rloc)
{
  TUSubsequence l_0 = p_lloc;
  mfecovar_macrostate l_1 = p_e.first;
  TUSubsequence l_2 = p_rloc;
  TUSubsequence r_0 = p_lloc;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_1 = p_e.second;
  TUSubsequence r_2 = p_rloc;
  mfecovar_macrostate ret_left = drem(l_0, l_1, l_2);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = drem_bt_r(r_0, r_1, r_2);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::edl_bt(const TUSubsequence & p_lb, const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_e, const TUSubsequence & p_rloc)
{
  TUSubsequence l_0 = p_lb;
  mfecovar_macrostate l_1 = p_e.first;
  TUSubsequence l_2 = p_rloc;
  TUSubsequence r_0 = p_lb;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_1 = p_e.second;
  TUSubsequence r_2 = p_rloc;
  mfecovar_macrostate ret_left = edl(l_0, l_1, l_2);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = edl_bt_r(r_0, r_1, r_2);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::edlr_bt(const TUSubsequence & p_lb, const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_e, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  mfecovar_macrostate l_1 = p_e.first;
  TUSubsequence l_2 = p_rb;
  TUSubsequence r_0 = p_lb;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_1 = p_e.second;
  TUSubsequence r_2 = p_rb;
  mfecovar_macrostate ret_left = edlr(l_0, l_1, l_2);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = edlr_bt_r(r_0, r_1, r_2);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::edr_bt(const TUSubsequence & p_lloc, const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_e, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lloc;
  mfecovar_macrostate l_1 = p_e.first;
  TUSubsequence l_2 = p_rb;
  TUSubsequence r_0 = p_lloc;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_1 = p_e.second;
  TUSubsequence r_2 = p_rb;
  mfecovar_macrostate ret_left = edr(l_0, l_1, l_2);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = edr_bt_r(r_0, r_1, r_2);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > mfe_macrostate::h_bt(List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > i, mfecovar_macrostate &  left)
{
  return i;
}

List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > mfe_macrostate::h_bt(List_Ref<std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > > i)
{
  return i;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::hl_bt(const TUSubsequence & p_lb, const TUSubsequence & p_region, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  TUSubsequence l_1 = p_region;
  TUSubsequence l_2 = p_rb;
  TUSubsequence r_0 = p_lb;
  TUSubsequence r_1 = p_region;
  TUSubsequence r_2 = p_rb;
  mfecovar_macrostate ret_left = hl(l_0, l_1, l_2);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = hl_bt_r(r_0, r_1, r_2);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::il_bt(const TUSubsequence & p_lb, const TUSubsequence & p_lregion, const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_e, const TUSubsequence & p_rregion, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  TUSubsequence l_1 = p_lregion;
  mfecovar_macrostate l_2 = p_e.first;
  TUSubsequence l_3 = p_rregion;
  TUSubsequence l_4 = p_rb;
  TUSubsequence r_0 = p_lb;
  TUSubsequence r_1 = p_lregion;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_2 = p_e.second;
  TUSubsequence r_3 = p_rregion;
  TUSubsequence r_4 = p_rb;
  mfecovar_macrostate ret_left = il(l_0, l_1, l_2, l_3, l_4);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = il_bt_r(r_0, r_1, r_2, r_3, r_4);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::incl_bt(const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_e)
{
  mfecovar_macrostate l_0 = p_e.first;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_0 = p_e.second;
  mfecovar_macrostate ret_left = incl(l_0);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = incl_bt_r(r_0);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::ml_bt(const TUSubsequence & p_lb, const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_e, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  mfecovar_macrostate l_1 = p_e.first;
  TUSubsequence l_2 = p_rb;
  TUSubsequence r_0 = p_lb;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_1 = p_e.second;
  TUSubsequence r_2 = p_rb;
  mfecovar_macrostate ret_left = ml(l_0, l_1, l_2);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = ml_bt_r(r_0, r_1, r_2);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::mladl_bt(const TUSubsequence & p_lb, const TUSubsequence & p_dl, const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_e, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  TUSubsequence l_1 = p_dl;
  mfecovar_macrostate l_2 = p_e.first;
  TUSubsequence l_3 = p_rb;
  TUSubsequence r_0 = p_lb;
  TUSubsequence r_1 = p_dl;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_2 = p_e.second;
  TUSubsequence r_3 = p_rb;
  mfecovar_macrostate ret_left = mladl(l_0, l_1, l_2, l_3);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = mladl_bt_r(r_0, r_1, r_2, r_3);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::mladldr_bt(const TUSubsequence & p_lb, const TUSubsequence & p_dl, const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_e, const TUSubsequence & p_dr, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  TUSubsequence l_1 = p_dl;
  mfecovar_macrostate l_2 = p_e.first;
  TUSubsequence l_3 = p_dr;
  TUSubsequence l_4 = p_rb;
  TUSubsequence r_0 = p_lb;
  TUSubsequence r_1 = p_dl;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_2 = p_e.second;
  TUSubsequence r_3 = p_dr;
  TUSubsequence r_4 = p_rb;
  mfecovar_macrostate ret_left = mladldr(l_0, l_1, l_2, l_3, l_4);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = mladldr_bt_r(r_0, r_1, r_2, r_3, r_4);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::mladlr_bt(const TUSubsequence & p_lb, const TUSubsequence & p_dl, const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_e, const TUSubsequence & p_dr, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  TUSubsequence l_1 = p_dl;
  mfecovar_macrostate l_2 = p_e.first;
  TUSubsequence l_3 = p_dr;
  TUSubsequence l_4 = p_rb;
  TUSubsequence r_0 = p_lb;
  TUSubsequence r_1 = p_dl;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_2 = p_e.second;
  TUSubsequence r_3 = p_dr;
  TUSubsequence r_4 = p_rb;
  mfecovar_macrostate ret_left = mladlr(l_0, l_1, l_2, l_3, l_4);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = mladlr_bt_r(r_0, r_1, r_2, r_3, r_4);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::mladr_bt(const TUSubsequence & p_lb, const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_e, const TUSubsequence & p_dr, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  mfecovar_macrostate l_1 = p_e.first;
  TUSubsequence l_2 = p_dr;
  TUSubsequence l_3 = p_rb;
  TUSubsequence r_0 = p_lb;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_1 = p_e.second;
  TUSubsequence r_2 = p_dr;
  TUSubsequence r_3 = p_rb;
  mfecovar_macrostate ret_left = mladr(l_0, l_1, l_2, l_3);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = mladr_bt_r(r_0, r_1, r_2, r_3);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::mldl_bt(const TUSubsequence & p_lb, const TUSubsequence & p_dl, const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_e, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  TUSubsequence l_1 = p_dl;
  mfecovar_macrostate l_2 = p_e.first;
  TUSubsequence l_3 = p_rb;
  TUSubsequence r_0 = p_lb;
  TUSubsequence r_1 = p_dl;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_2 = p_e.second;
  TUSubsequence r_3 = p_rb;
  mfecovar_macrostate ret_left = mldl(l_0, l_1, l_2, l_3);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = mldl_bt_r(r_0, r_1, r_2, r_3);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::mldladr_bt(const TUSubsequence & p_lb, const TUSubsequence & p_dl, const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_e, const TUSubsequence & p_dr, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  TUSubsequence l_1 = p_dl;
  mfecovar_macrostate l_2 = p_e.first;
  TUSubsequence l_3 = p_dr;
  TUSubsequence l_4 = p_rb;
  TUSubsequence r_0 = p_lb;
  TUSubsequence r_1 = p_dl;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_2 = p_e.second;
  TUSubsequence r_3 = p_dr;
  TUSubsequence r_4 = p_rb;
  mfecovar_macrostate ret_left = mldladr(l_0, l_1, l_2, l_3, l_4);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = mldladr_bt_r(r_0, r_1, r_2, r_3, r_4);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::mldlr_bt(const TUSubsequence & p_lb, const TUSubsequence & p_dl, const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_e, const TUSubsequence & p_dr, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  TUSubsequence l_1 = p_dl;
  mfecovar_macrostate l_2 = p_e.first;
  TUSubsequence l_3 = p_dr;
  TUSubsequence l_4 = p_rb;
  TUSubsequence r_0 = p_lb;
  TUSubsequence r_1 = p_dl;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_2 = p_e.second;
  TUSubsequence r_3 = p_dr;
  TUSubsequence r_4 = p_rb;
  mfecovar_macrostate ret_left = mldlr(l_0, l_1, l_2, l_3, l_4);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = mldlr_bt_r(r_0, r_1, r_2, r_3, r_4);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::mldr_bt(const TUSubsequence & p_lb, const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_e, const TUSubsequence & p_dr, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  mfecovar_macrostate l_1 = p_e.first;
  TUSubsequence l_2 = p_dr;
  TUSubsequence l_3 = p_rb;
  TUSubsequence r_0 = p_lb;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_1 = p_e.second;
  TUSubsequence r_2 = p_dr;
  TUSubsequence r_3 = p_rb;
  mfecovar_macrostate ret_left = mldr(l_0, l_1, l_2, l_3);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = mldr_bt_r(r_0, r_1, r_2, r_3);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::nil_bt(const TUSubsequence & p_loc)
{
  TUSubsequence l_0 = p_loc;
  TUSubsequence r_0 = p_loc;
  mfecovar_macrostate ret_left = nil(l_0);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = nil_bt_r(r_0);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::sadd_bt(const TUSubsequence & p_lb, const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_e)
{
  TUSubsequence l_0 = p_lb;
  mfecovar_macrostate l_1 = p_e.first;
  TUSubsequence r_0 = p_lb;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_1 = p_e.second;
  mfecovar_macrostate ret_left = sadd(l_0, l_1);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = sadd_bt_r(r_0, r_1);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::sr_bt(const TUSubsequence & p_lb, const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_e, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  mfecovar_macrostate l_1 = p_e.first;
  TUSubsequence l_2 = p_rb;
  TUSubsequence r_0 = p_lb;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_1 = p_e.second;
  TUSubsequence r_2 = p_rb;
  mfecovar_macrostate ret_left = sr(l_0, l_1, l_2);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = sr_bt_r(r_0, r_1, r_2);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::ssadd_bt(const TUSubsequence & p_lb, const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_e)
{
  TUSubsequence l_0 = p_lb;
  mfecovar_macrostate l_1 = p_e.first;
  TUSubsequence r_0 = p_lb;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_1 = p_e.second;
  mfecovar_macrostate ret_left = ssadd(l_0, l_1);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = ssadd_bt_r(r_0, r_1);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  mfe_macrostate::trafo_bt(const std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > > & p_e)
{
  mfecovar_macrostate l_0 = p_e.first;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  r_0 = p_e.second;
  mfecovar_macrostate ret_left = trafo(l_0);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> >  ret_right = trafo_bt_r(r_0);
  std::pair<mfecovar_macrostate, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , answer_ali_pfunc_macrostate> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}


