
// A dynamic programming evaluator generated by GAP-C.
// 
//   GAP-C version:
//     bellmansgapc-2013.05.02
// 
//   GAP-C call:
//     /home/jhuang/local/gapc/bin/gapc -I ../../../../ -p alg_ali_mfe * (alg_ali_dotBracket * alg_ali_shapeX * alg_ali_pfunc) ../../../../ali_nodangle.gap --kbacktrace --no-coopt -o mfe_nodangle.cc 
// 
// 


#define GAPC_MOD_TRANSLATION_UNIT
#include "mfe_nodangle.hh"

#include <rtlib/subopt.hh>
#include "rna.hh"
#include "Extensions/alifold.hh"
#include "Extensions/mfesubopt.hh"
#include "Extensions/probabilities.hh"
#include "Extensions/typesRNAfolding.hh"
#include "Extensions/shapes.hh"

#include "Extensions/rnaoptions.hh"

mfecovar &  mfe_nodangle::nt_dangle(unsigned int t_0_i, unsigned int t_0_j)
{
  if (dangle_table.is_tabulated(t_0_i, t_0_j))
    {
      return dangle_table.get(t_0_i, t_0_j);
    }

  mfecovar answers;
  empty(answers);
  empty( answers);
  mfecovar ret_0;
  if (((t_0_j - t_0_i) >= 5))
  {
    TUSubsequence ret_3 = LOC(t_0_seq, t_0_j, t_0_j);
    TUSubsequence a_2 = ret_3;
    if (is_not_empty(a_2))
    {
      TUSubsequence ret_1 = LOC(t_0_seq, t_0_i, t_0_i);
      TUSubsequence a_0 = ret_1;
      if (is_not_empty(a_0))
      {
        mfecovar ret_2 = nt_strong(t_0_i, t_0_j);
        mfecovar a_1 = ret_2;
        if (is_not_empty(a_1))
          {
            ret_0 = drem(a_0, a_1, a_2);
          }

        else
          {
            empty( ret_0);
          }

        erase( a_1);
      }

      else
        {
          empty( ret_0);
        }

      erase( a_0);
    }

    else
      {
        empty( ret_0);
      }

    erase( a_2);
  }

  else
    {
      empty( ret_0);
    }

  if (is_not_empty(ret_0))
    {
      push_back_min( answers, ret_0);
    }

  mfecovar eval = h(answers);
  erase( answers);
  dangle_table.set( t_0_i, t_0_j, eval);
  return dangle_table.get(t_0_i, t_0_j);
}

mfecovar mfe_nodangle::nt_hairpin(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 5))
    {
      return mfecovar_zero;
    }

  mfecovar answers;
  empty( answers);
  mfecovar ret_0;
  if (((t_0_j - t_0_i) >= 5))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_3 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_2 = ret_3;
        if (is_not_empty(a_2))
        {
          TUSubsequence ret_2;
          if ((minsize(t_0_seq, (t_0_i + 1), (t_0_j - 1), 3) && unpaired(t_0_seq, (t_0_i + 1), (t_0_j - 1))))
            {
              ret_2 = REGION(t_0_seq, (t_0_i + 1), (t_0_j - 1));
            }

          else
            {
              empty( ret_2);
            }

          TUSubsequence a_1 = ret_2;
          if (is_not_empty(a_1))
          {
            TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
            TUSubsequence a_0 = ret_1;
            if (is_not_empty(a_0))
              {
                ret_0 = hl(a_0, a_1, a_2);
              }

            else
              {
                empty( ret_0);
              }

            erase( a_0);
          }

          else
            {
              empty( ret_0);
            }

          erase( a_1);
        }

        else
          {
            empty( ret_0);
          }

        erase( a_2);
      }

      else
      {
        empty( ret_0);
        empty( ret_0);
      }

    }

  else
    {
      empty( ret_0);
    }

  answers = ret_0;
  return answers;
}

mfecovar &  mfe_nodangle::nt_iloop(unsigned int t_0_i, unsigned int t_0_j)
{
  if (iloop_table.is_tabulated(t_0_i, t_0_j))
    {
      return iloop_table.get(t_0_i, t_0_j);
    }

  mfecovar answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 9))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
        {
          for(          unsigned int t_0_k_0 = (t_0_i + 2); ((t_0_k_0 <= (t_0_j - 7)) && (t_0_k_0 <= (t_0_i + 31))); ++t_0_k_0)
          {
            for(            unsigned int t_0_k_1 = (((t_0_j - (t_0_k_0 + 5)) >= 31)) ? ((t_0_j - 31)) : ((t_0_k_0 + 5)); (t_0_k_1 <= (t_0_j - 2)); ++t_0_k_1)
            {
              TUSubsequence ret_5 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
              TUSubsequence a_4 = ret_5;
              if (is_not_empty(a_4))
              {
                TUSubsequence ret_4;
                if ((maxsize(t_0_seq, t_0_k_1, (t_0_j - 1), 30) && unpaired(t_0_seq, t_0_k_1, (t_0_j - 1))))
                  {
                    ret_4 = REGION(t_0_seq, t_0_k_1, (t_0_j - 1));
                  }

                else
                  {
                    empty( ret_4);
                  }

                TUSubsequence a_3 = ret_4;
                if (is_not_empty(a_3))
                {
                  TUSubsequence ret_2;
                  if ((maxsize(t_0_seq, (t_0_i + 1), t_0_k_0, 30) && unpaired(t_0_seq, (t_0_i + 1), t_0_k_0)))
                    {
                      ret_2 = REGION(t_0_seq, (t_0_i + 1), t_0_k_0);
                    }

                  else
                    {
                      empty( ret_2);
                    }

                  TUSubsequence a_1 = ret_2;
                  if (is_not_empty(a_1))
                  {
                    TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                    TUSubsequence a_0 = ret_1;
                    if (is_not_empty(a_0))
                    {
                      mfecovar ret_3 = nt_strong(t_0_k_0, t_0_k_1);
                      mfecovar a_2 = ret_3;
                      if (is_not_empty(a_2))
                      {
                        mfecovar ans = il(a_0, a_1, a_2, a_3, a_4);
                        push_back_min( answers, ans);
                      }

                      erase( a_2);
                    }

                    erase( a_0);
                  }

                  erase( a_1);
                }

                erase( a_3);
              }

              erase( a_4);
            }

          }

        }

      else
        {
          empty( answers);
        }

    }

  mfecovar eval = h(answers);
  erase( answers);
  iloop_table.set( t_0_i, t_0_j, eval);
  return iloop_table.get(t_0_i, t_0_j);
}

mfecovar mfe_nodangle::nt_leftB(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 8))
    {
      return mfecovar_zero;
    }

  mfecovar answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 8))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
        {
          for(          unsigned int t_0_k_0 = (t_0_i + 2); ((t_0_k_0 <= (t_0_j - 6)) && (t_0_k_0 <= (t_0_i + 31))); ++t_0_k_0)
          {
            TUSubsequence ret_4 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
            TUSubsequence a_3 = ret_4;
            if (is_not_empty(a_3))
            {
              TUSubsequence ret_2;
              if ((maxsize(t_0_seq, (t_0_i + 1), t_0_k_0, 30) && unpaired(t_0_seq, (t_0_i + 1), t_0_k_0)))
                {
                  ret_2 = REGION(t_0_seq, (t_0_i + 1), t_0_k_0);
                }

              else
                {
                  empty( ret_2);
                }

              TUSubsequence a_1 = ret_2;
              if (is_not_empty(a_1))
              {
                TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                TUSubsequence a_0 = ret_1;
                if (is_not_empty(a_0))
                {
                  mfecovar ret_3 = nt_strong(t_0_k_0, (t_0_j - 1));
                  mfecovar a_2 = ret_3;
                  if (is_not_empty(a_2))
                  {
                    mfecovar ans = bl(a_0, a_1, a_2, a_3);
                    push_back_min( answers, ans);
                  }

                  erase( a_2);
                }

                erase( a_0);
              }

              erase( a_1);
            }

            erase( a_3);
          }

        }

      else
        {
          empty( answers);
        }

    }

  mfecovar eval = h(answers);
  erase( answers);
  return eval;
}

mfecovar &  mfe_nodangle::nt_ml_comps(unsigned int t_0_i, unsigned int t_0_j)
{
  if (ml_comps_table.is_tabulated(t_0_i, t_0_j))
    {
      return ml_comps_table.get(t_0_i, t_0_j);
    }

  mfecovar answers;
  empty(answers);
  empty( answers);
  mfecovar ret_0;
  if (((t_0_j - t_0_i) >= 11))
  {
    TUSubsequence ret_1;
    if (unpaired(t_0_seq, t_0_i, (t_0_i + 1)))
      {
        ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
      }

    else
      {
        empty( ret_1);
      }

    TUSubsequence a_0 = ret_1;
    if (is_not_empty(a_0))
    {
      mfecovar ret_2 = nt_ml_comps((t_0_i + 1), t_0_j);
      mfecovar a_1 = ret_2;
      if (is_not_empty(a_1))
        {
          ret_0 = sadd(a_0, a_1);
        }

      else
        {
          empty( ret_0);
        }

      erase( a_1);
    }

    else
      {
        empty( ret_0);
      }

    erase( a_0);
  }

  else
    {
      empty( ret_0);
    }

  if (is_not_empty(ret_0))
    {
      push_back_min( answers, ret_0);
    }


  if (((t_0_j - t_0_i) >= 10))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 5); (t_0_k_0 <= (t_0_j - 5)); ++t_0_k_0)
      {
        mfecovar ret_6 = nt_ml_comps1(t_0_k_0, t_0_j);
        mfecovar a_4 = ret_6;
        if (is_not_empty(a_4))
        {
          mfecovar ret_4;
          if (((t_0_k_0 - t_0_i) >= 5))
          {
            mfecovar ret_5 = nt_dangle(t_0_i, t_0_k_0);
            mfecovar a_3 = ret_5;
            if (is_not_empty(a_3))
              {
                ret_4 = incl(a_3);
              }

            else
              {
                empty( ret_4);
              }

            erase( a_3);
          }

          else
            {
              empty( ret_4);
            }

          mfecovar a_2 = ret_4;
          if (is_not_empty(a_2))
          {
            mfecovar ans = cadd(a_2, a_4);
            push_back_min( answers, ans);
          }

          erase( a_2);
        }

        erase( a_4);
      }

    }

  mfecovar eval = h(answers);
  erase( answers);
  ml_comps_table.set( t_0_i, t_0_j, eval);
  return ml_comps_table.get(t_0_i, t_0_j);
}

mfecovar &  mfe_nodangle::nt_ml_comps1(unsigned int t_0_i, unsigned int t_0_j)
{
  if (ml_comps1_table.is_tabulated(t_0_i, t_0_j))
    {
      return ml_comps1_table.get(t_0_i, t_0_j);
    }

  mfecovar answers;
  empty(answers);
  empty( answers);
  mfecovar ret_0;
  if (((t_0_j - t_0_i) >= 6))
  {
    TUSubsequence ret_1;
    if (unpaired(t_0_seq, t_0_i, (t_0_i + 1)))
      {
        ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
      }

    else
      {
        empty( ret_1);
      }

    TUSubsequence a_0 = ret_1;
    if (is_not_empty(a_0))
    {
      mfecovar ret_2 = nt_ml_comps1((t_0_i + 1), t_0_j);
      mfecovar a_1 = ret_2;
      if (is_not_empty(a_1))
        {
          ret_0 = sadd(a_0, a_1);
        }

      else
        {
          empty( ret_0);
        }

      erase( a_1);
    }

    else
      {
        empty( ret_0);
      }

    erase( a_0);
  }

  else
    {
      empty( ret_0);
    }

  if (is_not_empty(ret_0))
    {
      push_back_min( answers, ret_0);
    }


  if (((t_0_j - t_0_i) >= 10))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 5); (t_0_k_0 <= (t_0_j - 5)); ++t_0_k_0)
      {
        mfecovar ret_6 = nt_ml_comps1(t_0_k_0, t_0_j);
        mfecovar a_4 = ret_6;
        if (is_not_empty(a_4))
        {
          mfecovar ret_4;
          if (((t_0_k_0 - t_0_i) >= 5))
          {
            mfecovar ret_5 = nt_dangle(t_0_i, t_0_k_0);
            mfecovar a_3 = ret_5;
            if (is_not_empty(a_3))
              {
                ret_4 = incl(a_3);
              }

            else
              {
                empty( ret_4);
              }

            erase( a_3);
          }

          else
            {
              empty( ret_4);
            }

          mfecovar a_2 = ret_4;
          if (is_not_empty(a_2))
          {
            mfecovar ans = cadd(a_2, a_4);
            push_back_min( answers, ans);
          }

          erase( a_2);
        }

        erase( a_4);
      }

    }

  mfecovar ret_7;
  if (((t_0_j - t_0_i) >= 5))
  {
    mfecovar ret_8 = nt_dangle(t_0_i, t_0_j);
    mfecovar a_5 = ret_8;
    if (is_not_empty(a_5))
      {
        ret_7 = incl(a_5);
      }

    else
      {
        empty( ret_7);
      }

    erase( a_5);
  }

  else
    {
      empty( ret_7);
    }

  if (is_not_empty(ret_7))
    {
      push_back_min( answers, ret_7);
    }


  if (((t_0_j - t_0_i) >= 6))
    {
      for(      unsigned int t_0_k_1 = (t_0_i + 5); (t_0_k_1 <= (t_0_j - 1)); ++t_0_k_1)
      {
        TUSubsequence ret_12;
        if (unpaired(t_0_seq, t_0_k_1, t_0_j))
          {
            ret_12 = REGION(t_0_seq, t_0_k_1, t_0_j);
          }

        else
          {
            empty( ret_12);
          }

        TUSubsequence a_8 = ret_12;
        if (is_not_empty(a_8))
        {
          mfecovar ret_10;
          if (((t_0_k_1 - t_0_i) >= 5))
          {
            mfecovar ret_11 = nt_dangle(t_0_i, t_0_k_1);
            mfecovar a_7 = ret_11;
            if (is_not_empty(a_7))
              {
                ret_10 = incl(a_7);
              }

            else
              {
                empty( ret_10);
              }

            erase( a_7);
          }

          else
            {
              empty( ret_10);
            }

          mfecovar a_6 = ret_10;
          if (is_not_empty(a_6))
          {
            mfecovar ans = addss(a_6, a_8);
            push_back_min( answers, ans);
          }

          erase( a_6);
        }

        erase( a_8);
      }

    }

  mfecovar eval = h(answers);
  erase( answers);
  ml_comps1_table.set( t_0_i, t_0_j, eval);
  return ml_comps1_table.get(t_0_i, t_0_j);
}

mfecovar mfe_nodangle::nt_multiloop(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 12))
    {
      return mfecovar_zero;
    }

  mfecovar answers;
  empty( answers);
  mfecovar ret_0;
  if (((t_0_j - t_0_i) >= 12))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_3 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_2 = ret_3;
        if (is_not_empty(a_2))
        {
          TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
          TUSubsequence a_0 = ret_1;
          if (is_not_empty(a_0))
          {
            mfecovar ret_2 = nt_ml_comps((t_0_i + 1), (t_0_j - 1));
            mfecovar a_1 = ret_2;
            if (is_not_empty(a_1))
              {
                ret_0 = ml(a_0, a_1, a_2);
              }

            else
              {
                empty( ret_0);
              }

            erase( a_1);
          }

          else
            {
              empty( ret_0);
            }

          erase( a_0);
        }

        else
          {
            empty( ret_0);
          }

        erase( a_2);
      }

      else
      {
        empty( ret_0);
        empty( ret_0);
      }

    }

  else
    {
      empty( ret_0);
    }

  answers = ret_0;
  return answers;
}

mfecovar mfe_nodangle::nt_rightB(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 8))
    {
      return mfecovar_zero;
    }

  mfecovar answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 8))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
        {
          for(          unsigned int t_0_k_0 = (((t_0_j - (t_0_i + 6)) >= 31)) ? ((t_0_j - 31)) : ((t_0_i + 6)); (t_0_k_0 <= (t_0_j - 2)); ++t_0_k_0)
          {
            TUSubsequence ret_4 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
            TUSubsequence a_3 = ret_4;
            if (is_not_empty(a_3))
            {
              TUSubsequence ret_3;
              if ((maxsize(t_0_seq, t_0_k_0, (t_0_j - 1), 30) && unpaired(t_0_seq, t_0_k_0, (t_0_j - 1))))
                {
                  ret_3 = REGION(t_0_seq, t_0_k_0, (t_0_j - 1));
                }

              else
                {
                  empty( ret_3);
                }

              TUSubsequence a_2 = ret_3;
              if (is_not_empty(a_2))
              {
                TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                TUSubsequence a_0 = ret_1;
                if (is_not_empty(a_0))
                {
                  mfecovar ret_2 = nt_strong((t_0_i + 1), t_0_k_0);
                  mfecovar a_1 = ret_2;
                  if (is_not_empty(a_1))
                  {
                    mfecovar ans = br(a_0, a_1, a_2, a_3);
                    push_back_min( answers, ans);
                  }

                  erase( a_1);
                }

                erase( a_0);
              }

              erase( a_2);
            }

            erase( a_3);
          }

        }

      else
        {
          empty( answers);
        }

    }

  mfecovar eval = h(answers);
  erase( answers);
  return eval;
}

mfecovar mfe_nodangle::nt_stack(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 7))
    {
      return mfecovar_zero;
    }

  mfecovar answers;
  empty(answers);
  empty( answers);
  mfecovar ret_0;
  if (((t_0_j - t_0_i) >= 7))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_3 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_2 = ret_3;
        if (is_not_empty(a_2))
        {
          TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
          TUSubsequence a_0 = ret_1;
          if (is_not_empty(a_0))
          {
            mfecovar ret_2 = nt_weak((t_0_i + 1), (t_0_j - 1));
            mfecovar a_1 = ret_2;
            if (is_not_empty(a_1))
              {
                ret_0 = sr(a_0, a_1, a_2);
              }

            else
              {
                empty( ret_0);
              }

            erase( a_1);
          }

          else
            {
              empty( ret_0);
            }

          erase( a_0);
        }

        else
          {
            empty( ret_0);
          }

        erase( a_2);
      }

      else
      {
        empty( ret_0);
        empty( ret_0);
      }

    }

  else
    {
      empty( ret_0);
    }

  if (is_not_empty(ret_0))
    {
      push_back_min( answers, ret_0);
    }

  mfecovar eval = h(answers);
  erase( answers);
  return eval;
}

mfecovar &  mfe_nodangle::nt_strong(unsigned int t_0_i, unsigned int t_0_j)
{
  if (strong_table.is_tabulated(t_0_i, t_0_j))
    {
      return strong_table.get(t_0_i, t_0_j);
    }

  mfecovar answers;
  empty(answers);
  empty( answers);
  mfecovar ret_0;
  empty( ret_0);
  if (allowLonelyBasepairs(t_0_seq, t_0_i, t_0_j, false))
  {
    mfecovar ret_1;
    if (((t_0_j - t_0_i) >= 7))
      {
        if (basepair(t_0_seq, t_0_i, t_0_j))
        {
          TUSubsequence ret_4 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
          TUSubsequence a_2 = ret_4;
          if (is_not_empty(a_2))
          {
            TUSubsequence ret_2 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
            TUSubsequence a_0 = ret_2;
            if (is_not_empty(a_0))
            {
              mfecovar ret_3 = nt_weak((t_0_i + 1), (t_0_j - 1));
              mfecovar a_1 = ret_3;
              if (is_not_empty(a_1))
                {
                  ret_1 = sr(a_0, a_1, a_2);
                }

              else
                {
                  empty( ret_1);
                }

              erase( a_1);
            }

            else
              {
                empty( ret_1);
              }

            erase( a_0);
          }

          else
            {
              empty( ret_1);
            }

          erase( a_2);
        }

        else
        {
          empty( ret_1);
          empty( ret_1);
        }

      }

    else
      {
        empty( ret_1);
      }

    ret_0 = ret_1;
  }

  if (is_not_empty(ret_0))
    {
      push_back_min( answers, ret_0);
    }

  mfecovar ret_5;
  empty( ret_5);
  if (allowLonelyBasepairs(t_0_seq, t_0_i, t_0_j, true))
  {
    mfecovar ret_6 = nt_weak(t_0_i, t_0_j);
    ret_5 = ret_6;
  }

  if (is_not_empty(ret_5))
    {
      push_back_min( answers, ret_5);
    }

  mfecovar eval = h(answers);
  erase( answers);
  strong_table.set( t_0_i, t_0_j, eval);
  return strong_table.get(t_0_i, t_0_j);
}

mfecovar &  mfe_nodangle::nt_struct(unsigned int t_0_i)
{
  if (struct_table.is_tabulated(t_0_i))
    {
      return struct_table.get(t_0_i);
    }

  mfecovar answers;
  empty(answers);
  empty( answers);
  mfecovar ret_0;
  if (((t_0_right_most - t_0_i) >= 1))
  {
    TUSubsequence ret_1;
    if (unpaired(t_0_seq, t_0_i, (t_0_i + 1)))
      {
        ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
      }

    else
      {
        empty( ret_1);
      }

    TUSubsequence a_0 = ret_1;
    if (is_not_empty(a_0))
    {
      mfecovar ret_2 = nt_struct((t_0_i + 1));
      mfecovar a_1 = ret_2;
      if (is_not_empty(a_1))
        {
          ret_0 = sadd(a_0, a_1);
        }

      else
        {
          empty( ret_0);
        }

      erase( a_1);
    }

    else
      {
        empty( ret_0);
      }

    erase( a_0);
  }

  else
    {
      empty( ret_0);
    }

  if (is_not_empty(ret_0))
    {
      push_back_min( answers, ret_0);
    }


  if (((t_0_right_most - t_0_i) >= 5))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 5); (t_0_k_0 <= t_0_right_most); ++t_0_k_0)
      {
        mfecovar ret_5 = nt_struct(t_0_k_0);
        mfecovar a_3 = ret_5;
        if (is_not_empty(a_3))
        {
          mfecovar ret_4 = nt_dangle(t_0_i, t_0_k_0);
          mfecovar a_2 = ret_4;
          if (is_not_empty(a_2))
          {
            mfecovar ans = cadd(a_2, a_3);
            push_back_min( answers, ans);
          }

          erase( a_2);
        }

        erase( a_3);
      }

    }

  mfecovar ret_6;
  if ((((t_0_right_most - t_0_i) >= 0) && ((t_0_right_most - t_0_i) <= 0)))
  {
    TUSubsequence ret_7 = LOC(t_0_seq, t_0_i, t_0_i);
    TUSubsequence a_4 = ret_7;
    if (is_not_empty(a_4))
      {
        ret_6 = nil(a_4);
      }

    else
      {
        empty( ret_6);
      }

    erase( a_4);
  }

  else
    {
      empty( ret_6);
    }

  if (is_not_empty(ret_6))
    {
      push_back_min( answers, ret_6);
    }

  mfecovar eval = h(answers);
  erase( answers);
  struct_table.set( t_0_i, eval);
  return struct_table.get(t_0_i);
}

mfecovar &  mfe_nodangle::nt_weak(unsigned int t_0_i, unsigned int t_0_j)
{
  if (weak_table.is_tabulated(t_0_i, t_0_j))
    {
      return weak_table.get(t_0_i, t_0_j);
    }

  mfecovar answers;
  empty(answers);
  empty( answers);


  mfecovar ret_1 = nt_stack(t_0_i, t_0_j);
  if (is_not_empty(ret_1))
    {
      push_back_min( answers, ret_1);
    }

  mfecovar ret_2 = nt_hairpin(t_0_i, t_0_j);
  if (is_not_empty(ret_2))
    {
      push_back_min( answers, ret_2);
    }

  mfecovar ret_3 = nt_leftB(t_0_i, t_0_j);
  if (is_not_empty(ret_3))
    {
      push_back_min( answers, ret_3);
    }

  mfecovar ret_4 = nt_rightB(t_0_i, t_0_j);
  if (is_not_empty(ret_4))
    {
      push_back_min( answers, ret_4);
    }

  mfecovar ret_5 = nt_iloop(t_0_i, t_0_j);
  if (is_not_empty(ret_5))
    {
      push_back_min( answers, ret_5);
    }

  mfecovar ret_6 = nt_multiloop(t_0_i, t_0_j);
  if (is_not_empty(ret_6))
    {
      push_back_min( answers, ret_6);
    }

  mfecovar eval = h(answers);
  erase( answers);
  weak_table.set( t_0_i, t_0_j, eval);
  return weak_table.get(t_0_i, t_0_j);
}


mfecovar mfe_nodangle::addss(const mfecovar & x, const TUSubsequence & r)
{
#line 1661 "../../../../ali_nodangle.gap"
  mfecovar res = x;
  res.mfe = (res.mfe +  ( (ss_energy(r) / float(rows(r))) ) );
  return res;
#line 1152 "mfe_nodangle.cc"
}

mfecovar mfe_nodangle::bl(const TUSubsequence & lb, const TUSubsequence & lr, const mfecovar & x, const TUSubsequence & rb)
{
#line 1597 "../../../../ali_nodangle.gap"
  mfecovar res = x;
  res.mfe = (res.mfe +  ( (bl_energy(lr, rb) / float(rows(lb))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 1162 "mfe_nodangle.cc"
}

mfecovar mfe_nodangle::br(const TUSubsequence & lb, const mfecovar & x, const TUSubsequence & rr, const TUSubsequence & rb)
{
#line 1605 "../../../../ali_nodangle.gap"
  mfecovar res = x;
  res.mfe = (res.mfe +  ( (br_energy(lb, rr) / float(rows(lb))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 1172 "mfe_nodangle.cc"
}

mfecovar mfe_nodangle::cadd(const mfecovar & x, const mfecovar & y)
{
#line 1542 "../../../../ali_nodangle.gap"
  return  ( (x + y) ) ;
#line 1179 "mfe_nodangle.cc"
}

mfecovar mfe_nodangle::drem(const TUSubsequence & lb, const mfecovar & x, const TUSubsequence & rb)
{
#line 1574 "../../../../ali_nodangle.gap"
  mfecovar res = x;
  res.mfe = (res.mfe +  ( (termau_energy(lb, rb) / float(rows(lb))) ) );
  return res;
#line 1188 "mfe_nodangle.cc"
}

mfecovar mfe_nodangle::h(mfecovar i)
{
  return i;
  return minimum(i);
}

mfecovar mfe_nodangle::hl(const TUSubsequence & lb, const TUSubsequence & r, const TUSubsequence & rb)
{
#line 1589 "../../../../ali_nodangle.gap"
  mfecovar res;
  res.mfe =  ( (hl_energy(r) / float(rows(r))) ) ;
  res.covar = covscore(lb, lb.i, rb.i);
  return res;
#line 1204 "mfe_nodangle.cc"
}

mfecovar mfe_nodangle::il(const TUSubsequence & lb, const TUSubsequence & lr, const mfecovar & x, const TUSubsequence & rr, const TUSubsequence & rb)
{
#line 1613 "../../../../ali_nodangle.gap"
  mfecovar res = x;
  res.mfe = (res.mfe +  ( (il_energy(lr, rr) / float(rows(lr))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 1214 "mfe_nodangle.cc"
}

mfecovar mfe_nodangle::incl(const mfecovar & x)
{
#line 1654 "../../../../ali_nodangle.gap"
  mfecovar res = x;
  res.mfe = (res.mfe + ul_energy());
  return res;
#line 1223 "mfe_nodangle.cc"
}

mfecovar mfe_nodangle::ml(const TUSubsequence & lb, const mfecovar & x, const TUSubsequence & rb)
{
#line 1646 "../../../../ali_nodangle.gap"
  mfecovar res = x;
  res.mfe = (((res.mfe + ml_energy()) + ul_energy()) +  ( (termau_energy(lb, rb) / float(rows(lb))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 1233 "mfe_nodangle.cc"
}

mfecovar mfe_nodangle::nil(const TUSubsequence & n)
{
#line 1668 "../../../../ali_nodangle.gap"
  mfecovar res;
  res.mfe = 0;
  res.covar = 0;
  return res;
#line 1243 "mfe_nodangle.cc"
}

mfecovar mfe_nodangle::sadd(const TUSubsequence & lb, const mfecovar & x)
{
#line 1529 "../../../../ali_nodangle.gap"
  mfecovar res = x;
  int sbase_sum = 0;
  for(  int k = 0; (k < int(rows(lb)));   k = (k + 1))
  {
    if ((column(seq_char(lb, lb.i), k) != GAP_BASE))
      {
        sbase_sum = (sbase_sum + sbase_energy());
      }

  }

  res.mfe = (res.mfe +  ( (sbase_sum / float(rows(lb))) ) );
  return res;
#line 1262 "mfe_nodangle.cc"
}

mfecovar mfe_nodangle::sr(const TUSubsequence & lb, const mfecovar & x, const TUSubsequence & rb)
{
#line 1581 "../../../../ali_nodangle.gap"
  mfecovar res = x;
  res.mfe = (res.mfe +  ( (sr_energy(lb, rb) / float(rows(lb))) ) );
  res.covar = (res.covar + covscore(lb, lb.i, rb.i));
  return res;
#line 1272 "mfe_nodangle.cc"
}


    void mfe_nodangle::cyk()
{

}



#ident "$Id: Compiled with gapc bellmansgapc-2013.05.02 $"

List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > mfe_nodangle::bt_proxy_nt_struct(unsigned int t_0_i)
{
  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > l;
  empty(l);
  mfecovar ret = nt_struct(t_0_i);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_struct_Back<mfe_nodangle, std::pair<std::pair<String, Shape> , double> , unsigned int>  >  bt = new Backtrace_nt_struct_Back<mfe_nodangle, std::pair<std::pair<String, Shape> , double> , unsigned int> (this, t_0_i);
  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_struct_Front<std::pair<std::pair<String, Shape> , double> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > mfe_nodangle::bt_proxy_nt_dangle(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > l;
  empty(l);
  mfecovar ret = nt_dangle(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_dangle_Back<mfe_nodangle, std::pair<std::pair<String, Shape> , double> , unsigned int>  >  bt = new Backtrace_nt_dangle_Back<mfe_nodangle, std::pair<std::pair<String, Shape> , double> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_dangle_Front<std::pair<std::pair<String, Shape> , double> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > mfe_nodangle::bt_proxy_nt_strong(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > l;
  empty(l);
  mfecovar ret = nt_strong(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_strong_Back<mfe_nodangle, std::pair<std::pair<String, Shape> , double> , unsigned int>  >  bt = new Backtrace_nt_strong_Back<mfe_nodangle, std::pair<std::pair<String, Shape> , double> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_strong_Front<std::pair<std::pair<String, Shape> , double> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > mfe_nodangle::bt_proxy_nt_weak(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > l;
  empty(l);
  mfecovar ret = nt_weak(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_weak_Back<mfe_nodangle, std::pair<std::pair<String, Shape> , double> , unsigned int>  >  bt = new Backtrace_nt_weak_Back<mfe_nodangle, std::pair<std::pair<String, Shape> , double> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_weak_Front<std::pair<std::pair<String, Shape> , double> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > mfe_nodangle::bt_proxy_nt_stack(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > l;
  empty(l);
  mfecovar ret = nt_stack(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_stack_Back<mfe_nodangle, std::pair<std::pair<String, Shape> , double> , unsigned int>  >  bt = new Backtrace_nt_stack_Back<mfe_nodangle, std::pair<std::pair<String, Shape> , double> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_stack_Front<std::pair<std::pair<String, Shape> , double> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  mfe_nodangle::bt_proxy_nt_hairpin(unsigned int t_0_i, unsigned int t_0_j)
{
  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  l;
  mfecovar ret = nt_hairpin(t_0_i, t_0_j);
  if (isEmpty(ret))
  {
    empty( l);
    return l;
  }

  intrusive_ptr<Backtrace_nt_hairpin_Back<mfe_nodangle, std::pair<std::pair<String, Shape> , double> , unsigned int>  >  bt = new Backtrace_nt_hairpin_Back<mfe_nodangle, std::pair<std::pair<String, Shape> , double> , unsigned int> (this, t_0_i, t_0_j);
  l.first = ret;
  l.second = new Backtrace_nt_hairpin_Front<std::pair<std::pair<String, Shape> , double> , unsigned int> (bt);
  set_value( l);
  return l;
}

List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > mfe_nodangle::bt_proxy_nt_leftB(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > l;
  empty(l);
  mfecovar ret = nt_leftB(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_leftB_Back<mfe_nodangle, std::pair<std::pair<String, Shape> , double> , unsigned int>  >  bt = new Backtrace_nt_leftB_Back<mfe_nodangle, std::pair<std::pair<String, Shape> , double> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_leftB_Front<std::pair<std::pair<String, Shape> , double> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > mfe_nodangle::bt_proxy_nt_rightB(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > l;
  empty(l);
  mfecovar ret = nt_rightB(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_rightB_Back<mfe_nodangle, std::pair<std::pair<String, Shape> , double> , unsigned int>  >  bt = new Backtrace_nt_rightB_Back<mfe_nodangle, std::pair<std::pair<String, Shape> , double> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_rightB_Front<std::pair<std::pair<String, Shape> , double> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > mfe_nodangle::bt_proxy_nt_iloop(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > l;
  empty(l);
  mfecovar ret = nt_iloop(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_iloop_Back<mfe_nodangle, std::pair<std::pair<String, Shape> , double> , unsigned int>  >  bt = new Backtrace_nt_iloop_Back<mfe_nodangle, std::pair<std::pair<String, Shape> , double> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_iloop_Front<std::pair<std::pair<String, Shape> , double> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > mfe_nodangle::bt_proxy_nt_multiloop(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > l;
  empty(l);
  mfecovar ret = nt_multiloop(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_multiloop_Back<mfe_nodangle, std::pair<std::pair<String, Shape> , double> , unsigned int>  >  bt = new Backtrace_nt_multiloop_Back<mfe_nodangle, std::pair<std::pair<String, Shape> , double> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_multiloop_Front<std::pair<std::pair<String, Shape> , double> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > mfe_nodangle::bt_proxy_nt_ml_comps(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > l;
  empty(l);
  mfecovar ret = nt_ml_comps(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_ml_comps_Back<mfe_nodangle, std::pair<std::pair<String, Shape> , double> , unsigned int>  >  bt = new Backtrace_nt_ml_comps_Back<mfe_nodangle, std::pair<std::pair<String, Shape> , double> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_ml_comps_Front<std::pair<std::pair<String, Shape> , double> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > mfe_nodangle::bt_proxy_nt_ml_comps1(unsigned int t_0_i, unsigned int t_0_j)
{
  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > l;
  empty(l);
  mfecovar ret = nt_ml_comps1(t_0_i, t_0_j);
  if (isEmpty(ret))
    {
      return l;
    }

  intrusive_ptr<Backtrace_nt_ml_comps1_Back<mfe_nodangle, std::pair<std::pair<String, Shape> , double> , unsigned int>  >  bt = new Backtrace_nt_ml_comps1_Back<mfe_nodangle, std::pair<std::pair<String, Shape> , double> , unsigned int> (this, t_0_i, t_0_j);
  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  tupel;
  tupel.first = ret;
  tupel.second = new Backtrace_nt_ml_comps1_Front<std::pair<std::pair<String, Shape> , double> , unsigned int> (bt);
  set_value( tupel);
  push_back_min_other( l, tupel);
  return l;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  mfe_nodangle::bt_nt_dangle(unsigned int t_0_i, unsigned int t_0_j)
{
  if (!dangle_table.is_tabulated(t_0_i, t_0_j))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 5))
  {
    TUSubsequence ret_3 = LOC(t_0_seq, t_0_j, t_0_j);
    TUSubsequence a_2 = ret_3;
    if (is_not_empty(a_2))
    {
      TUSubsequence ret_1 = LOC(t_0_seq, t_0_i, t_0_i);
      TUSubsequence a_0 = ret_1;
      if (is_not_empty(a_0))
      {
        List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > ret_2 = bt_proxy_nt_strong(t_0_i, t_0_j);
        List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > a_1 = ret_2;
        if (is_not_empty(a_1))
          {
            for (List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
              std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  x_1 = *x_1_itr;
              std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ans = drem_bt(a_0, x_1, a_2);
              push_back_min_other( answers, ans);
            }
          }

        erase( a_1);
      }

      erase( a_0);
    }

    erase( a_2);
  }

  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > eval = h_bt(answers, dangle_table.get(t_0_i, t_0_j));
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  mfe_nodangle::bt_nt_hairpin(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 5))
    {
      return 0;
    }

  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  answers;
  empty( answers);
  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ret_0;
  if (((t_0_j - t_0_i) >= 5))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_3 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_2 = ret_3;
        if (is_not_empty(a_2))
        {
          TUSubsequence ret_2;
          if ((minsize(t_0_seq, (t_0_i + 1), (t_0_j - 1), 3) && unpaired(t_0_seq, (t_0_i + 1), (t_0_j - 1))))
            {
              ret_2 = REGION(t_0_seq, (t_0_i + 1), (t_0_j - 1));
            }

          else
            {
              empty( ret_2);
            }

          TUSubsequence a_1 = ret_2;
          if (is_not_empty(a_1))
          {
            TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
            TUSubsequence a_0 = ret_1;
            if (is_not_empty(a_0))
              {
                ret_0 = hl_bt(a_0, a_1, a_2);
              }

            else
              {
                empty( ret_0);
              }

            erase( a_0);
          }

          else
            {
              empty( ret_0);
            }

          erase( a_1);
        }

        else
          {
            empty( ret_0);
          }

        erase( a_2);
      }

      else
      {
        empty( ret_0);
        empty( ret_0);
      }

    }

  else
    {
      empty( ret_0);
    }

  answers = ret_0;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  bt_list = execute_backtrace_k_one(answers);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  mfe_nodangle::bt_nt_iloop(unsigned int t_0_i, unsigned int t_0_j)
{
  if (!iloop_table.is_tabulated(t_0_i, t_0_j))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 9))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
        {
          for(          unsigned int t_0_k_0 = (t_0_i + 2); ((t_0_k_0 <= (t_0_j - 7)) && (t_0_k_0 <= (t_0_i + 31))); ++t_0_k_0)
          {
            for(            unsigned int t_0_k_1 = (((t_0_j - (t_0_k_0 + 5)) >= 31)) ? ((t_0_j - 31)) : ((t_0_k_0 + 5)); (t_0_k_1 <= (t_0_j - 2)); ++t_0_k_1)
            {
              TUSubsequence ret_5 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
              TUSubsequence a_4 = ret_5;
              if (is_not_empty(a_4))
              {
                TUSubsequence ret_4;
                if ((maxsize(t_0_seq, t_0_k_1, (t_0_j - 1), 30) && unpaired(t_0_seq, t_0_k_1, (t_0_j - 1))))
                  {
                    ret_4 = REGION(t_0_seq, t_0_k_1, (t_0_j - 1));
                  }

                else
                  {
                    empty( ret_4);
                  }

                TUSubsequence a_3 = ret_4;
                if (is_not_empty(a_3))
                {
                  TUSubsequence ret_2;
                  if ((maxsize(t_0_seq, (t_0_i + 1), t_0_k_0, 30) && unpaired(t_0_seq, (t_0_i + 1), t_0_k_0)))
                    {
                      ret_2 = REGION(t_0_seq, (t_0_i + 1), t_0_k_0);
                    }

                  else
                    {
                      empty( ret_2);
                    }

                  TUSubsequence a_1 = ret_2;
                  if (is_not_empty(a_1))
                  {
                    TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                    TUSubsequence a_0 = ret_1;
                    if (is_not_empty(a_0))
                    {
                      List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > ret_3 = bt_proxy_nt_strong(t_0_k_0, t_0_k_1);
                      List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > a_2 = ret_3;
                      if (is_not_empty(a_2))
                        {
                          for (List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                            std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  x_2 = *x_2_itr;
                            std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ans = il_bt(a_0, a_1, x_2, a_3, a_4);
                            push_back_min_other( answers, ans);
                          }
                        }

                      erase( a_2);
                    }

                    erase( a_0);
                  }

                  erase( a_1);
                }

                erase( a_3);
              }

              erase( a_4);
            }

          }

        }

      else
        {
          empty( answers);
        }

    }

  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > eval = h_bt(answers, iloop_table.get(t_0_i, t_0_j));
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  mfe_nodangle::bt_nt_leftB(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 8))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 8))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
        {
          for(          unsigned int t_0_k_0 = (t_0_i + 2); ((t_0_k_0 <= (t_0_j - 6)) && (t_0_k_0 <= (t_0_i + 31))); ++t_0_k_0)
          {
            TUSubsequence ret_4 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
            TUSubsequence a_3 = ret_4;
            if (is_not_empty(a_3))
            {
              TUSubsequence ret_2;
              if ((maxsize(t_0_seq, (t_0_i + 1), t_0_k_0, 30) && unpaired(t_0_seq, (t_0_i + 1), t_0_k_0)))
                {
                  ret_2 = REGION(t_0_seq, (t_0_i + 1), t_0_k_0);
                }

              else
                {
                  empty( ret_2);
                }

              TUSubsequence a_1 = ret_2;
              if (is_not_empty(a_1))
              {
                TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                TUSubsequence a_0 = ret_1;
                if (is_not_empty(a_0))
                {
                  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > ret_3 = bt_proxy_nt_strong(t_0_k_0, (t_0_j - 1));
                  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > a_2 = ret_3;
                  if (is_not_empty(a_2))
                    {
                      for (List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                        std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  x_2 = *x_2_itr;
                        std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ans = bl_bt(a_0, a_1, x_2, a_3);
                        push_back_min_other( answers, ans);
                      }
                    }

                  erase( a_2);
                }

                erase( a_0);
              }

              erase( a_1);
            }

            erase( a_3);
          }

        }

      else
        {
          empty( answers);
        }

    }

  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > eval = h_bt(answers);
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  mfe_nodangle::bt_nt_ml_comps(unsigned int t_0_i, unsigned int t_0_j)
{
  if (!ml_comps_table.is_tabulated(t_0_i, t_0_j))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 11))
  {
    TUSubsequence ret_1;
    if (unpaired(t_0_seq, t_0_i, (t_0_i + 1)))
      {
        ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
      }

    else
      {
        empty( ret_1);
      }

    TUSubsequence a_0 = ret_1;
    if (is_not_empty(a_0))
    {
      List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > ret_2 = bt_proxy_nt_ml_comps((t_0_i + 1), t_0_j);
      List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > a_1 = ret_2;
      if (is_not_empty(a_1))
        {
          for (List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
            std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  x_1 = *x_1_itr;
            std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ans = sadd_bt(a_0, x_1);
            push_back_min_other( answers, ans);
          }
        }

      erase( a_1);
    }

    erase( a_0);
  }


  if (((t_0_j - t_0_i) >= 10))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 5); (t_0_k_0 <= (t_0_j - 5)); ++t_0_k_0)
      {
        List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > ret_6 = bt_proxy_nt_ml_comps1(t_0_k_0, t_0_j);
        List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > a_4 = ret_6;
        if (is_not_empty(a_4))
        {
          List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > ret_4;
          empty(ret_4);
          if (((t_0_k_0 - t_0_i) >= 5))
          {
            List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > ret_5 = bt_proxy_nt_dangle(t_0_i, t_0_k_0);
            List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > a_3 = ret_5;
            if (is_not_empty(a_3))
              {
                for (List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > >::iterator x_3_itr = a_3.ref().begin(); x_3_itr!=a_3.ref().end(); ++x_3_itr){
                  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  x_3 = *x_3_itr;
                  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ans = incl_bt(x_3);
                  push_back_min_other( ret_4, ans);
                }
              }

            erase( a_3);
          }

          finalize( ret_4);
          List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > a_2 = ret_4;
          if (is_not_empty(a_2))
            {
              for (List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  x_2 = *x_2_itr;
                for (List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > >::iterator x_4_itr = a_4.ref().begin(); x_4_itr!=a_4.ref().end(); ++x_4_itr){
                  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  x_4 = *x_4_itr;
                  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ans = cadd_bt(x_2, x_4);
                  push_back_min_other( answers, ans);
                }
              }
            }

          erase( a_2);
        }

        else
          {
            for (List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > >::iterator elem_itr = a_4.ref().begin(); elem_itr!=a_4.ref().end(); ++elem_itr){
              std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  elem = *elem_itr;
              erase( elem.second);
            }
          }

        erase( a_4);
      }

    }

  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > eval = h_bt(answers, ml_comps_table.get(t_0_i, t_0_j));
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  mfe_nodangle::bt_nt_ml_comps1(unsigned int t_0_i, unsigned int t_0_j)
{
  if (!ml_comps1_table.is_tabulated(t_0_i, t_0_j))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 6))
  {
    TUSubsequence ret_1;
    if (unpaired(t_0_seq, t_0_i, (t_0_i + 1)))
      {
        ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
      }

    else
      {
        empty( ret_1);
      }

    TUSubsequence a_0 = ret_1;
    if (is_not_empty(a_0))
    {
      List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > ret_2 = bt_proxy_nt_ml_comps1((t_0_i + 1), t_0_j);
      List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > a_1 = ret_2;
      if (is_not_empty(a_1))
        {
          for (List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
            std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  x_1 = *x_1_itr;
            std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ans = sadd_bt(a_0, x_1);
            push_back_min_other( answers, ans);
          }
        }

      erase( a_1);
    }

    erase( a_0);
  }


  if (((t_0_j - t_0_i) >= 10))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 5); (t_0_k_0 <= (t_0_j - 5)); ++t_0_k_0)
      {
        List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > ret_6 = bt_proxy_nt_ml_comps1(t_0_k_0, t_0_j);
        List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > a_4 = ret_6;
        if (is_not_empty(a_4))
        {
          List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > ret_4;
          empty(ret_4);
          if (((t_0_k_0 - t_0_i) >= 5))
          {
            List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > ret_5 = bt_proxy_nt_dangle(t_0_i, t_0_k_0);
            List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > a_3 = ret_5;
            if (is_not_empty(a_3))
              {
                for (List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > >::iterator x_3_itr = a_3.ref().begin(); x_3_itr!=a_3.ref().end(); ++x_3_itr){
                  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  x_3 = *x_3_itr;
                  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ans = incl_bt(x_3);
                  push_back_min_other( ret_4, ans);
                }
              }

            erase( a_3);
          }

          finalize( ret_4);
          List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > a_2 = ret_4;
          if (is_not_empty(a_2))
            {
              for (List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  x_2 = *x_2_itr;
                for (List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > >::iterator x_4_itr = a_4.ref().begin(); x_4_itr!=a_4.ref().end(); ++x_4_itr){
                  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  x_4 = *x_4_itr;
                  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ans = cadd_bt(x_2, x_4);
                  push_back_min_other( answers, ans);
                }
              }
            }

          erase( a_2);
        }

        else
          {
            for (List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > >::iterator elem_itr = a_4.ref().begin(); elem_itr!=a_4.ref().end(); ++elem_itr){
              std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  elem = *elem_itr;
              erase( elem.second);
            }
          }

        erase( a_4);
      }

    }


  if (((t_0_j - t_0_i) >= 5))
  {
    List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > ret_8 = bt_proxy_nt_dangle(t_0_i, t_0_j);
    List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > a_5 = ret_8;
    if (is_not_empty(a_5))
      {
        for (List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > >::iterator x_5_itr = a_5.ref().begin(); x_5_itr!=a_5.ref().end(); ++x_5_itr){
          std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  x_5 = *x_5_itr;
          std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ans = incl_bt(x_5);
          push_back_min_other( answers, ans);
        }
      }

    erase( a_5);
  }


  if (((t_0_j - t_0_i) >= 6))
    {
      for(      unsigned int t_0_k_1 = (t_0_i + 5); (t_0_k_1 <= (t_0_j - 1)); ++t_0_k_1)
      {
        TUSubsequence ret_12;
        if (unpaired(t_0_seq, t_0_k_1, t_0_j))
          {
            ret_12 = REGION(t_0_seq, t_0_k_1, t_0_j);
          }

        else
          {
            empty( ret_12);
          }

        TUSubsequence a_8 = ret_12;
        if (is_not_empty(a_8))
        {
          List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > ret_10;
          empty(ret_10);
          if (((t_0_k_1 - t_0_i) >= 5))
          {
            List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > ret_11 = bt_proxy_nt_dangle(t_0_i, t_0_k_1);
            List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > a_7 = ret_11;
            if (is_not_empty(a_7))
              {
                for (List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > >::iterator x_7_itr = a_7.ref().begin(); x_7_itr!=a_7.ref().end(); ++x_7_itr){
                  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  x_7 = *x_7_itr;
                  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ans = incl_bt(x_7);
                  push_back_min_other( ret_10, ans);
                }
              }

            erase( a_7);
          }

          finalize( ret_10);
          List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > a_6 = ret_10;
          if (is_not_empty(a_6))
            {
              for (List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > >::iterator x_6_itr = a_6.ref().begin(); x_6_itr!=a_6.ref().end(); ++x_6_itr){
                std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  x_6 = *x_6_itr;
                std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ans = addss_bt(x_6, a_8);
                push_back_min_other( answers, ans);
              }
            }

          erase( a_6);
        }

        erase( a_8);
      }

    }

  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > eval = h_bt(answers, ml_comps1_table.get(t_0_i, t_0_j));
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  mfe_nodangle::bt_nt_multiloop(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 12))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 12))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_3 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_2 = ret_3;
        if (is_not_empty(a_2))
        {
          TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
          TUSubsequence a_0 = ret_1;
          if (is_not_empty(a_0))
          {
            List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > ret_2 = bt_proxy_nt_ml_comps((t_0_i + 1), (t_0_j - 1));
            List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > a_1 = ret_2;
            if (is_not_empty(a_1))
              {
                for (List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  x_1 = *x_1_itr;
                  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ans = ml_bt(a_0, x_1, a_2);
                  push_back_min_other( answers, ans);
                }
              }

            erase( a_1);
          }

          erase( a_0);
        }

        erase( a_2);
      }

      else
        {
          empty( answers);
        }

    }

  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  bt_list = execute_backtrace_k_one(answers);
  erase( answers);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  mfe_nodangle::bt_nt_rightB(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 8))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 8))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
        {
          for(          unsigned int t_0_k_0 = (((t_0_j - (t_0_i + 6)) >= 31)) ? ((t_0_j - 31)) : ((t_0_i + 6)); (t_0_k_0 <= (t_0_j - 2)); ++t_0_k_0)
          {
            TUSubsequence ret_4 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
            TUSubsequence a_3 = ret_4;
            if (is_not_empty(a_3))
            {
              TUSubsequence ret_3;
              if ((maxsize(t_0_seq, t_0_k_0, (t_0_j - 1), 30) && unpaired(t_0_seq, t_0_k_0, (t_0_j - 1))))
                {
                  ret_3 = REGION(t_0_seq, t_0_k_0, (t_0_j - 1));
                }

              else
                {
                  empty( ret_3);
                }

              TUSubsequence a_2 = ret_3;
              if (is_not_empty(a_2))
              {
                TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
                TUSubsequence a_0 = ret_1;
                if (is_not_empty(a_0))
                {
                  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > ret_2 = bt_proxy_nt_strong((t_0_i + 1), t_0_k_0);
                  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > a_1 = ret_2;
                  if (is_not_empty(a_1))
                    {
                      for (List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                        std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  x_1 = *x_1_itr;
                        std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ans = br_bt(a_0, x_1, a_2, a_3);
                        push_back_min_other( answers, ans);
                      }
                    }

                  erase( a_1);
                }

                erase( a_0);
              }

              erase( a_2);
            }

            erase( a_3);
          }

        }

      else
        {
          empty( answers);
        }

    }

  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > eval = h_bt(answers);
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  mfe_nodangle::bt_nt_stack(unsigned int t_0_i, unsigned int t_0_j)
{
  if (((t_0_j - t_0_i) < 7))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_j - t_0_i) >= 7))
    {
      if (basepair(t_0_seq, t_0_i, t_0_j))
      {
        TUSubsequence ret_3 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
        TUSubsequence a_2 = ret_3;
        if (is_not_empty(a_2))
        {
          TUSubsequence ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
          TUSubsequence a_0 = ret_1;
          if (is_not_empty(a_0))
          {
            List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > ret_2 = bt_proxy_nt_weak((t_0_i + 1), (t_0_j - 1));
            List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > a_1 = ret_2;
            if (is_not_empty(a_1))
              {
                for (List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  x_1 = *x_1_itr;
                  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ans = sr_bt(a_0, x_1, a_2);
                  push_back_min_other( answers, ans);
                }
              }

            erase( a_1);
          }

          erase( a_0);
        }

        erase( a_2);
      }

      else
        {
          empty( answers);
        }

    }

  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > eval = h_bt(answers);
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  mfe_nodangle::bt_nt_strong(unsigned int t_0_i, unsigned int t_0_j)
{
  if (!strong_table.is_tabulated(t_0_i, t_0_j))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);


  if (allowLonelyBasepairs(t_0_seq, t_0_i, t_0_j, false))
  {
    List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > ret_1;
    empty(ret_1);
    if (((t_0_j - t_0_i) >= 7))
      {
        if (basepair(t_0_seq, t_0_i, t_0_j))
        {
          TUSubsequence ret_4 = BASE(t_0_seq, (t_0_j - 1), t_0_j);
          TUSubsequence a_2 = ret_4;
          if (is_not_empty(a_2))
          {
            TUSubsequence ret_2 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
            TUSubsequence a_0 = ret_2;
            if (is_not_empty(a_0))
            {
              List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > ret_3 = bt_proxy_nt_weak((t_0_i + 1), (t_0_j - 1));
              List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > a_1 = ret_3;
              if (is_not_empty(a_1))
                {
                  for (List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
                    std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  x_1 = *x_1_itr;
                    std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ans = sr_bt(a_0, x_1, a_2);
                    push_back_min_other( ret_1, ans);
                  }
                }

              erase( a_1);
            }

            erase( a_0);
          }

          erase( a_2);
        }

        else
          {
            empty( ret_1);
          }

      }

    finalize( ret_1);
    append_min_other( answers, ret_1);
  }



  if (allowLonelyBasepairs(t_0_seq, t_0_i, t_0_j, true))
  {
    List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > ret_6 = bt_proxy_nt_weak(t_0_i, t_0_j);
    append_min_other( answers, ret_6);
  }

  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > eval = h_bt(answers, strong_table.get(t_0_i, t_0_j));
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  mfe_nodangle::bt_nt_struct(unsigned int t_0_i)
{
  if (!struct_table.is_tabulated(t_0_i))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);

  if (((t_0_right_most - t_0_i) >= 1))
  {
    TUSubsequence ret_1;
    if (unpaired(t_0_seq, t_0_i, (t_0_i + 1)))
      {
        ret_1 = BASE(t_0_seq, t_0_i, (t_0_i + 1));
      }

    else
      {
        empty( ret_1);
      }

    TUSubsequence a_0 = ret_1;
    if (is_not_empty(a_0))
    {
      List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > ret_2 = bt_proxy_nt_struct((t_0_i + 1));
      List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > a_1 = ret_2;
      if (is_not_empty(a_1))
        {
          for (List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > >::iterator x_1_itr = a_1.ref().begin(); x_1_itr!=a_1.ref().end(); ++x_1_itr){
            std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  x_1 = *x_1_itr;
            std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ans = sadd_bt(a_0, x_1);
            push_back_min_other( answers, ans);
          }
        }

      erase( a_1);
    }

    erase( a_0);
  }


  if (((t_0_right_most - t_0_i) >= 5))
    {
      for(      unsigned int t_0_k_0 = (t_0_i + 5); (t_0_k_0 <= t_0_right_most); ++t_0_k_0)
      {
        List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > ret_5 = bt_proxy_nt_struct(t_0_k_0);
        List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > a_3 = ret_5;
        if (is_not_empty(a_3))
        {
          List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > ret_4 = bt_proxy_nt_dangle(t_0_i, t_0_k_0);
          List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > a_2 = ret_4;
          if (is_not_empty(a_2))
            {
              for (List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > >::iterator x_2_itr = a_2.ref().begin(); x_2_itr!=a_2.ref().end(); ++x_2_itr){
                std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  x_2 = *x_2_itr;
                for (List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > >::iterator x_3_itr = a_3.ref().begin(); x_3_itr!=a_3.ref().end(); ++x_3_itr){
                  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  x_3 = *x_3_itr;
                  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ans = cadd_bt(x_2, x_3);
                  push_back_min_other( answers, ans);
                }
              }
            }

          erase( a_2);
        }

        else
          {
            for (List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > >::iterator elem_itr = a_3.ref().begin(); elem_itr!=a_3.ref().end(); ++elem_itr){
              std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  elem = *elem_itr;
              erase( elem.second);
            }
          }

        erase( a_3);
      }

    }

  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ret_6;
  if ((((t_0_right_most - t_0_i) >= 0) && ((t_0_right_most - t_0_i) <= 0)))
  {
    TUSubsequence ret_7 = LOC(t_0_seq, t_0_i, t_0_i);
    TUSubsequence a_4 = ret_7;
    if (is_not_empty(a_4))
      {
        ret_6 = nil_bt(a_4);
      }

    else
      {
        empty( ret_6);
      }

    erase( a_4);
  }

  else
    {
      empty( ret_6);
    }

  if (is_not_empty(ret_6))
    {
      push_back_min_other( answers, ret_6);
    }

  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > eval = h_bt(answers, struct_table.get(t_0_i));
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  mfe_nodangle::bt_nt_weak(unsigned int t_0_i, unsigned int t_0_j)
{
  if (!weak_table.is_tabulated(t_0_i, t_0_j))
    {
      return 0;
    }

  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > answers;
  empty(answers);
  empty( answers);


  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > ret_1 = bt_proxy_nt_stack(t_0_i, t_0_j);
  append_min_other( answers, ret_1);
  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ret_2 = bt_proxy_nt_hairpin(t_0_i, t_0_j);
  if (is_not_empty(ret_2))
    {
      push_back_min_other( answers, ret_2);
    }

  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > ret_3 = bt_proxy_nt_leftB(t_0_i, t_0_j);
  append_min_other( answers, ret_3);
  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > ret_4 = bt_proxy_nt_rightB(t_0_i, t_0_j);
  append_min_other( answers, ret_4);
  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > ret_5 = bt_proxy_nt_iloop(t_0_i, t_0_j);
  append_min_other( answers, ret_5);
  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > ret_6 = bt_proxy_nt_multiloop(t_0_i, t_0_j);
  append_min_other( answers, ret_6);
  List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > eval = h_bt(answers, weak_table.get(t_0_i, t_0_j));
  erase( answers);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  bt_list = execute_backtrace_k_one(eval);
  erase( eval);
  return bt_list;
}


intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  mfe_nodangle::addss_bt_r(intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  param_0, const TUSubsequence & param_1)
{
  return new Backtrace_addss<std::pair<std::pair<String, Shape> , double> , unsigned int> (param_0, param_1);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  mfe_nodangle::bl_bt_r(const TUSubsequence & param_0, const TUSubsequence & param_1, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  param_2, const TUSubsequence & param_3)
{
  return new Backtrace_bl<std::pair<std::pair<String, Shape> , double> , unsigned int> (param_0, param_1, param_2, param_3);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  mfe_nodangle::br_bt_r(const TUSubsequence & param_0, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  param_1, const TUSubsequence & param_2, const TUSubsequence & param_3)
{
  return new Backtrace_br<std::pair<std::pair<String, Shape> , double> , unsigned int> (param_0, param_1, param_2, param_3);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  mfe_nodangle::cadd_bt_r(intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  param_0, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  param_1)
{
  return new Backtrace_cadd<std::pair<std::pair<String, Shape> , double> , unsigned int> (param_0, param_1);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  mfe_nodangle::drem_bt_r(const TUSubsequence & param_0, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  param_1, const TUSubsequence & param_2)
{
  return new Backtrace_drem<std::pair<std::pair<String, Shape> , double> , unsigned int> (param_0, param_1, param_2);
}

List_Ref<intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > mfe_nodangle::h_bt_r(List_Ref<intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > param_0)
{
  return param_0;
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  mfe_nodangle::hl_bt_r(const TUSubsequence & param_0, const TUSubsequence & param_1, const TUSubsequence & param_2)
{
  return new Backtrace_hl<std::pair<std::pair<String, Shape> , double> , unsigned int> (param_0, param_1, param_2);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  mfe_nodangle::il_bt_r(const TUSubsequence & param_0, const TUSubsequence & param_1, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  param_2, const TUSubsequence & param_3, const TUSubsequence & param_4)
{
  return new Backtrace_il<std::pair<std::pair<String, Shape> , double> , unsigned int> (param_0, param_1, param_2, param_3, param_4);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  mfe_nodangle::incl_bt_r(intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  param_0)
{
  return new Backtrace_incl<std::pair<std::pair<String, Shape> , double> , unsigned int> (param_0);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  mfe_nodangle::ml_bt_r(const TUSubsequence & param_0, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  param_1, const TUSubsequence & param_2)
{
  return new Backtrace_ml<std::pair<std::pair<String, Shape> , double> , unsigned int> (param_0, param_1, param_2);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  mfe_nodangle::nil_bt_r(const TUSubsequence & param_0)
{
  return new Backtrace_nil<std::pair<std::pair<String, Shape> , double> , unsigned int> (param_0);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  mfe_nodangle::sadd_bt_r(const TUSubsequence & param_0, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  param_1)
{
  return new Backtrace_sadd<std::pair<std::pair<String, Shape> , double> , unsigned int> (param_0, param_1);
}

intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  mfe_nodangle::sr_bt_r(const TUSubsequence & param_0, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  param_1, const TUSubsequence & param_2)
{
  return new Backtrace_sr<std::pair<std::pair<String, Shape> , double> , unsigned int> (param_0, param_1, param_2);
}



std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  mfe_nodangle::addss_bt(const std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > & p_x, const TUSubsequence & p_r)
{
  mfecovar l_0 = p_x.first;
  TUSubsequence l_1 = p_r;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  r_0 = p_x.second;
  TUSubsequence r_1 = p_r;
  mfecovar ret_left = addss(l_0, l_1);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  ret_right = addss_bt_r(r_0, r_1);
  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  mfe_nodangle::bl_bt(const TUSubsequence & p_lb, const TUSubsequence & p_lr, const std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > & p_x, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  TUSubsequence l_1 = p_lr;
  mfecovar l_2 = p_x.first;
  TUSubsequence l_3 = p_rb;
  TUSubsequence r_0 = p_lb;
  TUSubsequence r_1 = p_lr;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  r_2 = p_x.second;
  TUSubsequence r_3 = p_rb;
  mfecovar ret_left = bl(l_0, l_1, l_2, l_3);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  ret_right = bl_bt_r(r_0, r_1, r_2, r_3);
  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  mfe_nodangle::br_bt(const TUSubsequence & p_lb, const std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > & p_x, const TUSubsequence & p_rr, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  mfecovar l_1 = p_x.first;
  TUSubsequence l_2 = p_rr;
  TUSubsequence l_3 = p_rb;
  TUSubsequence r_0 = p_lb;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  r_1 = p_x.second;
  TUSubsequence r_2 = p_rr;
  TUSubsequence r_3 = p_rb;
  mfecovar ret_left = br(l_0, l_1, l_2, l_3);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  ret_right = br_bt_r(r_0, r_1, r_2, r_3);
  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  mfe_nodangle::cadd_bt(const std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > & p_x, const std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > & p_y)
{
  mfecovar l_0 = p_x.first;
  mfecovar l_1 = p_y.first;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  r_0 = p_x.second;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  r_1 = p_y.second;
  mfecovar ret_left = cadd(l_0, l_1);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  ret_right = cadd_bt_r(r_0, r_1);
  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  mfe_nodangle::drem_bt(const TUSubsequence & p_lb, const std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > & p_x, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  mfecovar l_1 = p_x.first;
  TUSubsequence l_2 = p_rb;
  TUSubsequence r_0 = p_lb;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  r_1 = p_x.second;
  TUSubsequence r_2 = p_rb;
  mfecovar ret_left = drem(l_0, l_1, l_2);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  ret_right = drem_bt_r(r_0, r_1, r_2);
  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > mfe_nodangle::h_bt(List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > i, mfecovar &  left)
{
  return i;
}

List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > mfe_nodangle::h_bt(List_Ref<std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > > i)
{
  return i;
}

std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  mfe_nodangle::hl_bt(const TUSubsequence & p_lb, const TUSubsequence & p_r, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  TUSubsequence l_1 = p_r;
  TUSubsequence l_2 = p_rb;
  TUSubsequence r_0 = p_lb;
  TUSubsequence r_1 = p_r;
  TUSubsequence r_2 = p_rb;
  mfecovar ret_left = hl(l_0, l_1, l_2);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  ret_right = hl_bt_r(r_0, r_1, r_2);
  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  mfe_nodangle::il_bt(const TUSubsequence & p_lb, const TUSubsequence & p_lr, const std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > & p_x, const TUSubsequence & p_rr, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  TUSubsequence l_1 = p_lr;
  mfecovar l_2 = p_x.first;
  TUSubsequence l_3 = p_rr;
  TUSubsequence l_4 = p_rb;
  TUSubsequence r_0 = p_lb;
  TUSubsequence r_1 = p_lr;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  r_2 = p_x.second;
  TUSubsequence r_3 = p_rr;
  TUSubsequence r_4 = p_rb;
  mfecovar ret_left = il(l_0, l_1, l_2, l_3, l_4);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  ret_right = il_bt_r(r_0, r_1, r_2, r_3, r_4);
  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  mfe_nodangle::incl_bt(const std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > & p_x)
{
  mfecovar l_0 = p_x.first;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  r_0 = p_x.second;
  mfecovar ret_left = incl(l_0);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  ret_right = incl_bt_r(r_0);
  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  mfe_nodangle::ml_bt(const TUSubsequence & p_lb, const std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > & p_x, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  mfecovar l_1 = p_x.first;
  TUSubsequence l_2 = p_rb;
  TUSubsequence r_0 = p_lb;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  r_1 = p_x.second;
  TUSubsequence r_2 = p_rb;
  mfecovar ret_left = ml(l_0, l_1, l_2);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  ret_right = ml_bt_r(r_0, r_1, r_2);
  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  mfe_nodangle::nil_bt(const TUSubsequence & p_n)
{
  TUSubsequence l_0 = p_n;
  TUSubsequence r_0 = p_n;
  mfecovar ret_left = nil(l_0);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  ret_right = nil_bt_r(r_0);
  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  mfe_nodangle::sadd_bt(const TUSubsequence & p_lb, const std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > & p_x)
{
  TUSubsequence l_0 = p_lb;
  mfecovar l_1 = p_x.first;
  TUSubsequence r_0 = p_lb;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  r_1 = p_x.second;
  mfecovar ret_left = sadd(l_0, l_1);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  ret_right = sadd_bt_r(r_0, r_1);
  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}

std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  mfe_nodangle::sr_bt(const TUSubsequence & p_lb, const std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > > & p_x, const TUSubsequence & p_rb)
{
  TUSubsequence l_0 = p_lb;
  mfecovar l_1 = p_x.first;
  TUSubsequence l_2 = p_rb;
  TUSubsequence r_0 = p_lb;
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  r_1 = p_x.second;
  TUSubsequence r_2 = p_rb;
  mfecovar ret_left = sr(l_0, l_1, l_2);
  intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> >  ret_right = sr_bt_r(r_0, r_1, r_2);
  std::pair<mfecovar, intrusive_ptr<Backtrace<std::pair<std::pair<String, Shape> , double> , unsigned int> > >  ret;
  ret.first = ret_left;
  ret.second = ret_right;
  return ret;
}


