/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2010 BiBiServ Curator Team, http://bibiserv.cebitec.uni-bielefeld.de,
 * All rights reserved.
 *
 * The contents of this file are subject to the terms of the Common
 * Development and Distribution License("CDDL") (the "License"). You
 * may not use this file except in compliance with the License. You can
 * obtain a copy of the License at http://www.sun.com/cddl/cddl.html
 *
 * See the License for the specific language governing permissions and
 * limitations under the License.  When distributing the software, include
 * this License Header Notice in each file.  If applicable, add the following
 * below the License Header, with the fields enclosed by brackets [] replaced
 *  by your own identifying information:
 *
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 */
/**
 * Implementation class  for function rnaalishapes_function_convert, implements all request and
 * response methods ...
 *
 * <b>Attention: This is autogenerated code. </b>
 *
 *
 * @author Jan Krueger - jkrueger[aet]cebitec.uni-bielefeld.de (template)
 */
package de.unibi.techfak.bibiserv.tools.rnaalishapes;

import de.unibi.techfak.bibiserv.util.ontoaccess.bibiontotypes.OntoRepresentation;
import de.unibi.techfak.bibiserv.util.ontoaccess.bibiontotypes.impl.OntoRepresentationImplementation;
import de.unibi.cebitec.bibiserv.util.convert.ConversionException;
import de.unibi.cebitec.bibiserv.util.validate.ValidationException;
import de.unibi.cebitec.bibiserv.utils.ValidationConnection;
import de.unibi.techfak.bibiserv.BiBiTools;
import de.unibi.techfak.bibiserv.Status;
import de.unibi.techfak.bibiserv.cms.TrunnableItem;
import de.unibi.techfak.bibiserv.exception.BiBiToolsException;
import de.unibi.techfak.bibiserv.exception.DBConnectionException;
import de.unibi.techfak.bibiserv.exception.IdNotFoundException;
import de.unibi.techfak.bibiserv.util.Pair;
import java.io.File;

import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.List;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;

import org.apache.log4j.Logger;

public class rnaalishapes_function_convert {

private BiBiTools bibitools;
private Utilities utilities = new Utilities();


private static Logger log = Logger.getLogger(rnaalishapes_function_convert.class);

    /* #########################################
     * #     DI method setExecfunction          #
     * ######################################### */
    public rnaalishapes_function_convert_threadworker threadworker;

    public void setThreadworker(rnaalishapes_function_convert_threadworker threadworker){
        this.threadworker = threadworker;
    }

     /* #########################################
     * #           Inputs and Outputs           #
     * ######################################### */
	private static final OntoRepresentation representation_input = buildInput();

	private static OntoRepresentation buildInput() {
			try {
			return new OntoRepresentationImplementation("ToolDependentRepresentation");
		} catch (Exception e) {
			log.fatal(e.getMessage(),e);
			return null;
		}
	}

	public static OntoRepresentation getRepresentationInput() {
		 return representation_input;
	}

	private static final OntoRepresentation representation_output = buildOutput();

	private static OntoRepresentation buildOutput() {
		try {
			return new OntoRepresentationImplementation("ToolDependentRepresentation");
		} catch (Exception e) {
			log.fatal(e.getMessage(),e);
			return null;
		}
	}

	public static OntoRepresentation getRepresentationOutput() {
		 return representation_output;
	}
        
    
     /* #########################################
     * #           Managing Function          #
     * ######################################### */
private String requestImpl( List<Pair<String,String>> paramlist,  String accesskey,  String secretkey,  String uploadbucket,  String uploadfolder, Object input_0, OntoRepresentation representation_0, boolean streamsSupported_0, boolean skipValidation_0) throws BiBiToolsException {

    try {
        // create new BiBiTools object
        initializeBiBiTools();
        // get status object from bibitools;

        threadworker.startRequestThread(bibitools, paramlist, accesskey, secretkey, uploadbucket, uploadfolder, getOutputFile(), input_0, representation_0, representation_input, streamsSupported_0, skipValidation_0);


        // return bibiserv id and finish
        return bibitools.getStatus().getId();
    } catch (IdNotFoundException e){
        throw new BiBiToolsException(706, "ID unknown (or older than 30 days)");
    } catch (DBConnectionException e) {
        throw new BiBiToolsException(722, "Internal Resource Error");
    }
    

}

	
    
    
    /** private response function; this Function is called by the public 
     *  response representation. */
    private Object responseImpl(String id) throws BiBiToolsException {
        try {
                // create new BiBiTools object
                initializeBiBiTools(id);
               // get status object from bibitools;
                Status status = bibitools.getStatus();
                // check if process thread is finished
                if (status.getStatuscode() == 600) {

                    /*
                     * TG: Change behaviour of getOutputFile if needed!
                     */
                    return bibitools.retrieveOutputData(getOutputFile(), representation_output.getType().name() , representation_output.getImplementationType());
                }
                throw new BiBiToolsException(status);
        } catch (IdNotFoundException e) {
                throw new BiBiToolsException(706, "ID unknown (or older than 30 days)");
        } catch (DBConnectionException e) {
                throw new BiBiToolsException(722, "Internal Resource Error");
        } catch (FileNotFoundException e) {
                throw new BiBiToolsException(723, "Internal Resource Error");
        }
    }

    
    /**
     * Returns the outputfile of the tool.
     *  ATTENTION! Depending on tool behaviour the bibitool.getOutputFile(...) has
     *  to extended (with a file extention) or replaced by yourself.
     * 
     *  JK, 08/04/2011, TG, 12/2012 
     * 
     * @return 
     */    
    private File getOutputFile() throws BiBiToolsException, DBConnectionException, IdNotFoundException{
        return bibitools.getOutputFile("rnaalishapes_function_convert");
    }
         
  
    public Object response(String id, OntoRepresentation representation) throws BiBiToolsException, ConversionException {
        try {
            Object output = responseImpl(id);
            Object converted = Utilities.convert(output, representation_output, representation);
            return converted;
        } catch (BiBiToolsException e) {
            throw BiBiTools.createSOAPFaultException(e);
        }
    }
    
     	public String request(List<Pair<String,String>> param_hash , Object input_0, OntoRepresentation representation_0) throws BiBiToolsException, ConversionException, ValidationException{
		return request(param_hash, "", "", null, null , input_0, representation_0, false, true);
	}

	public String request(List<Pair<String,String>> param_hash, String accesskey, String secretkey, Object input_0, OntoRepresentation representation_0, boolean streamsSupported_0, boolean skipValidation_0) throws BiBiToolsException, ConversionException, ValidationException{
		return request(param_hash, accesskey, secretkey, null, null , input_0, representation_0, streamsSupported_0, skipValidation_0);
	}

	public String request(List<Pair<String,String>> param_hash, String accesskey, String secretkey, String uploadbucket, String uploadfolder, Object input_0, OntoRepresentation representation_0, boolean streamsSupported_0, boolean skipValidation_0) throws BiBiToolsException, ConversionException, ValidationException{
		Object converted_input_0 = input_0;
		if (!(input_0 instanceof ValidationConnection) && !skipValidation_0) {
			input_0 = Utilities.validate(input_0, representation_0);
			converted_input_0 = Utilities.convert(input_0, representation_0, representation_input);
		}
		return requestImpl(param_hash, accesskey, secretkey, uploadbucket, uploadfolder , converted_input_0, representation_0, streamsSupported_0, skipValidation_0);
	}

        
        
    public int getStatusCode(String id) throws BiBiToolsException{
        try {
            // create new BiBiTools object
            initializeBiBiTools(id);
            return bibitools.getStatus().getStatuscode();
       } catch (IdNotFoundException e) {
            throw new BiBiToolsException(706, "ID unknown (or older than 30 years)");
       } catch (DBConnectionException e) {
            throw new BiBiToolsException(722, "Internal Resource Error");
       }

    }

    public Status getStatus(String id) throws BiBiToolsException {
        try {
            // create new BiBiTools object
            initializeBiBiTools(id);
            return bibitools.getStatus();
        } catch (IdNotFoundException e) {
            throw new BiBiToolsException(706, "ID unknown (or older than 30 years)");
        } 
    }

    public String getStatusDescription(String id) throws BiBiToolsException {
        try {
            // create new BiBiTools object
            initializeBiBiTools(id);
            return bibitools.getStatus().getDescription();
        } catch (IdNotFoundException e) {
            throw new BiBiToolsException(706, "ID unknown (or older than 30 years)");
        } catch (DBConnectionException e) {
            throw new BiBiToolsException(722, "Internal Resource Error");
        }
    }

    public List<Pair<String, String>> getUploadDownloadData(String id) throws BiBiToolsException {
        try {
            // create new BiBiTools object
            initializeBiBiTools(id);
            return bibitools.getStatus().getUploadDownloadData();
        } catch (IdNotFoundException e) {
            throw new BiBiToolsException(706, "ID unknown (or older than 30 years)");
        } catch (DBConnectionException e) {
            throw new BiBiToolsException(722, "Internal Resource Error");
        }
    }


    /**
     * Service method that return a tool description. The tool description is
     * currently an RunableItem Object.
     *
     * @return Return the runnableItem.
     */
    public TrunnableItem getRunnableItem() throws BiBiToolsException {
        try {
            // create JAXB Context
            JAXBContext jaxbcontext = JAXBContext.newInstance(TrunnableItem.class.getName());
            // create Unmarshaeller
            Unmarshaller unmarshaller = jaxbcontext.createUnmarshaller();
            // load runnableitem from file and element
            return (TrunnableItem) unmarshaller.unmarshal(getClass().getResourceAsStream("/config/runnableitem.xml"));
        } catch (JAXBException e) {
            throw new BiBiToolsException(721, "Internal Resource Error", e);
        }

    }

    private void initializeBiBiTools() throws BiBiToolsException, IdNotFoundException {
        initializeBiBiTools(null);
    }

    private String bibitools_id; 
    
    private void initializeBiBiTools(String id) throws BiBiToolsException, IdNotFoundException {
        
         if (bibitools == null || bibitools_id == null || !bibitools_id.equals(id)) {
        
            InputStream is = getClass().getResourceAsStream("/runnableitem.xml");
            if (is == null) {
                throw new BiBiToolsException(700, "get resource  '/runnableitem.xml' as stream failed ... ");
            }
            bibitools = new BiBiTools(id, is);
            bibitools_id = bibitools.getStatus().getId();
         }
    }
    
    
    public List<String> getMatchingFiles(String folder, String wildcard){
        return bibitools.getAllFilesInSpoolfirMatchingWildcard(folder, wildcard);
    }
    
    public byte[] readSpool(String filename){
        try { 
            return bibitools.readSpoolFile(filename);
        } catch (FileNotFoundException ex) {
            return null;
        }
    }
}
