/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 * Copyright 2010 BiBiServ Curator Team, http://bibiserv.cebitec.uni-bielefeld.de, 
 * All rights reserved.
 * 
 * The contents of this file are subject to the terms of the Common
 * Development and Distribution License("CDDL") (the "License"). You 
 * may not use this file except in compliance with the License. You can 
 * obtain a copy of the License at http://www.sun.com/cddl/cddl.html
 * 
 * See the License for the specific language governing permissions and 
 * limitations under the License.  When distributing the software, include 
 * this License Header Notice in each file.  If applicable, add the following 
 * below the License Header, with the fields enclosed by brackets [] replaced
 *  by your own identifying information:
 * 
 * "Portions Copyrighted [year] [name of copyright owner]"
 * 
 * Contributor(s):
 * 
 */
package de.unibi.techfak.bibiserv.tools.rnaalishapes.web;

import java.io.File;
import java.io.IOException;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.DisposableBean;
import org.springframework.beans.factory.InitializingBean;
/**
 * This is a autogenerated function bean template class for tool <i>rnaalishapes_function</i>
 *
 * @author Jan Krueger - jkrueger[aet]cebitec.uni-bielefeld.de
 */
public class rnaalishapes_function implements InitializingBean, DisposableBean{


    private static Logger log = Logger.getLogger(de.unibi.techfak.bibiserv.tools.rnaalishapes.web.rnaalishapes_function.class);


    /* #########################################
     * #                 FacesContext           #
     * #########################################*/
    private FacesContext context;

    public FacesContext getContext() {
        return context;
    }
    /* #########################################
     * #                  sessionId            #
     * #########################################*/
    private String sessionId;

    public String getSessionId() {
        return sessionId;
    }
    /* #########################################
     * #       session dependend tmp dir       #
     * #########################################*/
    File tmpdir;

    public File getTmpdir() {
        return tmpdir;
    }
     /* #########################################
     * #       function selection              #
     * #########################################*/
    private String functionSelection;
    
    public String getFunctionSelection() {
        return functionSelection;
    }
    
    public void setFunctionSelection(String functionSelection){
        this.functionSelection = functionSelection;
    }
    
    public void select(ActionEvent e){
        try {   
            extcontext.redirect("/rnaalishapes?viewType=submission&subType="+functionSelection);
        } catch (IOException ex) {
            log.error("Can't redirect to "+functionSelection+"!",ex);
        }
    }


    /* #########################################
     * #  Implementation of DisposableBean     #
     * #########################################*/
    public void destroy() throws Exception {
       
        deleteTMPDir();
    }

    /* #########################################
     * #  Implementation of InitializingBean   #
     * #########################################*/
    private ExternalContext extcontext;

    public void afterPropertiesSet() throws Exception {
        context = FacesContext.getCurrentInstance();
        if (context != null) {
            extcontext = context.getExternalContext();

            Object obj = extcontext.getSession(false);

            if (obj != null) {
                sessionId = ((HttpSession) obj).getId();
                log.info("[afterPropertiesSet] HttpSessionId is " + sessionId);
                createTMPDir();
            } else {
                log.fatal("[afterPropertiesSet] HttpSession is 'null'!");
            }
        } else {
            log.fatal("[afterPropertiesSet] FacesContext is null !");
        }
    }



    boolean firsttime = true;

    public void setFirsttime(boolean firsttime){
        this.firsttime = firsttime;
    }

    public boolean isFirsttime(){
        return firsttime;
    }

    /* #########################################
     * #  private helper methods               #
     * #########################################*/
    private void createTMPDir() {
        tmpdir = new File(System.getProperty("java.io.tmpdir") + System.getProperty("file.separator") + sessionId);
        tmpdir.mkdirs();
    }

    private void deleteTMPDir() {
        if (tmpdir != null && tmpdir.exists()) {
            deleteDirectory(tmpdir);
        }
    }

    private static boolean deleteDirectory(File path) {
        for (File file : path.listFiles()) {
            if (file.isDirectory()) {
                deleteDirectory(file);
            } else {
                file.delete();
            }
        }
        return path.delete();
    }
    

}
